
AGH-CLK-STM32L051K8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ce8  0800b8b8  0800b8b8  0001b8b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e5a0  0800e5a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800e5a0  0800e5a0  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e5a8  0800e5a8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e5a8  0800e5a8  0001e5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e5ac  0800e5ac  0001e5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800e5b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b4  20000080  0800e630  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000734  0800e630  00020734  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b1f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c78  00000000  00000000  00033bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00036840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00037930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001562b  00000000  00000000  00038900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018717  00000000  00000000  0004df2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c203  00000000  00000000  00066642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e2845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004618  00000000  00000000  000e2898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b8a0 	.word	0x0800b8a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	0800b8a0 	.word	0x0800b8a0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 f845 	bl	80014a8 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 ff95 	bl	8001358 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f837 	bl	80014a8 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f82d 	bl	80014a8 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 ffbd 	bl	80013dc <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 ffb3 	bl	80013dc <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__aeabi_uldivmod>:
 8000484:	2b00      	cmp	r3, #0
 8000486:	d111      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 8000488:	2a00      	cmp	r2, #0
 800048a:	d10f      	bne.n	80004ac <__aeabi_uldivmod+0x28>
 800048c:	2900      	cmp	r1, #0
 800048e:	d100      	bne.n	8000492 <__aeabi_uldivmod+0xe>
 8000490:	2800      	cmp	r0, #0
 8000492:	d002      	beq.n	800049a <__aeabi_uldivmod+0x16>
 8000494:	2100      	movs	r1, #0
 8000496:	43c9      	mvns	r1, r1
 8000498:	0008      	movs	r0, r1
 800049a:	b407      	push	{r0, r1, r2}
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <__aeabi_uldivmod+0x24>)
 800049e:	a102      	add	r1, pc, #8	; (adr r1, 80004a8 <__aeabi_uldivmod+0x24>)
 80004a0:	1840      	adds	r0, r0, r1
 80004a2:	9002      	str	r0, [sp, #8]
 80004a4:	bd03      	pop	{r0, r1, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	ffffff5d 	.word	0xffffff5d
 80004ac:	b403      	push	{r0, r1}
 80004ae:	4668      	mov	r0, sp
 80004b0:	b501      	push	{r0, lr}
 80004b2:	9802      	ldr	r0, [sp, #8]
 80004b4:	f000 f852 	bl	800055c <__udivmoddi4>
 80004b8:	9b01      	ldr	r3, [sp, #4]
 80004ba:	469e      	mov	lr, r3
 80004bc:	b002      	add	sp, #8
 80004be:	bc0c      	pop	{r2, r3}
 80004c0:	4770      	bx	lr
 80004c2:	46c0      	nop			; (mov r8, r8)

080004c4 <__aeabi_lmul>:
 80004c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c6:	46ce      	mov	lr, r9
 80004c8:	4647      	mov	r7, r8
 80004ca:	b580      	push	{r7, lr}
 80004cc:	0007      	movs	r7, r0
 80004ce:	4699      	mov	r9, r3
 80004d0:	0c3b      	lsrs	r3, r7, #16
 80004d2:	469c      	mov	ip, r3
 80004d4:	0413      	lsls	r3, r2, #16
 80004d6:	0c1b      	lsrs	r3, r3, #16
 80004d8:	001d      	movs	r5, r3
 80004da:	000e      	movs	r6, r1
 80004dc:	4661      	mov	r1, ip
 80004de:	0400      	lsls	r0, r0, #16
 80004e0:	0c14      	lsrs	r4, r2, #16
 80004e2:	0c00      	lsrs	r0, r0, #16
 80004e4:	4345      	muls	r5, r0
 80004e6:	434b      	muls	r3, r1
 80004e8:	4360      	muls	r0, r4
 80004ea:	4361      	muls	r1, r4
 80004ec:	18c0      	adds	r0, r0, r3
 80004ee:	0c2c      	lsrs	r4, r5, #16
 80004f0:	1820      	adds	r0, r4, r0
 80004f2:	468c      	mov	ip, r1
 80004f4:	4283      	cmp	r3, r0
 80004f6:	d903      	bls.n	8000500 <__aeabi_lmul+0x3c>
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	025b      	lsls	r3, r3, #9
 80004fc:	4698      	mov	r8, r3
 80004fe:	44c4      	add	ip, r8
 8000500:	4649      	mov	r1, r9
 8000502:	4379      	muls	r1, r7
 8000504:	4372      	muls	r2, r6
 8000506:	0c03      	lsrs	r3, r0, #16
 8000508:	4463      	add	r3, ip
 800050a:	042d      	lsls	r5, r5, #16
 800050c:	0c2d      	lsrs	r5, r5, #16
 800050e:	18c9      	adds	r1, r1, r3
 8000510:	0400      	lsls	r0, r0, #16
 8000512:	1940      	adds	r0, r0, r5
 8000514:	1889      	adds	r1, r1, r2
 8000516:	bcc0      	pop	{r6, r7}
 8000518:	46b9      	mov	r9, r7
 800051a:	46b0      	mov	r8, r6
 800051c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051e:	46c0      	nop			; (mov r8, r8)

08000520 <__aeabi_d2uiz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <__aeabi_d2uiz+0x38>)
 8000526:	0004      	movs	r4, r0
 8000528:	000d      	movs	r5, r1
 800052a:	f7ff ffa1 	bl	8000470 <__aeabi_dcmpge>
 800052e:	2800      	cmp	r0, #0
 8000530:	d104      	bne.n	800053c <__aeabi_d2uiz+0x1c>
 8000532:	0020      	movs	r0, r4
 8000534:	0029      	movs	r1, r5
 8000536:	f001 fe19 	bl	800216c <__aeabi_d2iz>
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <__aeabi_d2uiz+0x38>)
 800053e:	2200      	movs	r2, #0
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fa80 	bl	8001a48 <__aeabi_dsub>
 8000548:	f001 fe10 	bl	800216c <__aeabi_d2iz>
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	061b      	lsls	r3, r3, #24
 8000550:	469c      	mov	ip, r3
 8000552:	4460      	add	r0, ip
 8000554:	e7f1      	b.n	800053a <__aeabi_d2uiz+0x1a>
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	41e00000 	.word	0x41e00000

0800055c <__udivmoddi4>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	4657      	mov	r7, sl
 8000560:	464e      	mov	r6, r9
 8000562:	4645      	mov	r5, r8
 8000564:	46de      	mov	lr, fp
 8000566:	b5e0      	push	{r5, r6, r7, lr}
 8000568:	0004      	movs	r4, r0
 800056a:	000d      	movs	r5, r1
 800056c:	4692      	mov	sl, r2
 800056e:	4699      	mov	r9, r3
 8000570:	b083      	sub	sp, #12
 8000572:	428b      	cmp	r3, r1
 8000574:	d830      	bhi.n	80005d8 <__udivmoddi4+0x7c>
 8000576:	d02d      	beq.n	80005d4 <__udivmoddi4+0x78>
 8000578:	4649      	mov	r1, r9
 800057a:	4650      	mov	r0, sl
 800057c:	f001 fe7a 	bl	8002274 <__clzdi2>
 8000580:	0029      	movs	r1, r5
 8000582:	0006      	movs	r6, r0
 8000584:	0020      	movs	r0, r4
 8000586:	f001 fe75 	bl	8002274 <__clzdi2>
 800058a:	1a33      	subs	r3, r6, r0
 800058c:	4698      	mov	r8, r3
 800058e:	3b20      	subs	r3, #32
 8000590:	469b      	mov	fp, r3
 8000592:	d433      	bmi.n	80005fc <__udivmoddi4+0xa0>
 8000594:	465a      	mov	r2, fp
 8000596:	4653      	mov	r3, sl
 8000598:	4093      	lsls	r3, r2
 800059a:	4642      	mov	r2, r8
 800059c:	001f      	movs	r7, r3
 800059e:	4653      	mov	r3, sl
 80005a0:	4093      	lsls	r3, r2
 80005a2:	001e      	movs	r6, r3
 80005a4:	42af      	cmp	r7, r5
 80005a6:	d83a      	bhi.n	800061e <__udivmoddi4+0xc2>
 80005a8:	42af      	cmp	r7, r5
 80005aa:	d100      	bne.n	80005ae <__udivmoddi4+0x52>
 80005ac:	e078      	b.n	80006a0 <__udivmoddi4+0x144>
 80005ae:	465b      	mov	r3, fp
 80005b0:	1ba4      	subs	r4, r4, r6
 80005b2:	41bd      	sbcs	r5, r7
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	da00      	bge.n	80005ba <__udivmoddi4+0x5e>
 80005b8:	e075      	b.n	80006a6 <__udivmoddi4+0x14a>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2300      	movs	r3, #0
 80005be:	9200      	str	r2, [sp, #0]
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2301      	movs	r3, #1
 80005c4:	465a      	mov	r2, fp
 80005c6:	4093      	lsls	r3, r2
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2301      	movs	r3, #1
 80005cc:	4642      	mov	r2, r8
 80005ce:	4093      	lsls	r3, r2
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	e028      	b.n	8000626 <__udivmoddi4+0xca>
 80005d4:	4282      	cmp	r2, r0
 80005d6:	d9cf      	bls.n	8000578 <__udivmoddi4+0x1c>
 80005d8:	2200      	movs	r2, #0
 80005da:	2300      	movs	r3, #0
 80005dc:	9200      	str	r2, [sp, #0]
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <__udivmoddi4+0x8e>
 80005e6:	601c      	str	r4, [r3, #0]
 80005e8:	605d      	str	r5, [r3, #4]
 80005ea:	9800      	ldr	r0, [sp, #0]
 80005ec:	9901      	ldr	r1, [sp, #4]
 80005ee:	b003      	add	sp, #12
 80005f0:	bcf0      	pop	{r4, r5, r6, r7}
 80005f2:	46bb      	mov	fp, r7
 80005f4:	46b2      	mov	sl, r6
 80005f6:	46a9      	mov	r9, r5
 80005f8:	46a0      	mov	r8, r4
 80005fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fc:	4642      	mov	r2, r8
 80005fe:	2320      	movs	r3, #32
 8000600:	1a9b      	subs	r3, r3, r2
 8000602:	4652      	mov	r2, sl
 8000604:	40da      	lsrs	r2, r3
 8000606:	4641      	mov	r1, r8
 8000608:	0013      	movs	r3, r2
 800060a:	464a      	mov	r2, r9
 800060c:	408a      	lsls	r2, r1
 800060e:	0017      	movs	r7, r2
 8000610:	4642      	mov	r2, r8
 8000612:	431f      	orrs	r7, r3
 8000614:	4653      	mov	r3, sl
 8000616:	4093      	lsls	r3, r2
 8000618:	001e      	movs	r6, r3
 800061a:	42af      	cmp	r7, r5
 800061c:	d9c4      	bls.n	80005a8 <__udivmoddi4+0x4c>
 800061e:	2200      	movs	r2, #0
 8000620:	2300      	movs	r3, #0
 8000622:	9200      	str	r2, [sp, #0]
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	4643      	mov	r3, r8
 8000628:	2b00      	cmp	r3, #0
 800062a:	d0d9      	beq.n	80005e0 <__udivmoddi4+0x84>
 800062c:	07fb      	lsls	r3, r7, #31
 800062e:	0872      	lsrs	r2, r6, #1
 8000630:	431a      	orrs	r2, r3
 8000632:	4646      	mov	r6, r8
 8000634:	087b      	lsrs	r3, r7, #1
 8000636:	e00e      	b.n	8000656 <__udivmoddi4+0xfa>
 8000638:	42ab      	cmp	r3, r5
 800063a:	d101      	bne.n	8000640 <__udivmoddi4+0xe4>
 800063c:	42a2      	cmp	r2, r4
 800063e:	d80c      	bhi.n	800065a <__udivmoddi4+0xfe>
 8000640:	1aa4      	subs	r4, r4, r2
 8000642:	419d      	sbcs	r5, r3
 8000644:	2001      	movs	r0, #1
 8000646:	1924      	adds	r4, r4, r4
 8000648:	416d      	adcs	r5, r5
 800064a:	2100      	movs	r1, #0
 800064c:	3e01      	subs	r6, #1
 800064e:	1824      	adds	r4, r4, r0
 8000650:	414d      	adcs	r5, r1
 8000652:	2e00      	cmp	r6, #0
 8000654:	d006      	beq.n	8000664 <__udivmoddi4+0x108>
 8000656:	42ab      	cmp	r3, r5
 8000658:	d9ee      	bls.n	8000638 <__udivmoddi4+0xdc>
 800065a:	3e01      	subs	r6, #1
 800065c:	1924      	adds	r4, r4, r4
 800065e:	416d      	adcs	r5, r5
 8000660:	2e00      	cmp	r6, #0
 8000662:	d1f8      	bne.n	8000656 <__udivmoddi4+0xfa>
 8000664:	9800      	ldr	r0, [sp, #0]
 8000666:	9901      	ldr	r1, [sp, #4]
 8000668:	465b      	mov	r3, fp
 800066a:	1900      	adds	r0, r0, r4
 800066c:	4169      	adcs	r1, r5
 800066e:	2b00      	cmp	r3, #0
 8000670:	db24      	blt.n	80006bc <__udivmoddi4+0x160>
 8000672:	002b      	movs	r3, r5
 8000674:	465a      	mov	r2, fp
 8000676:	4644      	mov	r4, r8
 8000678:	40d3      	lsrs	r3, r2
 800067a:	002a      	movs	r2, r5
 800067c:	40e2      	lsrs	r2, r4
 800067e:	001c      	movs	r4, r3
 8000680:	465b      	mov	r3, fp
 8000682:	0015      	movs	r5, r2
 8000684:	2b00      	cmp	r3, #0
 8000686:	db2a      	blt.n	80006de <__udivmoddi4+0x182>
 8000688:	0026      	movs	r6, r4
 800068a:	409e      	lsls	r6, r3
 800068c:	0033      	movs	r3, r6
 800068e:	0026      	movs	r6, r4
 8000690:	4647      	mov	r7, r8
 8000692:	40be      	lsls	r6, r7
 8000694:	0032      	movs	r2, r6
 8000696:	1a80      	subs	r0, r0, r2
 8000698:	4199      	sbcs	r1, r3
 800069a:	9000      	str	r0, [sp, #0]
 800069c:	9101      	str	r1, [sp, #4]
 800069e:	e79f      	b.n	80005e0 <__udivmoddi4+0x84>
 80006a0:	42a3      	cmp	r3, r4
 80006a2:	d8bc      	bhi.n	800061e <__udivmoddi4+0xc2>
 80006a4:	e783      	b.n	80005ae <__udivmoddi4+0x52>
 80006a6:	4642      	mov	r2, r8
 80006a8:	2320      	movs	r3, #32
 80006aa:	2100      	movs	r1, #0
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	9100      	str	r1, [sp, #0]
 80006b2:	9201      	str	r2, [sp, #4]
 80006b4:	2201      	movs	r2, #1
 80006b6:	40da      	lsrs	r2, r3
 80006b8:	9201      	str	r2, [sp, #4]
 80006ba:	e786      	b.n	80005ca <__udivmoddi4+0x6e>
 80006bc:	4642      	mov	r2, r8
 80006be:	2320      	movs	r3, #32
 80006c0:	1a9b      	subs	r3, r3, r2
 80006c2:	002a      	movs	r2, r5
 80006c4:	4646      	mov	r6, r8
 80006c6:	409a      	lsls	r2, r3
 80006c8:	0023      	movs	r3, r4
 80006ca:	40f3      	lsrs	r3, r6
 80006cc:	4644      	mov	r4, r8
 80006ce:	4313      	orrs	r3, r2
 80006d0:	002a      	movs	r2, r5
 80006d2:	40e2      	lsrs	r2, r4
 80006d4:	001c      	movs	r4, r3
 80006d6:	465b      	mov	r3, fp
 80006d8:	0015      	movs	r5, r2
 80006da:	2b00      	cmp	r3, #0
 80006dc:	dad4      	bge.n	8000688 <__udivmoddi4+0x12c>
 80006de:	4642      	mov	r2, r8
 80006e0:	002f      	movs	r7, r5
 80006e2:	2320      	movs	r3, #32
 80006e4:	0026      	movs	r6, r4
 80006e6:	4097      	lsls	r7, r2
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	40de      	lsrs	r6, r3
 80006ec:	003b      	movs	r3, r7
 80006ee:	4333      	orrs	r3, r6
 80006f0:	e7cd      	b.n	800068e <__udivmoddi4+0x132>
 80006f2:	46c0      	nop			; (mov r8, r8)

080006f4 <__aeabi_dadd>:
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	4646      	mov	r6, r8
 80006fa:	46d6      	mov	lr, sl
 80006fc:	000d      	movs	r5, r1
 80006fe:	0004      	movs	r4, r0
 8000700:	b5c0      	push	{r6, r7, lr}
 8000702:	001f      	movs	r7, r3
 8000704:	0011      	movs	r1, r2
 8000706:	0328      	lsls	r0, r5, #12
 8000708:	0f62      	lsrs	r2, r4, #29
 800070a:	0a40      	lsrs	r0, r0, #9
 800070c:	4310      	orrs	r0, r2
 800070e:	007a      	lsls	r2, r7, #1
 8000710:	0d52      	lsrs	r2, r2, #21
 8000712:	00e3      	lsls	r3, r4, #3
 8000714:	033c      	lsls	r4, r7, #12
 8000716:	4691      	mov	r9, r2
 8000718:	0a64      	lsrs	r4, r4, #9
 800071a:	0ffa      	lsrs	r2, r7, #31
 800071c:	0f4f      	lsrs	r7, r1, #29
 800071e:	006e      	lsls	r6, r5, #1
 8000720:	4327      	orrs	r7, r4
 8000722:	4692      	mov	sl, r2
 8000724:	46b8      	mov	r8, r7
 8000726:	0d76      	lsrs	r6, r6, #21
 8000728:	0fed      	lsrs	r5, r5, #31
 800072a:	00c9      	lsls	r1, r1, #3
 800072c:	4295      	cmp	r5, r2
 800072e:	d100      	bne.n	8000732 <__aeabi_dadd+0x3e>
 8000730:	e099      	b.n	8000866 <__aeabi_dadd+0x172>
 8000732:	464c      	mov	r4, r9
 8000734:	1b34      	subs	r4, r6, r4
 8000736:	46a4      	mov	ip, r4
 8000738:	2c00      	cmp	r4, #0
 800073a:	dc00      	bgt.n	800073e <__aeabi_dadd+0x4a>
 800073c:	e07c      	b.n	8000838 <__aeabi_dadd+0x144>
 800073e:	464a      	mov	r2, r9
 8000740:	2a00      	cmp	r2, #0
 8000742:	d100      	bne.n	8000746 <__aeabi_dadd+0x52>
 8000744:	e0b8      	b.n	80008b8 <__aeabi_dadd+0x1c4>
 8000746:	4ac5      	ldr	r2, [pc, #788]	; (8000a5c <__aeabi_dadd+0x368>)
 8000748:	4296      	cmp	r6, r2
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x5a>
 800074c:	e11c      	b.n	8000988 <__aeabi_dadd+0x294>
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	003c      	movs	r4, r7
 8000752:	0412      	lsls	r2, r2, #16
 8000754:	4314      	orrs	r4, r2
 8000756:	46a0      	mov	r8, r4
 8000758:	4662      	mov	r2, ip
 800075a:	2a38      	cmp	r2, #56	; 0x38
 800075c:	dd00      	ble.n	8000760 <__aeabi_dadd+0x6c>
 800075e:	e161      	b.n	8000a24 <__aeabi_dadd+0x330>
 8000760:	2a1f      	cmp	r2, #31
 8000762:	dd00      	ble.n	8000766 <__aeabi_dadd+0x72>
 8000764:	e1cc      	b.n	8000b00 <__aeabi_dadd+0x40c>
 8000766:	4664      	mov	r4, ip
 8000768:	2220      	movs	r2, #32
 800076a:	1b12      	subs	r2, r2, r4
 800076c:	4644      	mov	r4, r8
 800076e:	4094      	lsls	r4, r2
 8000770:	000f      	movs	r7, r1
 8000772:	46a1      	mov	r9, r4
 8000774:	4664      	mov	r4, ip
 8000776:	4091      	lsls	r1, r2
 8000778:	40e7      	lsrs	r7, r4
 800077a:	464c      	mov	r4, r9
 800077c:	1e4a      	subs	r2, r1, #1
 800077e:	4191      	sbcs	r1, r2
 8000780:	433c      	orrs	r4, r7
 8000782:	4642      	mov	r2, r8
 8000784:	4321      	orrs	r1, r4
 8000786:	4664      	mov	r4, ip
 8000788:	40e2      	lsrs	r2, r4
 800078a:	1a80      	subs	r0, r0, r2
 800078c:	1a5c      	subs	r4, r3, r1
 800078e:	42a3      	cmp	r3, r4
 8000790:	419b      	sbcs	r3, r3
 8000792:	425f      	negs	r7, r3
 8000794:	1bc7      	subs	r7, r0, r7
 8000796:	023b      	lsls	r3, r7, #8
 8000798:	d400      	bmi.n	800079c <__aeabi_dadd+0xa8>
 800079a:	e0d0      	b.n	800093e <__aeabi_dadd+0x24a>
 800079c:	027f      	lsls	r7, r7, #9
 800079e:	0a7f      	lsrs	r7, r7, #9
 80007a0:	2f00      	cmp	r7, #0
 80007a2:	d100      	bne.n	80007a6 <__aeabi_dadd+0xb2>
 80007a4:	e0ff      	b.n	80009a6 <__aeabi_dadd+0x2b2>
 80007a6:	0038      	movs	r0, r7
 80007a8:	f001 fd46 	bl	8002238 <__clzsi2>
 80007ac:	0001      	movs	r1, r0
 80007ae:	3908      	subs	r1, #8
 80007b0:	2320      	movs	r3, #32
 80007b2:	0022      	movs	r2, r4
 80007b4:	1a5b      	subs	r3, r3, r1
 80007b6:	408f      	lsls	r7, r1
 80007b8:	40da      	lsrs	r2, r3
 80007ba:	408c      	lsls	r4, r1
 80007bc:	4317      	orrs	r7, r2
 80007be:	42b1      	cmp	r1, r6
 80007c0:	da00      	bge.n	80007c4 <__aeabi_dadd+0xd0>
 80007c2:	e0ff      	b.n	80009c4 <__aeabi_dadd+0x2d0>
 80007c4:	1b89      	subs	r1, r1, r6
 80007c6:	1c4b      	adds	r3, r1, #1
 80007c8:	2b1f      	cmp	r3, #31
 80007ca:	dd00      	ble.n	80007ce <__aeabi_dadd+0xda>
 80007cc:	e0a8      	b.n	8000920 <__aeabi_dadd+0x22c>
 80007ce:	2220      	movs	r2, #32
 80007d0:	0039      	movs	r1, r7
 80007d2:	1ad2      	subs	r2, r2, r3
 80007d4:	0020      	movs	r0, r4
 80007d6:	4094      	lsls	r4, r2
 80007d8:	4091      	lsls	r1, r2
 80007da:	40d8      	lsrs	r0, r3
 80007dc:	1e62      	subs	r2, r4, #1
 80007de:	4194      	sbcs	r4, r2
 80007e0:	40df      	lsrs	r7, r3
 80007e2:	2600      	movs	r6, #0
 80007e4:	4301      	orrs	r1, r0
 80007e6:	430c      	orrs	r4, r1
 80007e8:	0763      	lsls	r3, r4, #29
 80007ea:	d009      	beq.n	8000800 <__aeabi_dadd+0x10c>
 80007ec:	230f      	movs	r3, #15
 80007ee:	4023      	ands	r3, r4
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d005      	beq.n	8000800 <__aeabi_dadd+0x10c>
 80007f4:	1d23      	adds	r3, r4, #4
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	41a4      	sbcs	r4, r4
 80007fa:	4264      	negs	r4, r4
 80007fc:	193f      	adds	r7, r7, r4
 80007fe:	001c      	movs	r4, r3
 8000800:	023b      	lsls	r3, r7, #8
 8000802:	d400      	bmi.n	8000806 <__aeabi_dadd+0x112>
 8000804:	e09e      	b.n	8000944 <__aeabi_dadd+0x250>
 8000806:	4b95      	ldr	r3, [pc, #596]	; (8000a5c <__aeabi_dadd+0x368>)
 8000808:	3601      	adds	r6, #1
 800080a:	429e      	cmp	r6, r3
 800080c:	d100      	bne.n	8000810 <__aeabi_dadd+0x11c>
 800080e:	e0b7      	b.n	8000980 <__aeabi_dadd+0x28c>
 8000810:	4a93      	ldr	r2, [pc, #588]	; (8000a60 <__aeabi_dadd+0x36c>)
 8000812:	08e4      	lsrs	r4, r4, #3
 8000814:	4017      	ands	r7, r2
 8000816:	077b      	lsls	r3, r7, #29
 8000818:	0571      	lsls	r1, r6, #21
 800081a:	027f      	lsls	r7, r7, #9
 800081c:	4323      	orrs	r3, r4
 800081e:	0b3f      	lsrs	r7, r7, #12
 8000820:	0d4a      	lsrs	r2, r1, #21
 8000822:	0512      	lsls	r2, r2, #20
 8000824:	433a      	orrs	r2, r7
 8000826:	07ed      	lsls	r5, r5, #31
 8000828:	432a      	orrs	r2, r5
 800082a:	0018      	movs	r0, r3
 800082c:	0011      	movs	r1, r2
 800082e:	bce0      	pop	{r5, r6, r7}
 8000830:	46ba      	mov	sl, r7
 8000832:	46b1      	mov	r9, r6
 8000834:	46a8      	mov	r8, r5
 8000836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000838:	2c00      	cmp	r4, #0
 800083a:	d04b      	beq.n	80008d4 <__aeabi_dadd+0x1e0>
 800083c:	464c      	mov	r4, r9
 800083e:	1ba4      	subs	r4, r4, r6
 8000840:	46a4      	mov	ip, r4
 8000842:	2e00      	cmp	r6, #0
 8000844:	d000      	beq.n	8000848 <__aeabi_dadd+0x154>
 8000846:	e123      	b.n	8000a90 <__aeabi_dadd+0x39c>
 8000848:	0004      	movs	r4, r0
 800084a:	431c      	orrs	r4, r3
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0x15c>
 800084e:	e1af      	b.n	8000bb0 <__aeabi_dadd+0x4bc>
 8000850:	4662      	mov	r2, ip
 8000852:	1e54      	subs	r4, r2, #1
 8000854:	2a01      	cmp	r2, #1
 8000856:	d100      	bne.n	800085a <__aeabi_dadd+0x166>
 8000858:	e215      	b.n	8000c86 <__aeabi_dadd+0x592>
 800085a:	4d80      	ldr	r5, [pc, #512]	; (8000a5c <__aeabi_dadd+0x368>)
 800085c:	45ac      	cmp	ip, r5
 800085e:	d100      	bne.n	8000862 <__aeabi_dadd+0x16e>
 8000860:	e1c8      	b.n	8000bf4 <__aeabi_dadd+0x500>
 8000862:	46a4      	mov	ip, r4
 8000864:	e11b      	b.n	8000a9e <__aeabi_dadd+0x3aa>
 8000866:	464a      	mov	r2, r9
 8000868:	1ab2      	subs	r2, r6, r2
 800086a:	4694      	mov	ip, r2
 800086c:	2a00      	cmp	r2, #0
 800086e:	dc00      	bgt.n	8000872 <__aeabi_dadd+0x17e>
 8000870:	e0ac      	b.n	80009cc <__aeabi_dadd+0x2d8>
 8000872:	464a      	mov	r2, r9
 8000874:	2a00      	cmp	r2, #0
 8000876:	d043      	beq.n	8000900 <__aeabi_dadd+0x20c>
 8000878:	4a78      	ldr	r2, [pc, #480]	; (8000a5c <__aeabi_dadd+0x368>)
 800087a:	4296      	cmp	r6, r2
 800087c:	d100      	bne.n	8000880 <__aeabi_dadd+0x18c>
 800087e:	e1af      	b.n	8000be0 <__aeabi_dadd+0x4ec>
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	003c      	movs	r4, r7
 8000884:	0412      	lsls	r2, r2, #16
 8000886:	4314      	orrs	r4, r2
 8000888:	46a0      	mov	r8, r4
 800088a:	4662      	mov	r2, ip
 800088c:	2a38      	cmp	r2, #56	; 0x38
 800088e:	dc67      	bgt.n	8000960 <__aeabi_dadd+0x26c>
 8000890:	2a1f      	cmp	r2, #31
 8000892:	dc00      	bgt.n	8000896 <__aeabi_dadd+0x1a2>
 8000894:	e15f      	b.n	8000b56 <__aeabi_dadd+0x462>
 8000896:	4647      	mov	r7, r8
 8000898:	3a20      	subs	r2, #32
 800089a:	40d7      	lsrs	r7, r2
 800089c:	4662      	mov	r2, ip
 800089e:	2a20      	cmp	r2, #32
 80008a0:	d005      	beq.n	80008ae <__aeabi_dadd+0x1ba>
 80008a2:	4664      	mov	r4, ip
 80008a4:	2240      	movs	r2, #64	; 0x40
 80008a6:	1b12      	subs	r2, r2, r4
 80008a8:	4644      	mov	r4, r8
 80008aa:	4094      	lsls	r4, r2
 80008ac:	4321      	orrs	r1, r4
 80008ae:	1e4a      	subs	r2, r1, #1
 80008b0:	4191      	sbcs	r1, r2
 80008b2:	000c      	movs	r4, r1
 80008b4:	433c      	orrs	r4, r7
 80008b6:	e057      	b.n	8000968 <__aeabi_dadd+0x274>
 80008b8:	003a      	movs	r2, r7
 80008ba:	430a      	orrs	r2, r1
 80008bc:	d100      	bne.n	80008c0 <__aeabi_dadd+0x1cc>
 80008be:	e105      	b.n	8000acc <__aeabi_dadd+0x3d8>
 80008c0:	0022      	movs	r2, r4
 80008c2:	3a01      	subs	r2, #1
 80008c4:	2c01      	cmp	r4, #1
 80008c6:	d100      	bne.n	80008ca <__aeabi_dadd+0x1d6>
 80008c8:	e182      	b.n	8000bd0 <__aeabi_dadd+0x4dc>
 80008ca:	4c64      	ldr	r4, [pc, #400]	; (8000a5c <__aeabi_dadd+0x368>)
 80008cc:	45a4      	cmp	ip, r4
 80008ce:	d05b      	beq.n	8000988 <__aeabi_dadd+0x294>
 80008d0:	4694      	mov	ip, r2
 80008d2:	e741      	b.n	8000758 <__aeabi_dadd+0x64>
 80008d4:	4c63      	ldr	r4, [pc, #396]	; (8000a64 <__aeabi_dadd+0x370>)
 80008d6:	1c77      	adds	r7, r6, #1
 80008d8:	4227      	tst	r7, r4
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x1ea>
 80008dc:	e0c4      	b.n	8000a68 <__aeabi_dadd+0x374>
 80008de:	0004      	movs	r4, r0
 80008e0:	431c      	orrs	r4, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dadd+0x1f4>
 80008e6:	e169      	b.n	8000bbc <__aeabi_dadd+0x4c8>
 80008e8:	2c00      	cmp	r4, #0
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x1fa>
 80008ec:	e1bf      	b.n	8000c6e <__aeabi_dadd+0x57a>
 80008ee:	4644      	mov	r4, r8
 80008f0:	430c      	orrs	r4, r1
 80008f2:	d000      	beq.n	80008f6 <__aeabi_dadd+0x202>
 80008f4:	e1d0      	b.n	8000c98 <__aeabi_dadd+0x5a4>
 80008f6:	0742      	lsls	r2, r0, #29
 80008f8:	08db      	lsrs	r3, r3, #3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	08c0      	lsrs	r0, r0, #3
 80008fe:	e029      	b.n	8000954 <__aeabi_dadd+0x260>
 8000900:	003a      	movs	r2, r7
 8000902:	430a      	orrs	r2, r1
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x214>
 8000906:	e170      	b.n	8000bea <__aeabi_dadd+0x4f6>
 8000908:	4662      	mov	r2, ip
 800090a:	4664      	mov	r4, ip
 800090c:	3a01      	subs	r2, #1
 800090e:	2c01      	cmp	r4, #1
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x220>
 8000912:	e0e0      	b.n	8000ad6 <__aeabi_dadd+0x3e2>
 8000914:	4c51      	ldr	r4, [pc, #324]	; (8000a5c <__aeabi_dadd+0x368>)
 8000916:	45a4      	cmp	ip, r4
 8000918:	d100      	bne.n	800091c <__aeabi_dadd+0x228>
 800091a:	e161      	b.n	8000be0 <__aeabi_dadd+0x4ec>
 800091c:	4694      	mov	ip, r2
 800091e:	e7b4      	b.n	800088a <__aeabi_dadd+0x196>
 8000920:	003a      	movs	r2, r7
 8000922:	391f      	subs	r1, #31
 8000924:	40ca      	lsrs	r2, r1
 8000926:	0011      	movs	r1, r2
 8000928:	2b20      	cmp	r3, #32
 800092a:	d003      	beq.n	8000934 <__aeabi_dadd+0x240>
 800092c:	2240      	movs	r2, #64	; 0x40
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	409f      	lsls	r7, r3
 8000932:	433c      	orrs	r4, r7
 8000934:	1e63      	subs	r3, r4, #1
 8000936:	419c      	sbcs	r4, r3
 8000938:	2700      	movs	r7, #0
 800093a:	2600      	movs	r6, #0
 800093c:	430c      	orrs	r4, r1
 800093e:	0763      	lsls	r3, r4, #29
 8000940:	d000      	beq.n	8000944 <__aeabi_dadd+0x250>
 8000942:	e753      	b.n	80007ec <__aeabi_dadd+0xf8>
 8000944:	46b4      	mov	ip, r6
 8000946:	08e4      	lsrs	r4, r4, #3
 8000948:	077b      	lsls	r3, r7, #29
 800094a:	4323      	orrs	r3, r4
 800094c:	08f8      	lsrs	r0, r7, #3
 800094e:	4a43      	ldr	r2, [pc, #268]	; (8000a5c <__aeabi_dadd+0x368>)
 8000950:	4594      	cmp	ip, r2
 8000952:	d01d      	beq.n	8000990 <__aeabi_dadd+0x29c>
 8000954:	4662      	mov	r2, ip
 8000956:	0307      	lsls	r7, r0, #12
 8000958:	0552      	lsls	r2, r2, #21
 800095a:	0b3f      	lsrs	r7, r7, #12
 800095c:	0d52      	lsrs	r2, r2, #21
 800095e:	e760      	b.n	8000822 <__aeabi_dadd+0x12e>
 8000960:	4644      	mov	r4, r8
 8000962:	430c      	orrs	r4, r1
 8000964:	1e62      	subs	r2, r4, #1
 8000966:	4194      	sbcs	r4, r2
 8000968:	18e4      	adds	r4, r4, r3
 800096a:	429c      	cmp	r4, r3
 800096c:	419b      	sbcs	r3, r3
 800096e:	425f      	negs	r7, r3
 8000970:	183f      	adds	r7, r7, r0
 8000972:	023b      	lsls	r3, r7, #8
 8000974:	d5e3      	bpl.n	800093e <__aeabi_dadd+0x24a>
 8000976:	4b39      	ldr	r3, [pc, #228]	; (8000a5c <__aeabi_dadd+0x368>)
 8000978:	3601      	adds	r6, #1
 800097a:	429e      	cmp	r6, r3
 800097c:	d000      	beq.n	8000980 <__aeabi_dadd+0x28c>
 800097e:	e0b5      	b.n	8000aec <__aeabi_dadd+0x3f8>
 8000980:	0032      	movs	r2, r6
 8000982:	2700      	movs	r7, #0
 8000984:	2300      	movs	r3, #0
 8000986:	e74c      	b.n	8000822 <__aeabi_dadd+0x12e>
 8000988:	0742      	lsls	r2, r0, #29
 800098a:	08db      	lsrs	r3, r3, #3
 800098c:	4313      	orrs	r3, r2
 800098e:	08c0      	lsrs	r0, r0, #3
 8000990:	001a      	movs	r2, r3
 8000992:	4302      	orrs	r2, r0
 8000994:	d100      	bne.n	8000998 <__aeabi_dadd+0x2a4>
 8000996:	e1e1      	b.n	8000d5c <__aeabi_dadd+0x668>
 8000998:	2780      	movs	r7, #128	; 0x80
 800099a:	033f      	lsls	r7, r7, #12
 800099c:	4307      	orrs	r7, r0
 800099e:	033f      	lsls	r7, r7, #12
 80009a0:	4a2e      	ldr	r2, [pc, #184]	; (8000a5c <__aeabi_dadd+0x368>)
 80009a2:	0b3f      	lsrs	r7, r7, #12
 80009a4:	e73d      	b.n	8000822 <__aeabi_dadd+0x12e>
 80009a6:	0020      	movs	r0, r4
 80009a8:	f001 fc46 	bl	8002238 <__clzsi2>
 80009ac:	0001      	movs	r1, r0
 80009ae:	3118      	adds	r1, #24
 80009b0:	291f      	cmp	r1, #31
 80009b2:	dc00      	bgt.n	80009b6 <__aeabi_dadd+0x2c2>
 80009b4:	e6fc      	b.n	80007b0 <__aeabi_dadd+0xbc>
 80009b6:	3808      	subs	r0, #8
 80009b8:	4084      	lsls	r4, r0
 80009ba:	0027      	movs	r7, r4
 80009bc:	2400      	movs	r4, #0
 80009be:	42b1      	cmp	r1, r6
 80009c0:	db00      	blt.n	80009c4 <__aeabi_dadd+0x2d0>
 80009c2:	e6ff      	b.n	80007c4 <__aeabi_dadd+0xd0>
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <__aeabi_dadd+0x36c>)
 80009c6:	1a76      	subs	r6, r6, r1
 80009c8:	4017      	ands	r7, r2
 80009ca:	e70d      	b.n	80007e8 <__aeabi_dadd+0xf4>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d02f      	beq.n	8000a30 <__aeabi_dadd+0x33c>
 80009d0:	464a      	mov	r2, r9
 80009d2:	1b92      	subs	r2, r2, r6
 80009d4:	4694      	mov	ip, r2
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_dadd+0x2e8>
 80009da:	e0ad      	b.n	8000b38 <__aeabi_dadd+0x444>
 80009dc:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <__aeabi_dadd+0x368>)
 80009de:	4591      	cmp	r9, r2
 80009e0:	d100      	bne.n	80009e4 <__aeabi_dadd+0x2f0>
 80009e2:	e10f      	b.n	8000c04 <__aeabi_dadd+0x510>
 80009e4:	2280      	movs	r2, #128	; 0x80
 80009e6:	0412      	lsls	r2, r2, #16
 80009e8:	4310      	orrs	r0, r2
 80009ea:	4662      	mov	r2, ip
 80009ec:	2a38      	cmp	r2, #56	; 0x38
 80009ee:	dd00      	ble.n	80009f2 <__aeabi_dadd+0x2fe>
 80009f0:	e10f      	b.n	8000c12 <__aeabi_dadd+0x51e>
 80009f2:	2a1f      	cmp	r2, #31
 80009f4:	dd00      	ble.n	80009f8 <__aeabi_dadd+0x304>
 80009f6:	e180      	b.n	8000cfa <__aeabi_dadd+0x606>
 80009f8:	4664      	mov	r4, ip
 80009fa:	2220      	movs	r2, #32
 80009fc:	001e      	movs	r6, r3
 80009fe:	1b12      	subs	r2, r2, r4
 8000a00:	4667      	mov	r7, ip
 8000a02:	0004      	movs	r4, r0
 8000a04:	4093      	lsls	r3, r2
 8000a06:	4094      	lsls	r4, r2
 8000a08:	40fe      	lsrs	r6, r7
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	40f8      	lsrs	r0, r7
 8000a10:	4334      	orrs	r4, r6
 8000a12:	431c      	orrs	r4, r3
 8000a14:	4480      	add	r8, r0
 8000a16:	1864      	adds	r4, r4, r1
 8000a18:	428c      	cmp	r4, r1
 8000a1a:	41bf      	sbcs	r7, r7
 8000a1c:	427f      	negs	r7, r7
 8000a1e:	464e      	mov	r6, r9
 8000a20:	4447      	add	r7, r8
 8000a22:	e7a6      	b.n	8000972 <__aeabi_dadd+0x27e>
 8000a24:	4642      	mov	r2, r8
 8000a26:	430a      	orrs	r2, r1
 8000a28:	0011      	movs	r1, r2
 8000a2a:	1e4a      	subs	r2, r1, #1
 8000a2c:	4191      	sbcs	r1, r2
 8000a2e:	e6ad      	b.n	800078c <__aeabi_dadd+0x98>
 8000a30:	4c0c      	ldr	r4, [pc, #48]	; (8000a64 <__aeabi_dadd+0x370>)
 8000a32:	1c72      	adds	r2, r6, #1
 8000a34:	4222      	tst	r2, r4
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dadd+0x346>
 8000a38:	e0a1      	b.n	8000b7e <__aeabi_dadd+0x48a>
 8000a3a:	0002      	movs	r2, r0
 8000a3c:	431a      	orrs	r2, r3
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d000      	beq.n	8000a44 <__aeabi_dadd+0x350>
 8000a42:	e0fa      	b.n	8000c3a <__aeabi_dadd+0x546>
 8000a44:	2a00      	cmp	r2, #0
 8000a46:	d100      	bne.n	8000a4a <__aeabi_dadd+0x356>
 8000a48:	e145      	b.n	8000cd6 <__aeabi_dadd+0x5e2>
 8000a4a:	003a      	movs	r2, r7
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x35e>
 8000a50:	e146      	b.n	8000ce0 <__aeabi_dadd+0x5ec>
 8000a52:	0742      	lsls	r2, r0, #29
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	08c0      	lsrs	r0, r0, #3
 8000a5a:	e77b      	b.n	8000954 <__aeabi_dadd+0x260>
 8000a5c:	000007ff 	.word	0x000007ff
 8000a60:	ff7fffff 	.word	0xff7fffff
 8000a64:	000007fe 	.word	0x000007fe
 8000a68:	4647      	mov	r7, r8
 8000a6a:	1a5c      	subs	r4, r3, r1
 8000a6c:	1bc2      	subs	r2, r0, r7
 8000a6e:	42a3      	cmp	r3, r4
 8000a70:	41bf      	sbcs	r7, r7
 8000a72:	427f      	negs	r7, r7
 8000a74:	46b9      	mov	r9, r7
 8000a76:	0017      	movs	r7, r2
 8000a78:	464a      	mov	r2, r9
 8000a7a:	1abf      	subs	r7, r7, r2
 8000a7c:	023a      	lsls	r2, r7, #8
 8000a7e:	d500      	bpl.n	8000a82 <__aeabi_dadd+0x38e>
 8000a80:	e08d      	b.n	8000b9e <__aeabi_dadd+0x4aa>
 8000a82:	0023      	movs	r3, r4
 8000a84:	433b      	orrs	r3, r7
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x396>
 8000a88:	e68a      	b.n	80007a0 <__aeabi_dadd+0xac>
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	2500      	movs	r5, #0
 8000a8e:	e761      	b.n	8000954 <__aeabi_dadd+0x260>
 8000a90:	4cb4      	ldr	r4, [pc, #720]	; (8000d64 <__aeabi_dadd+0x670>)
 8000a92:	45a1      	cmp	r9, r4
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x3a4>
 8000a96:	e0ad      	b.n	8000bf4 <__aeabi_dadd+0x500>
 8000a98:	2480      	movs	r4, #128	; 0x80
 8000a9a:	0424      	lsls	r4, r4, #16
 8000a9c:	4320      	orrs	r0, r4
 8000a9e:	4664      	mov	r4, ip
 8000aa0:	2c38      	cmp	r4, #56	; 0x38
 8000aa2:	dc3d      	bgt.n	8000b20 <__aeabi_dadd+0x42c>
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	2c1f      	cmp	r4, #31
 8000aa8:	dd00      	ble.n	8000aac <__aeabi_dadd+0x3b8>
 8000aaa:	e0b7      	b.n	8000c1c <__aeabi_dadd+0x528>
 8000aac:	2520      	movs	r5, #32
 8000aae:	001e      	movs	r6, r3
 8000ab0:	1b2d      	subs	r5, r5, r4
 8000ab2:	0004      	movs	r4, r0
 8000ab4:	40ab      	lsls	r3, r5
 8000ab6:	40ac      	lsls	r4, r5
 8000ab8:	40d6      	lsrs	r6, r2
 8000aba:	40d0      	lsrs	r0, r2
 8000abc:	4642      	mov	r2, r8
 8000abe:	1e5d      	subs	r5, r3, #1
 8000ac0:	41ab      	sbcs	r3, r5
 8000ac2:	4334      	orrs	r4, r6
 8000ac4:	1a12      	subs	r2, r2, r0
 8000ac6:	4690      	mov	r8, r2
 8000ac8:	4323      	orrs	r3, r4
 8000aca:	e02c      	b.n	8000b26 <__aeabi_dadd+0x432>
 8000acc:	0742      	lsls	r2, r0, #29
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	08c0      	lsrs	r0, r0, #3
 8000ad4:	e73b      	b.n	800094e <__aeabi_dadd+0x25a>
 8000ad6:	185c      	adds	r4, r3, r1
 8000ad8:	429c      	cmp	r4, r3
 8000ada:	419b      	sbcs	r3, r3
 8000adc:	4440      	add	r0, r8
 8000ade:	425b      	negs	r3, r3
 8000ae0:	18c7      	adds	r7, r0, r3
 8000ae2:	2601      	movs	r6, #1
 8000ae4:	023b      	lsls	r3, r7, #8
 8000ae6:	d400      	bmi.n	8000aea <__aeabi_dadd+0x3f6>
 8000ae8:	e729      	b.n	800093e <__aeabi_dadd+0x24a>
 8000aea:	2602      	movs	r6, #2
 8000aec:	4a9e      	ldr	r2, [pc, #632]	; (8000d68 <__aeabi_dadd+0x674>)
 8000aee:	0863      	lsrs	r3, r4, #1
 8000af0:	4017      	ands	r7, r2
 8000af2:	2201      	movs	r2, #1
 8000af4:	4014      	ands	r4, r2
 8000af6:	431c      	orrs	r4, r3
 8000af8:	07fb      	lsls	r3, r7, #31
 8000afa:	431c      	orrs	r4, r3
 8000afc:	087f      	lsrs	r7, r7, #1
 8000afe:	e673      	b.n	80007e8 <__aeabi_dadd+0xf4>
 8000b00:	4644      	mov	r4, r8
 8000b02:	3a20      	subs	r2, #32
 8000b04:	40d4      	lsrs	r4, r2
 8000b06:	4662      	mov	r2, ip
 8000b08:	2a20      	cmp	r2, #32
 8000b0a:	d005      	beq.n	8000b18 <__aeabi_dadd+0x424>
 8000b0c:	4667      	mov	r7, ip
 8000b0e:	2240      	movs	r2, #64	; 0x40
 8000b10:	1bd2      	subs	r2, r2, r7
 8000b12:	4647      	mov	r7, r8
 8000b14:	4097      	lsls	r7, r2
 8000b16:	4339      	orrs	r1, r7
 8000b18:	1e4a      	subs	r2, r1, #1
 8000b1a:	4191      	sbcs	r1, r2
 8000b1c:	4321      	orrs	r1, r4
 8000b1e:	e635      	b.n	800078c <__aeabi_dadd+0x98>
 8000b20:	4303      	orrs	r3, r0
 8000b22:	1e58      	subs	r0, r3, #1
 8000b24:	4183      	sbcs	r3, r0
 8000b26:	1acc      	subs	r4, r1, r3
 8000b28:	42a1      	cmp	r1, r4
 8000b2a:	41bf      	sbcs	r7, r7
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	427f      	negs	r7, r7
 8000b30:	4655      	mov	r5, sl
 8000b32:	464e      	mov	r6, r9
 8000b34:	1bdf      	subs	r7, r3, r7
 8000b36:	e62e      	b.n	8000796 <__aeabi_dadd+0xa2>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	d100      	bne.n	8000b40 <__aeabi_dadd+0x44c>
 8000b3e:	e0bd      	b.n	8000cbc <__aeabi_dadd+0x5c8>
 8000b40:	4662      	mov	r2, ip
 8000b42:	4664      	mov	r4, ip
 8000b44:	3a01      	subs	r2, #1
 8000b46:	2c01      	cmp	r4, #1
 8000b48:	d100      	bne.n	8000b4c <__aeabi_dadd+0x458>
 8000b4a:	e0e5      	b.n	8000d18 <__aeabi_dadd+0x624>
 8000b4c:	4c85      	ldr	r4, [pc, #532]	; (8000d64 <__aeabi_dadd+0x670>)
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	d058      	beq.n	8000c04 <__aeabi_dadd+0x510>
 8000b52:	4694      	mov	ip, r2
 8000b54:	e749      	b.n	80009ea <__aeabi_dadd+0x2f6>
 8000b56:	4664      	mov	r4, ip
 8000b58:	2220      	movs	r2, #32
 8000b5a:	1b12      	subs	r2, r2, r4
 8000b5c:	4644      	mov	r4, r8
 8000b5e:	4094      	lsls	r4, r2
 8000b60:	000f      	movs	r7, r1
 8000b62:	46a1      	mov	r9, r4
 8000b64:	4664      	mov	r4, ip
 8000b66:	4091      	lsls	r1, r2
 8000b68:	40e7      	lsrs	r7, r4
 8000b6a:	464c      	mov	r4, r9
 8000b6c:	1e4a      	subs	r2, r1, #1
 8000b6e:	4191      	sbcs	r1, r2
 8000b70:	433c      	orrs	r4, r7
 8000b72:	4642      	mov	r2, r8
 8000b74:	430c      	orrs	r4, r1
 8000b76:	4661      	mov	r1, ip
 8000b78:	40ca      	lsrs	r2, r1
 8000b7a:	1880      	adds	r0, r0, r2
 8000b7c:	e6f4      	b.n	8000968 <__aeabi_dadd+0x274>
 8000b7e:	4c79      	ldr	r4, [pc, #484]	; (8000d64 <__aeabi_dadd+0x670>)
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	d100      	bne.n	8000b86 <__aeabi_dadd+0x492>
 8000b84:	e6fd      	b.n	8000982 <__aeabi_dadd+0x28e>
 8000b86:	1859      	adds	r1, r3, r1
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	419b      	sbcs	r3, r3
 8000b8c:	4440      	add	r0, r8
 8000b8e:	425f      	negs	r7, r3
 8000b90:	19c7      	adds	r7, r0, r7
 8000b92:	07fc      	lsls	r4, r7, #31
 8000b94:	0849      	lsrs	r1, r1, #1
 8000b96:	0016      	movs	r6, r2
 8000b98:	430c      	orrs	r4, r1
 8000b9a:	087f      	lsrs	r7, r7, #1
 8000b9c:	e6cf      	b.n	800093e <__aeabi_dadd+0x24a>
 8000b9e:	1acc      	subs	r4, r1, r3
 8000ba0:	42a1      	cmp	r1, r4
 8000ba2:	41bf      	sbcs	r7, r7
 8000ba4:	4643      	mov	r3, r8
 8000ba6:	427f      	negs	r7, r7
 8000ba8:	1a18      	subs	r0, r3, r0
 8000baa:	4655      	mov	r5, sl
 8000bac:	1bc7      	subs	r7, r0, r7
 8000bae:	e5f7      	b.n	80007a0 <__aeabi_dadd+0xac>
 8000bb0:	08c9      	lsrs	r1, r1, #3
 8000bb2:	077b      	lsls	r3, r7, #29
 8000bb4:	4655      	mov	r5, sl
 8000bb6:	430b      	orrs	r3, r1
 8000bb8:	08f8      	lsrs	r0, r7, #3
 8000bba:	e6c8      	b.n	800094e <__aeabi_dadd+0x25a>
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_dadd+0x4ce>
 8000bc0:	e081      	b.n	8000cc6 <__aeabi_dadd+0x5d2>
 8000bc2:	4643      	mov	r3, r8
 8000bc4:	430b      	orrs	r3, r1
 8000bc6:	d115      	bne.n	8000bf4 <__aeabi_dadd+0x500>
 8000bc8:	2080      	movs	r0, #128	; 0x80
 8000bca:	2500      	movs	r5, #0
 8000bcc:	0300      	lsls	r0, r0, #12
 8000bce:	e6e3      	b.n	8000998 <__aeabi_dadd+0x2a4>
 8000bd0:	1a5c      	subs	r4, r3, r1
 8000bd2:	42a3      	cmp	r3, r4
 8000bd4:	419b      	sbcs	r3, r3
 8000bd6:	1bc7      	subs	r7, r0, r7
 8000bd8:	425b      	negs	r3, r3
 8000bda:	2601      	movs	r6, #1
 8000bdc:	1aff      	subs	r7, r7, r3
 8000bde:	e5da      	b.n	8000796 <__aeabi_dadd+0xa2>
 8000be0:	0742      	lsls	r2, r0, #29
 8000be2:	08db      	lsrs	r3, r3, #3
 8000be4:	4313      	orrs	r3, r2
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	e6d2      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000bea:	0742      	lsls	r2, r0, #29
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	08c0      	lsrs	r0, r0, #3
 8000bf2:	e6ac      	b.n	800094e <__aeabi_dadd+0x25a>
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	08c9      	lsrs	r1, r1, #3
 8000bfa:	075b      	lsls	r3, r3, #29
 8000bfc:	4655      	mov	r5, sl
 8000bfe:	430b      	orrs	r3, r1
 8000c00:	08d0      	lsrs	r0, r2, #3
 8000c02:	e6c5      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000c04:	4643      	mov	r3, r8
 8000c06:	4642      	mov	r2, r8
 8000c08:	075b      	lsls	r3, r3, #29
 8000c0a:	08c9      	lsrs	r1, r1, #3
 8000c0c:	430b      	orrs	r3, r1
 8000c0e:	08d0      	lsrs	r0, r2, #3
 8000c10:	e6be      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000c12:	4303      	orrs	r3, r0
 8000c14:	001c      	movs	r4, r3
 8000c16:	1e63      	subs	r3, r4, #1
 8000c18:	419c      	sbcs	r4, r3
 8000c1a:	e6fc      	b.n	8000a16 <__aeabi_dadd+0x322>
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	3c20      	subs	r4, #32
 8000c20:	40e2      	lsrs	r2, r4
 8000c22:	0014      	movs	r4, r2
 8000c24:	4662      	mov	r2, ip
 8000c26:	2a20      	cmp	r2, #32
 8000c28:	d003      	beq.n	8000c32 <__aeabi_dadd+0x53e>
 8000c2a:	2540      	movs	r5, #64	; 0x40
 8000c2c:	1aad      	subs	r5, r5, r2
 8000c2e:	40a8      	lsls	r0, r5
 8000c30:	4303      	orrs	r3, r0
 8000c32:	1e58      	subs	r0, r3, #1
 8000c34:	4183      	sbcs	r3, r0
 8000c36:	4323      	orrs	r3, r4
 8000c38:	e775      	b.n	8000b26 <__aeabi_dadd+0x432>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	d0e2      	beq.n	8000c04 <__aeabi_dadd+0x510>
 8000c3e:	003a      	movs	r2, r7
 8000c40:	430a      	orrs	r2, r1
 8000c42:	d0cd      	beq.n	8000be0 <__aeabi_dadd+0x4ec>
 8000c44:	0742      	lsls	r2, r0, #29
 8000c46:	08db      	lsrs	r3, r3, #3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	08c0      	lsrs	r0, r0, #3
 8000c4e:	0312      	lsls	r2, r2, #12
 8000c50:	4210      	tst	r0, r2
 8000c52:	d006      	beq.n	8000c62 <__aeabi_dadd+0x56e>
 8000c54:	08fc      	lsrs	r4, r7, #3
 8000c56:	4214      	tst	r4, r2
 8000c58:	d103      	bne.n	8000c62 <__aeabi_dadd+0x56e>
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	08cb      	lsrs	r3, r1, #3
 8000c5e:	077a      	lsls	r2, r7, #29
 8000c60:	4313      	orrs	r3, r2
 8000c62:	0f5a      	lsrs	r2, r3, #29
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	0752      	lsls	r2, r2, #29
 8000c68:	08db      	lsrs	r3, r3, #3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	e690      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	430b      	orrs	r3, r1
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dadd+0x582>
 8000c74:	e709      	b.n	8000a8a <__aeabi_dadd+0x396>
 8000c76:	4643      	mov	r3, r8
 8000c78:	4642      	mov	r2, r8
 8000c7a:	08c9      	lsrs	r1, r1, #3
 8000c7c:	075b      	lsls	r3, r3, #29
 8000c7e:	4655      	mov	r5, sl
 8000c80:	430b      	orrs	r3, r1
 8000c82:	08d0      	lsrs	r0, r2, #3
 8000c84:	e666      	b.n	8000954 <__aeabi_dadd+0x260>
 8000c86:	1acc      	subs	r4, r1, r3
 8000c88:	42a1      	cmp	r1, r4
 8000c8a:	4189      	sbcs	r1, r1
 8000c8c:	1a3f      	subs	r7, r7, r0
 8000c8e:	4249      	negs	r1, r1
 8000c90:	4655      	mov	r5, sl
 8000c92:	2601      	movs	r6, #1
 8000c94:	1a7f      	subs	r7, r7, r1
 8000c96:	e57e      	b.n	8000796 <__aeabi_dadd+0xa2>
 8000c98:	4642      	mov	r2, r8
 8000c9a:	1a5c      	subs	r4, r3, r1
 8000c9c:	1a87      	subs	r7, r0, r2
 8000c9e:	42a3      	cmp	r3, r4
 8000ca0:	4192      	sbcs	r2, r2
 8000ca2:	4252      	negs	r2, r2
 8000ca4:	1abf      	subs	r7, r7, r2
 8000ca6:	023a      	lsls	r2, r7, #8
 8000ca8:	d53d      	bpl.n	8000d26 <__aeabi_dadd+0x632>
 8000caa:	1acc      	subs	r4, r1, r3
 8000cac:	42a1      	cmp	r1, r4
 8000cae:	4189      	sbcs	r1, r1
 8000cb0:	4643      	mov	r3, r8
 8000cb2:	4249      	negs	r1, r1
 8000cb4:	1a1f      	subs	r7, r3, r0
 8000cb6:	4655      	mov	r5, sl
 8000cb8:	1a7f      	subs	r7, r7, r1
 8000cba:	e595      	b.n	80007e8 <__aeabi_dadd+0xf4>
 8000cbc:	077b      	lsls	r3, r7, #29
 8000cbe:	08c9      	lsrs	r1, r1, #3
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	08f8      	lsrs	r0, r7, #3
 8000cc4:	e643      	b.n	800094e <__aeabi_dadd+0x25a>
 8000cc6:	4644      	mov	r4, r8
 8000cc8:	08db      	lsrs	r3, r3, #3
 8000cca:	430c      	orrs	r4, r1
 8000ccc:	d130      	bne.n	8000d30 <__aeabi_dadd+0x63c>
 8000cce:	0742      	lsls	r2, r0, #29
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	08c0      	lsrs	r0, r0, #3
 8000cd4:	e65c      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000cd6:	077b      	lsls	r3, r7, #29
 8000cd8:	08c9      	lsrs	r1, r1, #3
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	08f8      	lsrs	r0, r7, #3
 8000cde:	e639      	b.n	8000954 <__aeabi_dadd+0x260>
 8000ce0:	185c      	adds	r4, r3, r1
 8000ce2:	429c      	cmp	r4, r3
 8000ce4:	419b      	sbcs	r3, r3
 8000ce6:	4440      	add	r0, r8
 8000ce8:	425b      	negs	r3, r3
 8000cea:	18c7      	adds	r7, r0, r3
 8000cec:	023b      	lsls	r3, r7, #8
 8000cee:	d400      	bmi.n	8000cf2 <__aeabi_dadd+0x5fe>
 8000cf0:	e625      	b.n	800093e <__aeabi_dadd+0x24a>
 8000cf2:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <__aeabi_dadd+0x674>)
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	401f      	ands	r7, r3
 8000cf8:	e621      	b.n	800093e <__aeabi_dadd+0x24a>
 8000cfa:	0004      	movs	r4, r0
 8000cfc:	3a20      	subs	r2, #32
 8000cfe:	40d4      	lsrs	r4, r2
 8000d00:	4662      	mov	r2, ip
 8000d02:	2a20      	cmp	r2, #32
 8000d04:	d004      	beq.n	8000d10 <__aeabi_dadd+0x61c>
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	4666      	mov	r6, ip
 8000d0a:	1b92      	subs	r2, r2, r6
 8000d0c:	4090      	lsls	r0, r2
 8000d0e:	4303      	orrs	r3, r0
 8000d10:	1e5a      	subs	r2, r3, #1
 8000d12:	4193      	sbcs	r3, r2
 8000d14:	431c      	orrs	r4, r3
 8000d16:	e67e      	b.n	8000a16 <__aeabi_dadd+0x322>
 8000d18:	185c      	adds	r4, r3, r1
 8000d1a:	428c      	cmp	r4, r1
 8000d1c:	4189      	sbcs	r1, r1
 8000d1e:	4440      	add	r0, r8
 8000d20:	4249      	negs	r1, r1
 8000d22:	1847      	adds	r7, r0, r1
 8000d24:	e6dd      	b.n	8000ae2 <__aeabi_dadd+0x3ee>
 8000d26:	0023      	movs	r3, r4
 8000d28:	433b      	orrs	r3, r7
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_dadd+0x63a>
 8000d2c:	e6ad      	b.n	8000a8a <__aeabi_dadd+0x396>
 8000d2e:	e606      	b.n	800093e <__aeabi_dadd+0x24a>
 8000d30:	0744      	lsls	r4, r0, #29
 8000d32:	4323      	orrs	r3, r4
 8000d34:	2480      	movs	r4, #128	; 0x80
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	0324      	lsls	r4, r4, #12
 8000d3a:	4220      	tst	r0, r4
 8000d3c:	d008      	beq.n	8000d50 <__aeabi_dadd+0x65c>
 8000d3e:	4642      	mov	r2, r8
 8000d40:	08d6      	lsrs	r6, r2, #3
 8000d42:	4226      	tst	r6, r4
 8000d44:	d104      	bne.n	8000d50 <__aeabi_dadd+0x65c>
 8000d46:	4655      	mov	r5, sl
 8000d48:	0030      	movs	r0, r6
 8000d4a:	08cb      	lsrs	r3, r1, #3
 8000d4c:	0751      	lsls	r1, r2, #29
 8000d4e:	430b      	orrs	r3, r1
 8000d50:	0f5a      	lsrs	r2, r3, #29
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	0752      	lsls	r2, r2, #29
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	e619      	b.n	8000990 <__aeabi_dadd+0x29c>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4a01      	ldr	r2, [pc, #4]	; (8000d64 <__aeabi_dadd+0x670>)
 8000d60:	001f      	movs	r7, r3
 8000d62:	e55e      	b.n	8000822 <__aeabi_dadd+0x12e>
 8000d64:	000007ff 	.word	0x000007ff
 8000d68:	ff7fffff 	.word	0xff7fffff

08000d6c <__aeabi_ddiv>:
 8000d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6e:	4657      	mov	r7, sl
 8000d70:	464e      	mov	r6, r9
 8000d72:	4645      	mov	r5, r8
 8000d74:	46de      	mov	lr, fp
 8000d76:	b5e0      	push	{r5, r6, r7, lr}
 8000d78:	4681      	mov	r9, r0
 8000d7a:	0005      	movs	r5, r0
 8000d7c:	030c      	lsls	r4, r1, #12
 8000d7e:	0048      	lsls	r0, r1, #1
 8000d80:	4692      	mov	sl, r2
 8000d82:	001f      	movs	r7, r3
 8000d84:	b085      	sub	sp, #20
 8000d86:	0b24      	lsrs	r4, r4, #12
 8000d88:	0d40      	lsrs	r0, r0, #21
 8000d8a:	0fce      	lsrs	r6, r1, #31
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_ddiv+0x26>
 8000d90:	e156      	b.n	8001040 <__aeabi_ddiv+0x2d4>
 8000d92:	4bd4      	ldr	r3, [pc, #848]	; (80010e4 <__aeabi_ddiv+0x378>)
 8000d94:	4298      	cmp	r0, r3
 8000d96:	d100      	bne.n	8000d9a <__aeabi_ddiv+0x2e>
 8000d98:	e172      	b.n	8001080 <__aeabi_ddiv+0x314>
 8000d9a:	0f6b      	lsrs	r3, r5, #29
 8000d9c:	00e4      	lsls	r4, r4, #3
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	041b      	lsls	r3, r3, #16
 8000da4:	4323      	orrs	r3, r4
 8000da6:	4698      	mov	r8, r3
 8000da8:	4bcf      	ldr	r3, [pc, #828]	; (80010e8 <__aeabi_ddiv+0x37c>)
 8000daa:	00ed      	lsls	r5, r5, #3
 8000dac:	469b      	mov	fp, r3
 8000dae:	2300      	movs	r3, #0
 8000db0:	4699      	mov	r9, r3
 8000db2:	4483      	add	fp, r0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	033c      	lsls	r4, r7, #12
 8000db8:	007b      	lsls	r3, r7, #1
 8000dba:	4650      	mov	r0, sl
 8000dbc:	0b24      	lsrs	r4, r4, #12
 8000dbe:	0d5b      	lsrs	r3, r3, #21
 8000dc0:	0fff      	lsrs	r7, r7, #31
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_ddiv+0x5c>
 8000dc6:	e11f      	b.n	8001008 <__aeabi_ddiv+0x29c>
 8000dc8:	4ac6      	ldr	r2, [pc, #792]	; (80010e4 <__aeabi_ddiv+0x378>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_ddiv+0x64>
 8000dce:	e162      	b.n	8001096 <__aeabi_ddiv+0x32a>
 8000dd0:	49c5      	ldr	r1, [pc, #788]	; (80010e8 <__aeabi_ddiv+0x37c>)
 8000dd2:	0f42      	lsrs	r2, r0, #29
 8000dd4:	468c      	mov	ip, r1
 8000dd6:	00e4      	lsls	r4, r4, #3
 8000dd8:	4659      	mov	r1, fp
 8000dda:	4314      	orrs	r4, r2
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	4463      	add	r3, ip
 8000de0:	0412      	lsls	r2, r2, #16
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	4314      	orrs	r4, r2
 8000de6:	469b      	mov	fp, r3
 8000de8:	00c2      	lsls	r2, r0, #3
 8000dea:	2000      	movs	r0, #0
 8000dec:	0033      	movs	r3, r6
 8000dee:	407b      	eors	r3, r7
 8000df0:	469a      	mov	sl, r3
 8000df2:	464b      	mov	r3, r9
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d827      	bhi.n	8000e48 <__aeabi_ddiv+0xdc>
 8000df8:	49bc      	ldr	r1, [pc, #752]	; (80010ec <__aeabi_ddiv+0x380>)
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	58cb      	ldr	r3, [r1, r3]
 8000dfe:	469f      	mov	pc, r3
 8000e00:	46b2      	mov	sl, r6
 8000e02:	9b00      	ldr	r3, [sp, #0]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d016      	beq.n	8000e36 <__aeabi_ddiv+0xca>
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_ddiv+0xa2>
 8000e0c:	e28e      	b.n	800132c <__aeabi_ddiv+0x5c0>
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d000      	beq.n	8000e14 <__aeabi_ddiv+0xa8>
 8000e12:	e0d9      	b.n	8000fc8 <__aeabi_ddiv+0x25c>
 8000e14:	2300      	movs	r3, #0
 8000e16:	2400      	movs	r4, #0
 8000e18:	2500      	movs	r5, #0
 8000e1a:	4652      	mov	r2, sl
 8000e1c:	051b      	lsls	r3, r3, #20
 8000e1e:	4323      	orrs	r3, r4
 8000e20:	07d2      	lsls	r2, r2, #31
 8000e22:	4313      	orrs	r3, r2
 8000e24:	0028      	movs	r0, r5
 8000e26:	0019      	movs	r1, r3
 8000e28:	b005      	add	sp, #20
 8000e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2c:	46bb      	mov	fp, r7
 8000e2e:	46b2      	mov	sl, r6
 8000e30:	46a9      	mov	r9, r5
 8000e32:	46a0      	mov	r8, r4
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	2400      	movs	r4, #0
 8000e38:	2500      	movs	r5, #0
 8000e3a:	4baa      	ldr	r3, [pc, #680]	; (80010e4 <__aeabi_ddiv+0x378>)
 8000e3c:	e7ed      	b.n	8000e1a <__aeabi_ddiv+0xae>
 8000e3e:	46ba      	mov	sl, r7
 8000e40:	46a0      	mov	r8, r4
 8000e42:	0015      	movs	r5, r2
 8000e44:	9000      	str	r0, [sp, #0]
 8000e46:	e7dc      	b.n	8000e02 <__aeabi_ddiv+0x96>
 8000e48:	4544      	cmp	r4, r8
 8000e4a:	d200      	bcs.n	8000e4e <__aeabi_ddiv+0xe2>
 8000e4c:	e1c7      	b.n	80011de <__aeabi_ddiv+0x472>
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_ddiv+0xe6>
 8000e50:	e1c2      	b.n	80011d8 <__aeabi_ddiv+0x46c>
 8000e52:	2301      	movs	r3, #1
 8000e54:	425b      	negs	r3, r3
 8000e56:	469c      	mov	ip, r3
 8000e58:	002e      	movs	r6, r5
 8000e5a:	4640      	mov	r0, r8
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	44e3      	add	fp, ip
 8000e60:	0223      	lsls	r3, r4, #8
 8000e62:	0e14      	lsrs	r4, r2, #24
 8000e64:	431c      	orrs	r4, r3
 8000e66:	0c1b      	lsrs	r3, r3, #16
 8000e68:	4699      	mov	r9, r3
 8000e6a:	0423      	lsls	r3, r4, #16
 8000e6c:	0c1f      	lsrs	r7, r3, #16
 8000e6e:	0212      	lsls	r2, r2, #8
 8000e70:	4649      	mov	r1, r9
 8000e72:	9200      	str	r2, [sp, #0]
 8000e74:	9701      	str	r7, [sp, #4]
 8000e76:	f7ff f9d7 	bl	8000228 <__aeabi_uidivmod>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	437a      	muls	r2, r7
 8000e7e:	040b      	lsls	r3, r1, #16
 8000e80:	0c31      	lsrs	r1, r6, #16
 8000e82:	4680      	mov	r8, r0
 8000e84:	4319      	orrs	r1, r3
 8000e86:	428a      	cmp	r2, r1
 8000e88:	d907      	bls.n	8000e9a <__aeabi_ddiv+0x12e>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	425b      	negs	r3, r3
 8000e8e:	469c      	mov	ip, r3
 8000e90:	1909      	adds	r1, r1, r4
 8000e92:	44e0      	add	r8, ip
 8000e94:	428c      	cmp	r4, r1
 8000e96:	d800      	bhi.n	8000e9a <__aeabi_ddiv+0x12e>
 8000e98:	e207      	b.n	80012aa <__aeabi_ddiv+0x53e>
 8000e9a:	1a88      	subs	r0, r1, r2
 8000e9c:	4649      	mov	r1, r9
 8000e9e:	f7ff f9c3 	bl	8000228 <__aeabi_uidivmod>
 8000ea2:	0409      	lsls	r1, r1, #16
 8000ea4:	468c      	mov	ip, r1
 8000ea6:	0431      	lsls	r1, r6, #16
 8000ea8:	4666      	mov	r6, ip
 8000eaa:	9a01      	ldr	r2, [sp, #4]
 8000eac:	0c09      	lsrs	r1, r1, #16
 8000eae:	4342      	muls	r2, r0
 8000eb0:	0003      	movs	r3, r0
 8000eb2:	4331      	orrs	r1, r6
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	d904      	bls.n	8000ec2 <__aeabi_ddiv+0x156>
 8000eb8:	1909      	adds	r1, r1, r4
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	428c      	cmp	r4, r1
 8000ebe:	d800      	bhi.n	8000ec2 <__aeabi_ddiv+0x156>
 8000ec0:	e1ed      	b.n	800129e <__aeabi_ddiv+0x532>
 8000ec2:	1a88      	subs	r0, r1, r2
 8000ec4:	4642      	mov	r2, r8
 8000ec6:	0412      	lsls	r2, r2, #16
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	4690      	mov	r8, r2
 8000ecc:	4641      	mov	r1, r8
 8000ece:	9b00      	ldr	r3, [sp, #0]
 8000ed0:	040e      	lsls	r6, r1, #16
 8000ed2:	0c1b      	lsrs	r3, r3, #16
 8000ed4:	001f      	movs	r7, r3
 8000ed6:	9302      	str	r3, [sp, #8]
 8000ed8:	9b00      	ldr	r3, [sp, #0]
 8000eda:	0c36      	lsrs	r6, r6, #16
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	0c19      	lsrs	r1, r3, #16
 8000ee0:	000b      	movs	r3, r1
 8000ee2:	4373      	muls	r3, r6
 8000ee4:	0c12      	lsrs	r2, r2, #16
 8000ee6:	437e      	muls	r6, r7
 8000ee8:	9103      	str	r1, [sp, #12]
 8000eea:	4351      	muls	r1, r2
 8000eec:	437a      	muls	r2, r7
 8000eee:	0c1f      	lsrs	r7, r3, #16
 8000ef0:	46bc      	mov	ip, r7
 8000ef2:	1876      	adds	r6, r6, r1
 8000ef4:	4466      	add	r6, ip
 8000ef6:	42b1      	cmp	r1, r6
 8000ef8:	d903      	bls.n	8000f02 <__aeabi_ddiv+0x196>
 8000efa:	2180      	movs	r1, #128	; 0x80
 8000efc:	0249      	lsls	r1, r1, #9
 8000efe:	468c      	mov	ip, r1
 8000f00:	4462      	add	r2, ip
 8000f02:	0c31      	lsrs	r1, r6, #16
 8000f04:	188a      	adds	r2, r1, r2
 8000f06:	0431      	lsls	r1, r6, #16
 8000f08:	041e      	lsls	r6, r3, #16
 8000f0a:	0c36      	lsrs	r6, r6, #16
 8000f0c:	198e      	adds	r6, r1, r6
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	d302      	bcc.n	8000f18 <__aeabi_ddiv+0x1ac>
 8000f12:	d112      	bne.n	8000f3a <__aeabi_ddiv+0x1ce>
 8000f14:	42b5      	cmp	r5, r6
 8000f16:	d210      	bcs.n	8000f3a <__aeabi_ddiv+0x1ce>
 8000f18:	4643      	mov	r3, r8
 8000f1a:	1e59      	subs	r1, r3, #1
 8000f1c:	9b00      	ldr	r3, [sp, #0]
 8000f1e:	469c      	mov	ip, r3
 8000f20:	4465      	add	r5, ip
 8000f22:	001f      	movs	r7, r3
 8000f24:	429d      	cmp	r5, r3
 8000f26:	419b      	sbcs	r3, r3
 8000f28:	425b      	negs	r3, r3
 8000f2a:	191b      	adds	r3, r3, r4
 8000f2c:	18c0      	adds	r0, r0, r3
 8000f2e:	4284      	cmp	r4, r0
 8000f30:	d200      	bcs.n	8000f34 <__aeabi_ddiv+0x1c8>
 8000f32:	e1a0      	b.n	8001276 <__aeabi_ddiv+0x50a>
 8000f34:	d100      	bne.n	8000f38 <__aeabi_ddiv+0x1cc>
 8000f36:	e19b      	b.n	8001270 <__aeabi_ddiv+0x504>
 8000f38:	4688      	mov	r8, r1
 8000f3a:	1bae      	subs	r6, r5, r6
 8000f3c:	42b5      	cmp	r5, r6
 8000f3e:	41ad      	sbcs	r5, r5
 8000f40:	1a80      	subs	r0, r0, r2
 8000f42:	426d      	negs	r5, r5
 8000f44:	1b40      	subs	r0, r0, r5
 8000f46:	4284      	cmp	r4, r0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x1e0>
 8000f4a:	e1d5      	b.n	80012f8 <__aeabi_ddiv+0x58c>
 8000f4c:	4649      	mov	r1, r9
 8000f4e:	f7ff f96b 	bl	8000228 <__aeabi_uidivmod>
 8000f52:	9a01      	ldr	r2, [sp, #4]
 8000f54:	040b      	lsls	r3, r1, #16
 8000f56:	4342      	muls	r2, r0
 8000f58:	0c31      	lsrs	r1, r6, #16
 8000f5a:	0005      	movs	r5, r0
 8000f5c:	4319      	orrs	r1, r3
 8000f5e:	428a      	cmp	r2, r1
 8000f60:	d900      	bls.n	8000f64 <__aeabi_ddiv+0x1f8>
 8000f62:	e16c      	b.n	800123e <__aeabi_ddiv+0x4d2>
 8000f64:	1a88      	subs	r0, r1, r2
 8000f66:	4649      	mov	r1, r9
 8000f68:	f7ff f95e 	bl	8000228 <__aeabi_uidivmod>
 8000f6c:	9a01      	ldr	r2, [sp, #4]
 8000f6e:	0436      	lsls	r6, r6, #16
 8000f70:	4342      	muls	r2, r0
 8000f72:	0409      	lsls	r1, r1, #16
 8000f74:	0c36      	lsrs	r6, r6, #16
 8000f76:	0003      	movs	r3, r0
 8000f78:	430e      	orrs	r6, r1
 8000f7a:	42b2      	cmp	r2, r6
 8000f7c:	d900      	bls.n	8000f80 <__aeabi_ddiv+0x214>
 8000f7e:	e153      	b.n	8001228 <__aeabi_ddiv+0x4bc>
 8000f80:	9803      	ldr	r0, [sp, #12]
 8000f82:	1ab6      	subs	r6, r6, r2
 8000f84:	0002      	movs	r2, r0
 8000f86:	042d      	lsls	r5, r5, #16
 8000f88:	431d      	orrs	r5, r3
 8000f8a:	9f02      	ldr	r7, [sp, #8]
 8000f8c:	042b      	lsls	r3, r5, #16
 8000f8e:	0c1b      	lsrs	r3, r3, #16
 8000f90:	435a      	muls	r2, r3
 8000f92:	437b      	muls	r3, r7
 8000f94:	469c      	mov	ip, r3
 8000f96:	0c29      	lsrs	r1, r5, #16
 8000f98:	4348      	muls	r0, r1
 8000f9a:	0c13      	lsrs	r3, r2, #16
 8000f9c:	4484      	add	ip, r0
 8000f9e:	4463      	add	r3, ip
 8000fa0:	4379      	muls	r1, r7
 8000fa2:	4298      	cmp	r0, r3
 8000fa4:	d903      	bls.n	8000fae <__aeabi_ddiv+0x242>
 8000fa6:	2080      	movs	r0, #128	; 0x80
 8000fa8:	0240      	lsls	r0, r0, #9
 8000faa:	4684      	mov	ip, r0
 8000fac:	4461      	add	r1, ip
 8000fae:	0c18      	lsrs	r0, r3, #16
 8000fb0:	0412      	lsls	r2, r2, #16
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	0c12      	lsrs	r2, r2, #16
 8000fb6:	1841      	adds	r1, r0, r1
 8000fb8:	189b      	adds	r3, r3, r2
 8000fba:	428e      	cmp	r6, r1
 8000fbc:	d200      	bcs.n	8000fc0 <__aeabi_ddiv+0x254>
 8000fbe:	e0ff      	b.n	80011c0 <__aeabi_ddiv+0x454>
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_ddiv+0x258>
 8000fc2:	e0fa      	b.n	80011ba <__aeabi_ddiv+0x44e>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	431d      	orrs	r5, r3
 8000fc8:	4a49      	ldr	r2, [pc, #292]	; (80010f0 <__aeabi_ddiv+0x384>)
 8000fca:	445a      	add	r2, fp
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	dc00      	bgt.n	8000fd2 <__aeabi_ddiv+0x266>
 8000fd0:	e0aa      	b.n	8001128 <__aeabi_ddiv+0x3bc>
 8000fd2:	076b      	lsls	r3, r5, #29
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_ddiv+0x26c>
 8000fd6:	e13d      	b.n	8001254 <__aeabi_ddiv+0x4e8>
 8000fd8:	08ed      	lsrs	r5, r5, #3
 8000fda:	4643      	mov	r3, r8
 8000fdc:	01db      	lsls	r3, r3, #7
 8000fde:	d506      	bpl.n	8000fee <__aeabi_ddiv+0x282>
 8000fe0:	4642      	mov	r2, r8
 8000fe2:	4b44      	ldr	r3, [pc, #272]	; (80010f4 <__aeabi_ddiv+0x388>)
 8000fe4:	401a      	ands	r2, r3
 8000fe6:	4690      	mov	r8, r2
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	00d2      	lsls	r2, r2, #3
 8000fec:	445a      	add	r2, fp
 8000fee:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <__aeabi_ddiv+0x38c>)
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	dd00      	ble.n	8000ff6 <__aeabi_ddiv+0x28a>
 8000ff4:	e71f      	b.n	8000e36 <__aeabi_ddiv+0xca>
 8000ff6:	4643      	mov	r3, r8
 8000ff8:	075b      	lsls	r3, r3, #29
 8000ffa:	431d      	orrs	r5, r3
 8000ffc:	4643      	mov	r3, r8
 8000ffe:	0552      	lsls	r2, r2, #21
 8001000:	025c      	lsls	r4, r3, #9
 8001002:	0b24      	lsrs	r4, r4, #12
 8001004:	0d53      	lsrs	r3, r2, #21
 8001006:	e708      	b.n	8000e1a <__aeabi_ddiv+0xae>
 8001008:	4652      	mov	r2, sl
 800100a:	4322      	orrs	r2, r4
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x2a4>
 800100e:	e07b      	b.n	8001108 <__aeabi_ddiv+0x39c>
 8001010:	2c00      	cmp	r4, #0
 8001012:	d100      	bne.n	8001016 <__aeabi_ddiv+0x2aa>
 8001014:	e0fa      	b.n	800120c <__aeabi_ddiv+0x4a0>
 8001016:	0020      	movs	r0, r4
 8001018:	f001 f90e 	bl	8002238 <__clzsi2>
 800101c:	0002      	movs	r2, r0
 800101e:	3a0b      	subs	r2, #11
 8001020:	231d      	movs	r3, #29
 8001022:	0001      	movs	r1, r0
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	4652      	mov	r2, sl
 8001028:	3908      	subs	r1, #8
 800102a:	40da      	lsrs	r2, r3
 800102c:	408c      	lsls	r4, r1
 800102e:	4314      	orrs	r4, r2
 8001030:	4652      	mov	r2, sl
 8001032:	408a      	lsls	r2, r1
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <__aeabi_ddiv+0x390>)
 8001036:	4458      	add	r0, fp
 8001038:	469b      	mov	fp, r3
 800103a:	4483      	add	fp, r0
 800103c:	2000      	movs	r0, #0
 800103e:	e6d5      	b.n	8000dec <__aeabi_ddiv+0x80>
 8001040:	464b      	mov	r3, r9
 8001042:	4323      	orrs	r3, r4
 8001044:	4698      	mov	r8, r3
 8001046:	d044      	beq.n	80010d2 <__aeabi_ddiv+0x366>
 8001048:	2c00      	cmp	r4, #0
 800104a:	d100      	bne.n	800104e <__aeabi_ddiv+0x2e2>
 800104c:	e0ce      	b.n	80011ec <__aeabi_ddiv+0x480>
 800104e:	0020      	movs	r0, r4
 8001050:	f001 f8f2 	bl	8002238 <__clzsi2>
 8001054:	0001      	movs	r1, r0
 8001056:	0002      	movs	r2, r0
 8001058:	390b      	subs	r1, #11
 800105a:	231d      	movs	r3, #29
 800105c:	1a5b      	subs	r3, r3, r1
 800105e:	4649      	mov	r1, r9
 8001060:	0010      	movs	r0, r2
 8001062:	40d9      	lsrs	r1, r3
 8001064:	3808      	subs	r0, #8
 8001066:	4084      	lsls	r4, r0
 8001068:	000b      	movs	r3, r1
 800106a:	464d      	mov	r5, r9
 800106c:	4323      	orrs	r3, r4
 800106e:	4698      	mov	r8, r3
 8001070:	4085      	lsls	r5, r0
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <__aeabi_ddiv+0x394>)
 8001074:	1a83      	subs	r3, r0, r2
 8001076:	469b      	mov	fp, r3
 8001078:	2300      	movs	r3, #0
 800107a:	4699      	mov	r9, r3
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	e69a      	b.n	8000db6 <__aeabi_ddiv+0x4a>
 8001080:	464b      	mov	r3, r9
 8001082:	4323      	orrs	r3, r4
 8001084:	4698      	mov	r8, r3
 8001086:	d11d      	bne.n	80010c4 <__aeabi_ddiv+0x358>
 8001088:	2308      	movs	r3, #8
 800108a:	4699      	mov	r9, r3
 800108c:	3b06      	subs	r3, #6
 800108e:	2500      	movs	r5, #0
 8001090:	4683      	mov	fp, r0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	e68f      	b.n	8000db6 <__aeabi_ddiv+0x4a>
 8001096:	4652      	mov	r2, sl
 8001098:	4322      	orrs	r2, r4
 800109a:	d109      	bne.n	80010b0 <__aeabi_ddiv+0x344>
 800109c:	2302      	movs	r3, #2
 800109e:	4649      	mov	r1, r9
 80010a0:	4319      	orrs	r1, r3
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <__aeabi_ddiv+0x398>)
 80010a4:	4689      	mov	r9, r1
 80010a6:	469c      	mov	ip, r3
 80010a8:	2400      	movs	r4, #0
 80010aa:	2002      	movs	r0, #2
 80010ac:	44e3      	add	fp, ip
 80010ae:	e69d      	b.n	8000dec <__aeabi_ddiv+0x80>
 80010b0:	2303      	movs	r3, #3
 80010b2:	464a      	mov	r2, r9
 80010b4:	431a      	orrs	r2, r3
 80010b6:	4b13      	ldr	r3, [pc, #76]	; (8001104 <__aeabi_ddiv+0x398>)
 80010b8:	4691      	mov	r9, r2
 80010ba:	469c      	mov	ip, r3
 80010bc:	4652      	mov	r2, sl
 80010be:	2003      	movs	r0, #3
 80010c0:	44e3      	add	fp, ip
 80010c2:	e693      	b.n	8000dec <__aeabi_ddiv+0x80>
 80010c4:	230c      	movs	r3, #12
 80010c6:	4699      	mov	r9, r3
 80010c8:	3b09      	subs	r3, #9
 80010ca:	46a0      	mov	r8, r4
 80010cc:	4683      	mov	fp, r0
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	e671      	b.n	8000db6 <__aeabi_ddiv+0x4a>
 80010d2:	2304      	movs	r3, #4
 80010d4:	4699      	mov	r9, r3
 80010d6:	2300      	movs	r3, #0
 80010d8:	469b      	mov	fp, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	2500      	movs	r5, #0
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	e669      	b.n	8000db6 <__aeabi_ddiv+0x4a>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	000007ff 	.word	0x000007ff
 80010e8:	fffffc01 	.word	0xfffffc01
 80010ec:	0800b8d8 	.word	0x0800b8d8
 80010f0:	000003ff 	.word	0x000003ff
 80010f4:	feffffff 	.word	0xfeffffff
 80010f8:	000007fe 	.word	0x000007fe
 80010fc:	000003f3 	.word	0x000003f3
 8001100:	fffffc0d 	.word	0xfffffc0d
 8001104:	fffff801 	.word	0xfffff801
 8001108:	4649      	mov	r1, r9
 800110a:	2301      	movs	r3, #1
 800110c:	4319      	orrs	r1, r3
 800110e:	4689      	mov	r9, r1
 8001110:	2400      	movs	r4, #0
 8001112:	2001      	movs	r0, #1
 8001114:	e66a      	b.n	8000dec <__aeabi_ddiv+0x80>
 8001116:	2300      	movs	r3, #0
 8001118:	2480      	movs	r4, #128	; 0x80
 800111a:	469a      	mov	sl, r3
 800111c:	2500      	movs	r5, #0
 800111e:	4b8a      	ldr	r3, [pc, #552]	; (8001348 <__aeabi_ddiv+0x5dc>)
 8001120:	0324      	lsls	r4, r4, #12
 8001122:	e67a      	b.n	8000e1a <__aeabi_ddiv+0xae>
 8001124:	2501      	movs	r5, #1
 8001126:	426d      	negs	r5, r5
 8001128:	2301      	movs	r3, #1
 800112a:	1a9b      	subs	r3, r3, r2
 800112c:	2b38      	cmp	r3, #56	; 0x38
 800112e:	dd00      	ble.n	8001132 <__aeabi_ddiv+0x3c6>
 8001130:	e670      	b.n	8000e14 <__aeabi_ddiv+0xa8>
 8001132:	2b1f      	cmp	r3, #31
 8001134:	dc00      	bgt.n	8001138 <__aeabi_ddiv+0x3cc>
 8001136:	e0bf      	b.n	80012b8 <__aeabi_ddiv+0x54c>
 8001138:	211f      	movs	r1, #31
 800113a:	4249      	negs	r1, r1
 800113c:	1a8a      	subs	r2, r1, r2
 800113e:	4641      	mov	r1, r8
 8001140:	40d1      	lsrs	r1, r2
 8001142:	000a      	movs	r2, r1
 8001144:	2b20      	cmp	r3, #32
 8001146:	d004      	beq.n	8001152 <__aeabi_ddiv+0x3e6>
 8001148:	4641      	mov	r1, r8
 800114a:	4b80      	ldr	r3, [pc, #512]	; (800134c <__aeabi_ddiv+0x5e0>)
 800114c:	445b      	add	r3, fp
 800114e:	4099      	lsls	r1, r3
 8001150:	430d      	orrs	r5, r1
 8001152:	1e6b      	subs	r3, r5, #1
 8001154:	419d      	sbcs	r5, r3
 8001156:	2307      	movs	r3, #7
 8001158:	432a      	orrs	r2, r5
 800115a:	001d      	movs	r5, r3
 800115c:	2400      	movs	r4, #0
 800115e:	4015      	ands	r5, r2
 8001160:	4213      	tst	r3, r2
 8001162:	d100      	bne.n	8001166 <__aeabi_ddiv+0x3fa>
 8001164:	e0d4      	b.n	8001310 <__aeabi_ddiv+0x5a4>
 8001166:	210f      	movs	r1, #15
 8001168:	2300      	movs	r3, #0
 800116a:	4011      	ands	r1, r2
 800116c:	2904      	cmp	r1, #4
 800116e:	d100      	bne.n	8001172 <__aeabi_ddiv+0x406>
 8001170:	e0cb      	b.n	800130a <__aeabi_ddiv+0x59e>
 8001172:	1d11      	adds	r1, r2, #4
 8001174:	4291      	cmp	r1, r2
 8001176:	4192      	sbcs	r2, r2
 8001178:	4252      	negs	r2, r2
 800117a:	189b      	adds	r3, r3, r2
 800117c:	000a      	movs	r2, r1
 800117e:	0219      	lsls	r1, r3, #8
 8001180:	d400      	bmi.n	8001184 <__aeabi_ddiv+0x418>
 8001182:	e0c2      	b.n	800130a <__aeabi_ddiv+0x59e>
 8001184:	2301      	movs	r3, #1
 8001186:	2400      	movs	r4, #0
 8001188:	2500      	movs	r5, #0
 800118a:	e646      	b.n	8000e1a <__aeabi_ddiv+0xae>
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	4641      	mov	r1, r8
 8001190:	031b      	lsls	r3, r3, #12
 8001192:	4219      	tst	r1, r3
 8001194:	d008      	beq.n	80011a8 <__aeabi_ddiv+0x43c>
 8001196:	421c      	tst	r4, r3
 8001198:	d106      	bne.n	80011a8 <__aeabi_ddiv+0x43c>
 800119a:	431c      	orrs	r4, r3
 800119c:	0324      	lsls	r4, r4, #12
 800119e:	46ba      	mov	sl, r7
 80011a0:	0015      	movs	r5, r2
 80011a2:	4b69      	ldr	r3, [pc, #420]	; (8001348 <__aeabi_ddiv+0x5dc>)
 80011a4:	0b24      	lsrs	r4, r4, #12
 80011a6:	e638      	b.n	8000e1a <__aeabi_ddiv+0xae>
 80011a8:	2480      	movs	r4, #128	; 0x80
 80011aa:	4643      	mov	r3, r8
 80011ac:	0324      	lsls	r4, r4, #12
 80011ae:	431c      	orrs	r4, r3
 80011b0:	0324      	lsls	r4, r4, #12
 80011b2:	46b2      	mov	sl, r6
 80011b4:	4b64      	ldr	r3, [pc, #400]	; (8001348 <__aeabi_ddiv+0x5dc>)
 80011b6:	0b24      	lsrs	r4, r4, #12
 80011b8:	e62f      	b.n	8000e1a <__aeabi_ddiv+0xae>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_ddiv+0x454>
 80011be:	e703      	b.n	8000fc8 <__aeabi_ddiv+0x25c>
 80011c0:	19a6      	adds	r6, r4, r6
 80011c2:	1e68      	subs	r0, r5, #1
 80011c4:	42a6      	cmp	r6, r4
 80011c6:	d200      	bcs.n	80011ca <__aeabi_ddiv+0x45e>
 80011c8:	e08d      	b.n	80012e6 <__aeabi_ddiv+0x57a>
 80011ca:	428e      	cmp	r6, r1
 80011cc:	d200      	bcs.n	80011d0 <__aeabi_ddiv+0x464>
 80011ce:	e0a3      	b.n	8001318 <__aeabi_ddiv+0x5ac>
 80011d0:	d100      	bne.n	80011d4 <__aeabi_ddiv+0x468>
 80011d2:	e0b3      	b.n	800133c <__aeabi_ddiv+0x5d0>
 80011d4:	0005      	movs	r5, r0
 80011d6:	e6f5      	b.n	8000fc4 <__aeabi_ddiv+0x258>
 80011d8:	42aa      	cmp	r2, r5
 80011da:	d900      	bls.n	80011de <__aeabi_ddiv+0x472>
 80011dc:	e639      	b.n	8000e52 <__aeabi_ddiv+0xe6>
 80011de:	4643      	mov	r3, r8
 80011e0:	07de      	lsls	r6, r3, #31
 80011e2:	0858      	lsrs	r0, r3, #1
 80011e4:	086b      	lsrs	r3, r5, #1
 80011e6:	431e      	orrs	r6, r3
 80011e8:	07ed      	lsls	r5, r5, #31
 80011ea:	e639      	b.n	8000e60 <__aeabi_ddiv+0xf4>
 80011ec:	4648      	mov	r0, r9
 80011ee:	f001 f823 	bl	8002238 <__clzsi2>
 80011f2:	0001      	movs	r1, r0
 80011f4:	0002      	movs	r2, r0
 80011f6:	3115      	adds	r1, #21
 80011f8:	3220      	adds	r2, #32
 80011fa:	291c      	cmp	r1, #28
 80011fc:	dc00      	bgt.n	8001200 <__aeabi_ddiv+0x494>
 80011fe:	e72c      	b.n	800105a <__aeabi_ddiv+0x2ee>
 8001200:	464b      	mov	r3, r9
 8001202:	3808      	subs	r0, #8
 8001204:	4083      	lsls	r3, r0
 8001206:	2500      	movs	r5, #0
 8001208:	4698      	mov	r8, r3
 800120a:	e732      	b.n	8001072 <__aeabi_ddiv+0x306>
 800120c:	f001 f814 	bl	8002238 <__clzsi2>
 8001210:	0003      	movs	r3, r0
 8001212:	001a      	movs	r2, r3
 8001214:	3215      	adds	r2, #21
 8001216:	3020      	adds	r0, #32
 8001218:	2a1c      	cmp	r2, #28
 800121a:	dc00      	bgt.n	800121e <__aeabi_ddiv+0x4b2>
 800121c:	e700      	b.n	8001020 <__aeabi_ddiv+0x2b4>
 800121e:	4654      	mov	r4, sl
 8001220:	3b08      	subs	r3, #8
 8001222:	2200      	movs	r2, #0
 8001224:	409c      	lsls	r4, r3
 8001226:	e705      	b.n	8001034 <__aeabi_ddiv+0x2c8>
 8001228:	1936      	adds	r6, r6, r4
 800122a:	3b01      	subs	r3, #1
 800122c:	42b4      	cmp	r4, r6
 800122e:	d900      	bls.n	8001232 <__aeabi_ddiv+0x4c6>
 8001230:	e6a6      	b.n	8000f80 <__aeabi_ddiv+0x214>
 8001232:	42b2      	cmp	r2, r6
 8001234:	d800      	bhi.n	8001238 <__aeabi_ddiv+0x4cc>
 8001236:	e6a3      	b.n	8000f80 <__aeabi_ddiv+0x214>
 8001238:	1e83      	subs	r3, r0, #2
 800123a:	1936      	adds	r6, r6, r4
 800123c:	e6a0      	b.n	8000f80 <__aeabi_ddiv+0x214>
 800123e:	1909      	adds	r1, r1, r4
 8001240:	3d01      	subs	r5, #1
 8001242:	428c      	cmp	r4, r1
 8001244:	d900      	bls.n	8001248 <__aeabi_ddiv+0x4dc>
 8001246:	e68d      	b.n	8000f64 <__aeabi_ddiv+0x1f8>
 8001248:	428a      	cmp	r2, r1
 800124a:	d800      	bhi.n	800124e <__aeabi_ddiv+0x4e2>
 800124c:	e68a      	b.n	8000f64 <__aeabi_ddiv+0x1f8>
 800124e:	1e85      	subs	r5, r0, #2
 8001250:	1909      	adds	r1, r1, r4
 8001252:	e687      	b.n	8000f64 <__aeabi_ddiv+0x1f8>
 8001254:	230f      	movs	r3, #15
 8001256:	402b      	ands	r3, r5
 8001258:	2b04      	cmp	r3, #4
 800125a:	d100      	bne.n	800125e <__aeabi_ddiv+0x4f2>
 800125c:	e6bc      	b.n	8000fd8 <__aeabi_ddiv+0x26c>
 800125e:	2305      	movs	r3, #5
 8001260:	425b      	negs	r3, r3
 8001262:	42ab      	cmp	r3, r5
 8001264:	419b      	sbcs	r3, r3
 8001266:	3504      	adds	r5, #4
 8001268:	425b      	negs	r3, r3
 800126a:	08ed      	lsrs	r5, r5, #3
 800126c:	4498      	add	r8, r3
 800126e:	e6b4      	b.n	8000fda <__aeabi_ddiv+0x26e>
 8001270:	42af      	cmp	r7, r5
 8001272:	d900      	bls.n	8001276 <__aeabi_ddiv+0x50a>
 8001274:	e660      	b.n	8000f38 <__aeabi_ddiv+0x1cc>
 8001276:	4282      	cmp	r2, r0
 8001278:	d804      	bhi.n	8001284 <__aeabi_ddiv+0x518>
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x512>
 800127c:	e65c      	b.n	8000f38 <__aeabi_ddiv+0x1cc>
 800127e:	42ae      	cmp	r6, r5
 8001280:	d800      	bhi.n	8001284 <__aeabi_ddiv+0x518>
 8001282:	e659      	b.n	8000f38 <__aeabi_ddiv+0x1cc>
 8001284:	2302      	movs	r3, #2
 8001286:	425b      	negs	r3, r3
 8001288:	469c      	mov	ip, r3
 800128a:	9b00      	ldr	r3, [sp, #0]
 800128c:	44e0      	add	r8, ip
 800128e:	469c      	mov	ip, r3
 8001290:	4465      	add	r5, ip
 8001292:	429d      	cmp	r5, r3
 8001294:	419b      	sbcs	r3, r3
 8001296:	425b      	negs	r3, r3
 8001298:	191b      	adds	r3, r3, r4
 800129a:	18c0      	adds	r0, r0, r3
 800129c:	e64d      	b.n	8000f3a <__aeabi_ddiv+0x1ce>
 800129e:	428a      	cmp	r2, r1
 80012a0:	d800      	bhi.n	80012a4 <__aeabi_ddiv+0x538>
 80012a2:	e60e      	b.n	8000ec2 <__aeabi_ddiv+0x156>
 80012a4:	1e83      	subs	r3, r0, #2
 80012a6:	1909      	adds	r1, r1, r4
 80012a8:	e60b      	b.n	8000ec2 <__aeabi_ddiv+0x156>
 80012aa:	428a      	cmp	r2, r1
 80012ac:	d800      	bhi.n	80012b0 <__aeabi_ddiv+0x544>
 80012ae:	e5f4      	b.n	8000e9a <__aeabi_ddiv+0x12e>
 80012b0:	1e83      	subs	r3, r0, #2
 80012b2:	4698      	mov	r8, r3
 80012b4:	1909      	adds	r1, r1, r4
 80012b6:	e5f0      	b.n	8000e9a <__aeabi_ddiv+0x12e>
 80012b8:	4925      	ldr	r1, [pc, #148]	; (8001350 <__aeabi_ddiv+0x5e4>)
 80012ba:	0028      	movs	r0, r5
 80012bc:	4459      	add	r1, fp
 80012be:	408d      	lsls	r5, r1
 80012c0:	4642      	mov	r2, r8
 80012c2:	408a      	lsls	r2, r1
 80012c4:	1e69      	subs	r1, r5, #1
 80012c6:	418d      	sbcs	r5, r1
 80012c8:	4641      	mov	r1, r8
 80012ca:	40d8      	lsrs	r0, r3
 80012cc:	40d9      	lsrs	r1, r3
 80012ce:	4302      	orrs	r2, r0
 80012d0:	432a      	orrs	r2, r5
 80012d2:	000b      	movs	r3, r1
 80012d4:	0751      	lsls	r1, r2, #29
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x56e>
 80012d8:	e751      	b.n	800117e <__aeabi_ddiv+0x412>
 80012da:	210f      	movs	r1, #15
 80012dc:	4011      	ands	r1, r2
 80012de:	2904      	cmp	r1, #4
 80012e0:	d000      	beq.n	80012e4 <__aeabi_ddiv+0x578>
 80012e2:	e746      	b.n	8001172 <__aeabi_ddiv+0x406>
 80012e4:	e74b      	b.n	800117e <__aeabi_ddiv+0x412>
 80012e6:	0005      	movs	r5, r0
 80012e8:	428e      	cmp	r6, r1
 80012ea:	d000      	beq.n	80012ee <__aeabi_ddiv+0x582>
 80012ec:	e66a      	b.n	8000fc4 <__aeabi_ddiv+0x258>
 80012ee:	9a00      	ldr	r2, [sp, #0]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d000      	beq.n	80012f6 <__aeabi_ddiv+0x58a>
 80012f4:	e666      	b.n	8000fc4 <__aeabi_ddiv+0x258>
 80012f6:	e667      	b.n	8000fc8 <__aeabi_ddiv+0x25c>
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <__aeabi_ddiv+0x5e8>)
 80012fa:	445a      	add	r2, fp
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	dc00      	bgt.n	8001302 <__aeabi_ddiv+0x596>
 8001300:	e710      	b.n	8001124 <__aeabi_ddiv+0x3b8>
 8001302:	2301      	movs	r3, #1
 8001304:	2500      	movs	r5, #0
 8001306:	4498      	add	r8, r3
 8001308:	e667      	b.n	8000fda <__aeabi_ddiv+0x26e>
 800130a:	075d      	lsls	r5, r3, #29
 800130c:	025b      	lsls	r3, r3, #9
 800130e:	0b1c      	lsrs	r4, r3, #12
 8001310:	08d2      	lsrs	r2, r2, #3
 8001312:	2300      	movs	r3, #0
 8001314:	4315      	orrs	r5, r2
 8001316:	e580      	b.n	8000e1a <__aeabi_ddiv+0xae>
 8001318:	9800      	ldr	r0, [sp, #0]
 800131a:	3d02      	subs	r5, #2
 800131c:	0042      	lsls	r2, r0, #1
 800131e:	4282      	cmp	r2, r0
 8001320:	41bf      	sbcs	r7, r7
 8001322:	427f      	negs	r7, r7
 8001324:	193c      	adds	r4, r7, r4
 8001326:	1936      	adds	r6, r6, r4
 8001328:	9200      	str	r2, [sp, #0]
 800132a:	e7dd      	b.n	80012e8 <__aeabi_ddiv+0x57c>
 800132c:	2480      	movs	r4, #128	; 0x80
 800132e:	4643      	mov	r3, r8
 8001330:	0324      	lsls	r4, r4, #12
 8001332:	431c      	orrs	r4, r3
 8001334:	0324      	lsls	r4, r4, #12
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <__aeabi_ddiv+0x5dc>)
 8001338:	0b24      	lsrs	r4, r4, #12
 800133a:	e56e      	b.n	8000e1a <__aeabi_ddiv+0xae>
 800133c:	9a00      	ldr	r2, [sp, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d3ea      	bcc.n	8001318 <__aeabi_ddiv+0x5ac>
 8001342:	0005      	movs	r5, r0
 8001344:	e7d3      	b.n	80012ee <__aeabi_ddiv+0x582>
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	000007ff 	.word	0x000007ff
 800134c:	0000043e 	.word	0x0000043e
 8001350:	0000041e 	.word	0x0000041e
 8001354:	000003ff 	.word	0x000003ff

08001358 <__eqdf2>:
 8001358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135a:	464e      	mov	r6, r9
 800135c:	4645      	mov	r5, r8
 800135e:	46de      	mov	lr, fp
 8001360:	4657      	mov	r7, sl
 8001362:	4690      	mov	r8, r2
 8001364:	b5e0      	push	{r5, r6, r7, lr}
 8001366:	0017      	movs	r7, r2
 8001368:	031a      	lsls	r2, r3, #12
 800136a:	0b12      	lsrs	r2, r2, #12
 800136c:	0005      	movs	r5, r0
 800136e:	4684      	mov	ip, r0
 8001370:	4819      	ldr	r0, [pc, #100]	; (80013d8 <__eqdf2+0x80>)
 8001372:	030e      	lsls	r6, r1, #12
 8001374:	004c      	lsls	r4, r1, #1
 8001376:	4691      	mov	r9, r2
 8001378:	005a      	lsls	r2, r3, #1
 800137a:	0fdb      	lsrs	r3, r3, #31
 800137c:	469b      	mov	fp, r3
 800137e:	0b36      	lsrs	r6, r6, #12
 8001380:	0d64      	lsrs	r4, r4, #21
 8001382:	0fc9      	lsrs	r1, r1, #31
 8001384:	0d52      	lsrs	r2, r2, #21
 8001386:	4284      	cmp	r4, r0
 8001388:	d019      	beq.n	80013be <__eqdf2+0x66>
 800138a:	4282      	cmp	r2, r0
 800138c:	d010      	beq.n	80013b0 <__eqdf2+0x58>
 800138e:	2001      	movs	r0, #1
 8001390:	4294      	cmp	r4, r2
 8001392:	d10e      	bne.n	80013b2 <__eqdf2+0x5a>
 8001394:	454e      	cmp	r6, r9
 8001396:	d10c      	bne.n	80013b2 <__eqdf2+0x5a>
 8001398:	2001      	movs	r0, #1
 800139a:	45c4      	cmp	ip, r8
 800139c:	d109      	bne.n	80013b2 <__eqdf2+0x5a>
 800139e:	4559      	cmp	r1, fp
 80013a0:	d017      	beq.n	80013d2 <__eqdf2+0x7a>
 80013a2:	2c00      	cmp	r4, #0
 80013a4:	d105      	bne.n	80013b2 <__eqdf2+0x5a>
 80013a6:	0030      	movs	r0, r6
 80013a8:	4328      	orrs	r0, r5
 80013aa:	1e43      	subs	r3, r0, #1
 80013ac:	4198      	sbcs	r0, r3
 80013ae:	e000      	b.n	80013b2 <__eqdf2+0x5a>
 80013b0:	2001      	movs	r0, #1
 80013b2:	bcf0      	pop	{r4, r5, r6, r7}
 80013b4:	46bb      	mov	fp, r7
 80013b6:	46b2      	mov	sl, r6
 80013b8:	46a9      	mov	r9, r5
 80013ba:	46a0      	mov	r8, r4
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	0033      	movs	r3, r6
 80013c0:	2001      	movs	r0, #1
 80013c2:	432b      	orrs	r3, r5
 80013c4:	d1f5      	bne.n	80013b2 <__eqdf2+0x5a>
 80013c6:	42a2      	cmp	r2, r4
 80013c8:	d1f3      	bne.n	80013b2 <__eqdf2+0x5a>
 80013ca:	464b      	mov	r3, r9
 80013cc:	433b      	orrs	r3, r7
 80013ce:	d1f0      	bne.n	80013b2 <__eqdf2+0x5a>
 80013d0:	e7e2      	b.n	8001398 <__eqdf2+0x40>
 80013d2:	2000      	movs	r0, #0
 80013d4:	e7ed      	b.n	80013b2 <__eqdf2+0x5a>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	000007ff 	.word	0x000007ff

080013dc <__gedf2>:
 80013dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013de:	4647      	mov	r7, r8
 80013e0:	46ce      	mov	lr, r9
 80013e2:	0004      	movs	r4, r0
 80013e4:	0018      	movs	r0, r3
 80013e6:	0016      	movs	r6, r2
 80013e8:	031b      	lsls	r3, r3, #12
 80013ea:	0b1b      	lsrs	r3, r3, #12
 80013ec:	4d2d      	ldr	r5, [pc, #180]	; (80014a4 <__gedf2+0xc8>)
 80013ee:	004a      	lsls	r2, r1, #1
 80013f0:	4699      	mov	r9, r3
 80013f2:	b580      	push	{r7, lr}
 80013f4:	0043      	lsls	r3, r0, #1
 80013f6:	030f      	lsls	r7, r1, #12
 80013f8:	46a4      	mov	ip, r4
 80013fa:	46b0      	mov	r8, r6
 80013fc:	0b3f      	lsrs	r7, r7, #12
 80013fe:	0d52      	lsrs	r2, r2, #21
 8001400:	0fc9      	lsrs	r1, r1, #31
 8001402:	0d5b      	lsrs	r3, r3, #21
 8001404:	0fc0      	lsrs	r0, r0, #31
 8001406:	42aa      	cmp	r2, r5
 8001408:	d021      	beq.n	800144e <__gedf2+0x72>
 800140a:	42ab      	cmp	r3, r5
 800140c:	d013      	beq.n	8001436 <__gedf2+0x5a>
 800140e:	2a00      	cmp	r2, #0
 8001410:	d122      	bne.n	8001458 <__gedf2+0x7c>
 8001412:	433c      	orrs	r4, r7
 8001414:	2b00      	cmp	r3, #0
 8001416:	d102      	bne.n	800141e <__gedf2+0x42>
 8001418:	464d      	mov	r5, r9
 800141a:	432e      	orrs	r6, r5
 800141c:	d022      	beq.n	8001464 <__gedf2+0x88>
 800141e:	2c00      	cmp	r4, #0
 8001420:	d010      	beq.n	8001444 <__gedf2+0x68>
 8001422:	4281      	cmp	r1, r0
 8001424:	d022      	beq.n	800146c <__gedf2+0x90>
 8001426:	2002      	movs	r0, #2
 8001428:	3901      	subs	r1, #1
 800142a:	4008      	ands	r0, r1
 800142c:	3801      	subs	r0, #1
 800142e:	bcc0      	pop	{r6, r7}
 8001430:	46b9      	mov	r9, r7
 8001432:	46b0      	mov	r8, r6
 8001434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001436:	464d      	mov	r5, r9
 8001438:	432e      	orrs	r6, r5
 800143a:	d129      	bne.n	8001490 <__gedf2+0xb4>
 800143c:	2a00      	cmp	r2, #0
 800143e:	d1f0      	bne.n	8001422 <__gedf2+0x46>
 8001440:	433c      	orrs	r4, r7
 8001442:	d1ee      	bne.n	8001422 <__gedf2+0x46>
 8001444:	2800      	cmp	r0, #0
 8001446:	d1f2      	bne.n	800142e <__gedf2+0x52>
 8001448:	2001      	movs	r0, #1
 800144a:	4240      	negs	r0, r0
 800144c:	e7ef      	b.n	800142e <__gedf2+0x52>
 800144e:	003d      	movs	r5, r7
 8001450:	4325      	orrs	r5, r4
 8001452:	d11d      	bne.n	8001490 <__gedf2+0xb4>
 8001454:	4293      	cmp	r3, r2
 8001456:	d0ee      	beq.n	8001436 <__gedf2+0x5a>
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1e2      	bne.n	8001422 <__gedf2+0x46>
 800145c:	464c      	mov	r4, r9
 800145e:	4326      	orrs	r6, r4
 8001460:	d1df      	bne.n	8001422 <__gedf2+0x46>
 8001462:	e7e0      	b.n	8001426 <__gedf2+0x4a>
 8001464:	2000      	movs	r0, #0
 8001466:	2c00      	cmp	r4, #0
 8001468:	d0e1      	beq.n	800142e <__gedf2+0x52>
 800146a:	e7dc      	b.n	8001426 <__gedf2+0x4a>
 800146c:	429a      	cmp	r2, r3
 800146e:	dc0a      	bgt.n	8001486 <__gedf2+0xaa>
 8001470:	dbe8      	blt.n	8001444 <__gedf2+0x68>
 8001472:	454f      	cmp	r7, r9
 8001474:	d8d7      	bhi.n	8001426 <__gedf2+0x4a>
 8001476:	d00e      	beq.n	8001496 <__gedf2+0xba>
 8001478:	2000      	movs	r0, #0
 800147a:	454f      	cmp	r7, r9
 800147c:	d2d7      	bcs.n	800142e <__gedf2+0x52>
 800147e:	2900      	cmp	r1, #0
 8001480:	d0e2      	beq.n	8001448 <__gedf2+0x6c>
 8001482:	0008      	movs	r0, r1
 8001484:	e7d3      	b.n	800142e <__gedf2+0x52>
 8001486:	4243      	negs	r3, r0
 8001488:	4158      	adcs	r0, r3
 800148a:	0040      	lsls	r0, r0, #1
 800148c:	3801      	subs	r0, #1
 800148e:	e7ce      	b.n	800142e <__gedf2+0x52>
 8001490:	2002      	movs	r0, #2
 8001492:	4240      	negs	r0, r0
 8001494:	e7cb      	b.n	800142e <__gedf2+0x52>
 8001496:	45c4      	cmp	ip, r8
 8001498:	d8c5      	bhi.n	8001426 <__gedf2+0x4a>
 800149a:	2000      	movs	r0, #0
 800149c:	45c4      	cmp	ip, r8
 800149e:	d2c6      	bcs.n	800142e <__gedf2+0x52>
 80014a0:	e7ed      	b.n	800147e <__gedf2+0xa2>
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__ledf2>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4647      	mov	r7, r8
 80014ac:	46ce      	mov	lr, r9
 80014ae:	0004      	movs	r4, r0
 80014b0:	0018      	movs	r0, r3
 80014b2:	0016      	movs	r6, r2
 80014b4:	031b      	lsls	r3, r3, #12
 80014b6:	0b1b      	lsrs	r3, r3, #12
 80014b8:	4d2c      	ldr	r5, [pc, #176]	; (800156c <__ledf2+0xc4>)
 80014ba:	004a      	lsls	r2, r1, #1
 80014bc:	4699      	mov	r9, r3
 80014be:	b580      	push	{r7, lr}
 80014c0:	0043      	lsls	r3, r0, #1
 80014c2:	030f      	lsls	r7, r1, #12
 80014c4:	46a4      	mov	ip, r4
 80014c6:	46b0      	mov	r8, r6
 80014c8:	0b3f      	lsrs	r7, r7, #12
 80014ca:	0d52      	lsrs	r2, r2, #21
 80014cc:	0fc9      	lsrs	r1, r1, #31
 80014ce:	0d5b      	lsrs	r3, r3, #21
 80014d0:	0fc0      	lsrs	r0, r0, #31
 80014d2:	42aa      	cmp	r2, r5
 80014d4:	d00d      	beq.n	80014f2 <__ledf2+0x4a>
 80014d6:	42ab      	cmp	r3, r5
 80014d8:	d010      	beq.n	80014fc <__ledf2+0x54>
 80014da:	2a00      	cmp	r2, #0
 80014dc:	d127      	bne.n	800152e <__ledf2+0x86>
 80014de:	433c      	orrs	r4, r7
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <__ledf2+0x60>
 80014e4:	464d      	mov	r5, r9
 80014e6:	432e      	orrs	r6, r5
 80014e8:	d10e      	bne.n	8001508 <__ledf2+0x60>
 80014ea:	2000      	movs	r0, #0
 80014ec:	2c00      	cmp	r4, #0
 80014ee:	d015      	beq.n	800151c <__ledf2+0x74>
 80014f0:	e00e      	b.n	8001510 <__ledf2+0x68>
 80014f2:	003d      	movs	r5, r7
 80014f4:	4325      	orrs	r5, r4
 80014f6:	d110      	bne.n	800151a <__ledf2+0x72>
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d118      	bne.n	800152e <__ledf2+0x86>
 80014fc:	464d      	mov	r5, r9
 80014fe:	432e      	orrs	r6, r5
 8001500:	d10b      	bne.n	800151a <__ledf2+0x72>
 8001502:	2a00      	cmp	r2, #0
 8001504:	d102      	bne.n	800150c <__ledf2+0x64>
 8001506:	433c      	orrs	r4, r7
 8001508:	2c00      	cmp	r4, #0
 800150a:	d00b      	beq.n	8001524 <__ledf2+0x7c>
 800150c:	4281      	cmp	r1, r0
 800150e:	d014      	beq.n	800153a <__ledf2+0x92>
 8001510:	2002      	movs	r0, #2
 8001512:	3901      	subs	r1, #1
 8001514:	4008      	ands	r0, r1
 8001516:	3801      	subs	r0, #1
 8001518:	e000      	b.n	800151c <__ledf2+0x74>
 800151a:	2002      	movs	r0, #2
 800151c:	bcc0      	pop	{r6, r7}
 800151e:	46b9      	mov	r9, r7
 8001520:	46b0      	mov	r8, r6
 8001522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001524:	2800      	cmp	r0, #0
 8001526:	d1f9      	bne.n	800151c <__ledf2+0x74>
 8001528:	2001      	movs	r0, #1
 800152a:	4240      	negs	r0, r0
 800152c:	e7f6      	b.n	800151c <__ledf2+0x74>
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ec      	bne.n	800150c <__ledf2+0x64>
 8001532:	464c      	mov	r4, r9
 8001534:	4326      	orrs	r6, r4
 8001536:	d1e9      	bne.n	800150c <__ledf2+0x64>
 8001538:	e7ea      	b.n	8001510 <__ledf2+0x68>
 800153a:	429a      	cmp	r2, r3
 800153c:	dd04      	ble.n	8001548 <__ledf2+0xa0>
 800153e:	4243      	negs	r3, r0
 8001540:	4158      	adcs	r0, r3
 8001542:	0040      	lsls	r0, r0, #1
 8001544:	3801      	subs	r0, #1
 8001546:	e7e9      	b.n	800151c <__ledf2+0x74>
 8001548:	429a      	cmp	r2, r3
 800154a:	dbeb      	blt.n	8001524 <__ledf2+0x7c>
 800154c:	454f      	cmp	r7, r9
 800154e:	d8df      	bhi.n	8001510 <__ledf2+0x68>
 8001550:	d006      	beq.n	8001560 <__ledf2+0xb8>
 8001552:	2000      	movs	r0, #0
 8001554:	454f      	cmp	r7, r9
 8001556:	d2e1      	bcs.n	800151c <__ledf2+0x74>
 8001558:	2900      	cmp	r1, #0
 800155a:	d0e5      	beq.n	8001528 <__ledf2+0x80>
 800155c:	0008      	movs	r0, r1
 800155e:	e7dd      	b.n	800151c <__ledf2+0x74>
 8001560:	45c4      	cmp	ip, r8
 8001562:	d8d5      	bhi.n	8001510 <__ledf2+0x68>
 8001564:	2000      	movs	r0, #0
 8001566:	45c4      	cmp	ip, r8
 8001568:	d2d8      	bcs.n	800151c <__ledf2+0x74>
 800156a:	e7f5      	b.n	8001558 <__ledf2+0xb0>
 800156c:	000007ff 	.word	0x000007ff

08001570 <__aeabi_dmul>:
 8001570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001572:	4657      	mov	r7, sl
 8001574:	464e      	mov	r6, r9
 8001576:	4645      	mov	r5, r8
 8001578:	46de      	mov	lr, fp
 800157a:	b5e0      	push	{r5, r6, r7, lr}
 800157c:	4698      	mov	r8, r3
 800157e:	030c      	lsls	r4, r1, #12
 8001580:	004b      	lsls	r3, r1, #1
 8001582:	0006      	movs	r6, r0
 8001584:	4692      	mov	sl, r2
 8001586:	b087      	sub	sp, #28
 8001588:	0b24      	lsrs	r4, r4, #12
 800158a:	0d5b      	lsrs	r3, r3, #21
 800158c:	0fcf      	lsrs	r7, r1, #31
 800158e:	2b00      	cmp	r3, #0
 8001590:	d100      	bne.n	8001594 <__aeabi_dmul+0x24>
 8001592:	e15c      	b.n	800184e <__aeabi_dmul+0x2de>
 8001594:	4ad9      	ldr	r2, [pc, #868]	; (80018fc <__aeabi_dmul+0x38c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d100      	bne.n	800159c <__aeabi_dmul+0x2c>
 800159a:	e175      	b.n	8001888 <__aeabi_dmul+0x318>
 800159c:	0f42      	lsrs	r2, r0, #29
 800159e:	00e4      	lsls	r4, r4, #3
 80015a0:	4314      	orrs	r4, r2
 80015a2:	2280      	movs	r2, #128	; 0x80
 80015a4:	0412      	lsls	r2, r2, #16
 80015a6:	4314      	orrs	r4, r2
 80015a8:	4ad5      	ldr	r2, [pc, #852]	; (8001900 <__aeabi_dmul+0x390>)
 80015aa:	00c5      	lsls	r5, r0, #3
 80015ac:	4694      	mov	ip, r2
 80015ae:	4463      	add	r3, ip
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	4699      	mov	r9, r3
 80015b6:	469b      	mov	fp, r3
 80015b8:	4643      	mov	r3, r8
 80015ba:	4642      	mov	r2, r8
 80015bc:	031e      	lsls	r6, r3, #12
 80015be:	0fd2      	lsrs	r2, r2, #31
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4650      	mov	r0, sl
 80015c4:	4690      	mov	r8, r2
 80015c6:	0b36      	lsrs	r6, r6, #12
 80015c8:	0d5b      	lsrs	r3, r3, #21
 80015ca:	d100      	bne.n	80015ce <__aeabi_dmul+0x5e>
 80015cc:	e120      	b.n	8001810 <__aeabi_dmul+0x2a0>
 80015ce:	4acb      	ldr	r2, [pc, #812]	; (80018fc <__aeabi_dmul+0x38c>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dmul+0x66>
 80015d4:	e162      	b.n	800189c <__aeabi_dmul+0x32c>
 80015d6:	49ca      	ldr	r1, [pc, #808]	; (8001900 <__aeabi_dmul+0x390>)
 80015d8:	0f42      	lsrs	r2, r0, #29
 80015da:	468c      	mov	ip, r1
 80015dc:	9900      	ldr	r1, [sp, #0]
 80015de:	4463      	add	r3, ip
 80015e0:	00f6      	lsls	r6, r6, #3
 80015e2:	468c      	mov	ip, r1
 80015e4:	4316      	orrs	r6, r2
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	449c      	add	ip, r3
 80015ea:	0412      	lsls	r2, r2, #16
 80015ec:	4663      	mov	r3, ip
 80015ee:	4316      	orrs	r6, r2
 80015f0:	00c2      	lsls	r2, r0, #3
 80015f2:	2000      	movs	r0, #0
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	9900      	ldr	r1, [sp, #0]
 80015f8:	4643      	mov	r3, r8
 80015fa:	3101      	adds	r1, #1
 80015fc:	468c      	mov	ip, r1
 80015fe:	4649      	mov	r1, r9
 8001600:	407b      	eors	r3, r7
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	290f      	cmp	r1, #15
 8001606:	d826      	bhi.n	8001656 <__aeabi_dmul+0xe6>
 8001608:	4bbe      	ldr	r3, [pc, #760]	; (8001904 <__aeabi_dmul+0x394>)
 800160a:	0089      	lsls	r1, r1, #2
 800160c:	5859      	ldr	r1, [r3, r1]
 800160e:	468f      	mov	pc, r1
 8001610:	4643      	mov	r3, r8
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	0034      	movs	r4, r6
 8001616:	0015      	movs	r5, r2
 8001618:	4683      	mov	fp, r0
 800161a:	465b      	mov	r3, fp
 800161c:	2b02      	cmp	r3, #2
 800161e:	d016      	beq.n	800164e <__aeabi_dmul+0xde>
 8001620:	2b03      	cmp	r3, #3
 8001622:	d100      	bne.n	8001626 <__aeabi_dmul+0xb6>
 8001624:	e203      	b.n	8001a2e <__aeabi_dmul+0x4be>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d000      	beq.n	800162c <__aeabi_dmul+0xbc>
 800162a:	e0cd      	b.n	80017c8 <__aeabi_dmul+0x258>
 800162c:	2200      	movs	r2, #0
 800162e:	2400      	movs	r4, #0
 8001630:	2500      	movs	r5, #0
 8001632:	9b01      	ldr	r3, [sp, #4]
 8001634:	0512      	lsls	r2, r2, #20
 8001636:	4322      	orrs	r2, r4
 8001638:	07db      	lsls	r3, r3, #31
 800163a:	431a      	orrs	r2, r3
 800163c:	0028      	movs	r0, r5
 800163e:	0011      	movs	r1, r2
 8001640:	b007      	add	sp, #28
 8001642:	bcf0      	pop	{r4, r5, r6, r7}
 8001644:	46bb      	mov	fp, r7
 8001646:	46b2      	mov	sl, r6
 8001648:	46a9      	mov	r9, r5
 800164a:	46a0      	mov	r8, r4
 800164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800164e:	2400      	movs	r4, #0
 8001650:	2500      	movs	r5, #0
 8001652:	4aaa      	ldr	r2, [pc, #680]	; (80018fc <__aeabi_dmul+0x38c>)
 8001654:	e7ed      	b.n	8001632 <__aeabi_dmul+0xc2>
 8001656:	0c28      	lsrs	r0, r5, #16
 8001658:	042d      	lsls	r5, r5, #16
 800165a:	0c2d      	lsrs	r5, r5, #16
 800165c:	002b      	movs	r3, r5
 800165e:	0c11      	lsrs	r1, r2, #16
 8001660:	0412      	lsls	r2, r2, #16
 8001662:	0c12      	lsrs	r2, r2, #16
 8001664:	4353      	muls	r3, r2
 8001666:	4698      	mov	r8, r3
 8001668:	0013      	movs	r3, r2
 800166a:	002f      	movs	r7, r5
 800166c:	4343      	muls	r3, r0
 800166e:	4699      	mov	r9, r3
 8001670:	434f      	muls	r7, r1
 8001672:	444f      	add	r7, r9
 8001674:	46bb      	mov	fp, r7
 8001676:	4647      	mov	r7, r8
 8001678:	000b      	movs	r3, r1
 800167a:	0c3f      	lsrs	r7, r7, #16
 800167c:	46ba      	mov	sl, r7
 800167e:	4343      	muls	r3, r0
 8001680:	44da      	add	sl, fp
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	45d1      	cmp	r9, sl
 8001686:	d904      	bls.n	8001692 <__aeabi_dmul+0x122>
 8001688:	2780      	movs	r7, #128	; 0x80
 800168a:	027f      	lsls	r7, r7, #9
 800168c:	46b9      	mov	r9, r7
 800168e:	444b      	add	r3, r9
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	4653      	mov	r3, sl
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	469b      	mov	fp, r3
 8001698:	4653      	mov	r3, sl
 800169a:	041f      	lsls	r7, r3, #16
 800169c:	4643      	mov	r3, r8
 800169e:	041b      	lsls	r3, r3, #16
 80016a0:	0c1b      	lsrs	r3, r3, #16
 80016a2:	4698      	mov	r8, r3
 80016a4:	003b      	movs	r3, r7
 80016a6:	4443      	add	r3, r8
 80016a8:	9304      	str	r3, [sp, #16]
 80016aa:	0c33      	lsrs	r3, r6, #16
 80016ac:	0436      	lsls	r6, r6, #16
 80016ae:	0c36      	lsrs	r6, r6, #16
 80016b0:	4698      	mov	r8, r3
 80016b2:	0033      	movs	r3, r6
 80016b4:	4343      	muls	r3, r0
 80016b6:	4699      	mov	r9, r3
 80016b8:	4643      	mov	r3, r8
 80016ba:	4343      	muls	r3, r0
 80016bc:	002f      	movs	r7, r5
 80016be:	469a      	mov	sl, r3
 80016c0:	4643      	mov	r3, r8
 80016c2:	4377      	muls	r7, r6
 80016c4:	435d      	muls	r5, r3
 80016c6:	0c38      	lsrs	r0, r7, #16
 80016c8:	444d      	add	r5, r9
 80016ca:	1945      	adds	r5, r0, r5
 80016cc:	45a9      	cmp	r9, r5
 80016ce:	d903      	bls.n	80016d8 <__aeabi_dmul+0x168>
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	4699      	mov	r9, r3
 80016d6:	44ca      	add	sl, r9
 80016d8:	043f      	lsls	r7, r7, #16
 80016da:	0c28      	lsrs	r0, r5, #16
 80016dc:	0c3f      	lsrs	r7, r7, #16
 80016de:	042d      	lsls	r5, r5, #16
 80016e0:	19ed      	adds	r5, r5, r7
 80016e2:	0c27      	lsrs	r7, r4, #16
 80016e4:	0424      	lsls	r4, r4, #16
 80016e6:	0c24      	lsrs	r4, r4, #16
 80016e8:	0003      	movs	r3, r0
 80016ea:	0020      	movs	r0, r4
 80016ec:	4350      	muls	r0, r2
 80016ee:	437a      	muls	r2, r7
 80016f0:	4691      	mov	r9, r2
 80016f2:	003a      	movs	r2, r7
 80016f4:	4453      	add	r3, sl
 80016f6:	9305      	str	r3, [sp, #20]
 80016f8:	0c03      	lsrs	r3, r0, #16
 80016fa:	469a      	mov	sl, r3
 80016fc:	434a      	muls	r2, r1
 80016fe:	4361      	muls	r1, r4
 8001700:	4449      	add	r1, r9
 8001702:	4451      	add	r1, sl
 8001704:	44ab      	add	fp, r5
 8001706:	4589      	cmp	r9, r1
 8001708:	d903      	bls.n	8001712 <__aeabi_dmul+0x1a2>
 800170a:	2380      	movs	r3, #128	; 0x80
 800170c:	025b      	lsls	r3, r3, #9
 800170e:	4699      	mov	r9, r3
 8001710:	444a      	add	r2, r9
 8001712:	0400      	lsls	r0, r0, #16
 8001714:	0c0b      	lsrs	r3, r1, #16
 8001716:	0c00      	lsrs	r0, r0, #16
 8001718:	0409      	lsls	r1, r1, #16
 800171a:	1809      	adds	r1, r1, r0
 800171c:	0020      	movs	r0, r4
 800171e:	4699      	mov	r9, r3
 8001720:	4643      	mov	r3, r8
 8001722:	4370      	muls	r0, r6
 8001724:	435c      	muls	r4, r3
 8001726:	437e      	muls	r6, r7
 8001728:	435f      	muls	r7, r3
 800172a:	0c03      	lsrs	r3, r0, #16
 800172c:	4698      	mov	r8, r3
 800172e:	19a4      	adds	r4, r4, r6
 8001730:	4444      	add	r4, r8
 8001732:	444a      	add	r2, r9
 8001734:	9703      	str	r7, [sp, #12]
 8001736:	42a6      	cmp	r6, r4
 8001738:	d904      	bls.n	8001744 <__aeabi_dmul+0x1d4>
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	025b      	lsls	r3, r3, #9
 800173e:	4698      	mov	r8, r3
 8001740:	4447      	add	r7, r8
 8001742:	9703      	str	r7, [sp, #12]
 8001744:	0423      	lsls	r3, r4, #16
 8001746:	9e02      	ldr	r6, [sp, #8]
 8001748:	469a      	mov	sl, r3
 800174a:	9b05      	ldr	r3, [sp, #20]
 800174c:	445e      	add	r6, fp
 800174e:	4698      	mov	r8, r3
 8001750:	42ae      	cmp	r6, r5
 8001752:	41ad      	sbcs	r5, r5
 8001754:	1876      	adds	r6, r6, r1
 8001756:	428e      	cmp	r6, r1
 8001758:	4189      	sbcs	r1, r1
 800175a:	0400      	lsls	r0, r0, #16
 800175c:	0c00      	lsrs	r0, r0, #16
 800175e:	4450      	add	r0, sl
 8001760:	4440      	add	r0, r8
 8001762:	426d      	negs	r5, r5
 8001764:	1947      	adds	r7, r0, r5
 8001766:	46b8      	mov	r8, r7
 8001768:	4693      	mov	fp, r2
 800176a:	4249      	negs	r1, r1
 800176c:	4689      	mov	r9, r1
 800176e:	44c3      	add	fp, r8
 8001770:	44d9      	add	r9, fp
 8001772:	4298      	cmp	r0, r3
 8001774:	4180      	sbcs	r0, r0
 8001776:	45a8      	cmp	r8, r5
 8001778:	41ad      	sbcs	r5, r5
 800177a:	4593      	cmp	fp, r2
 800177c:	4192      	sbcs	r2, r2
 800177e:	4589      	cmp	r9, r1
 8001780:	4189      	sbcs	r1, r1
 8001782:	426d      	negs	r5, r5
 8001784:	4240      	negs	r0, r0
 8001786:	4328      	orrs	r0, r5
 8001788:	0c24      	lsrs	r4, r4, #16
 800178a:	4252      	negs	r2, r2
 800178c:	4249      	negs	r1, r1
 800178e:	430a      	orrs	r2, r1
 8001790:	9b03      	ldr	r3, [sp, #12]
 8001792:	1900      	adds	r0, r0, r4
 8001794:	1880      	adds	r0, r0, r2
 8001796:	18c7      	adds	r7, r0, r3
 8001798:	464b      	mov	r3, r9
 800179a:	0ddc      	lsrs	r4, r3, #23
 800179c:	9b04      	ldr	r3, [sp, #16]
 800179e:	0275      	lsls	r5, r6, #9
 80017a0:	431d      	orrs	r5, r3
 80017a2:	1e6a      	subs	r2, r5, #1
 80017a4:	4195      	sbcs	r5, r2
 80017a6:	464b      	mov	r3, r9
 80017a8:	0df6      	lsrs	r6, r6, #23
 80017aa:	027f      	lsls	r7, r7, #9
 80017ac:	4335      	orrs	r5, r6
 80017ae:	025a      	lsls	r2, r3, #9
 80017b0:	433c      	orrs	r4, r7
 80017b2:	4315      	orrs	r5, r2
 80017b4:	01fb      	lsls	r3, r7, #7
 80017b6:	d400      	bmi.n	80017ba <__aeabi_dmul+0x24a>
 80017b8:	e11c      	b.n	80019f4 <__aeabi_dmul+0x484>
 80017ba:	2101      	movs	r1, #1
 80017bc:	086a      	lsrs	r2, r5, #1
 80017be:	400d      	ands	r5, r1
 80017c0:	4315      	orrs	r5, r2
 80017c2:	07e2      	lsls	r2, r4, #31
 80017c4:	4315      	orrs	r5, r2
 80017c6:	0864      	lsrs	r4, r4, #1
 80017c8:	494f      	ldr	r1, [pc, #316]	; (8001908 <__aeabi_dmul+0x398>)
 80017ca:	4461      	add	r1, ip
 80017cc:	2900      	cmp	r1, #0
 80017ce:	dc00      	bgt.n	80017d2 <__aeabi_dmul+0x262>
 80017d0:	e0b0      	b.n	8001934 <__aeabi_dmul+0x3c4>
 80017d2:	076b      	lsls	r3, r5, #29
 80017d4:	d009      	beq.n	80017ea <__aeabi_dmul+0x27a>
 80017d6:	220f      	movs	r2, #15
 80017d8:	402a      	ands	r2, r5
 80017da:	2a04      	cmp	r2, #4
 80017dc:	d005      	beq.n	80017ea <__aeabi_dmul+0x27a>
 80017de:	1d2a      	adds	r2, r5, #4
 80017e0:	42aa      	cmp	r2, r5
 80017e2:	41ad      	sbcs	r5, r5
 80017e4:	426d      	negs	r5, r5
 80017e6:	1964      	adds	r4, r4, r5
 80017e8:	0015      	movs	r5, r2
 80017ea:	01e3      	lsls	r3, r4, #7
 80017ec:	d504      	bpl.n	80017f8 <__aeabi_dmul+0x288>
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4a46      	ldr	r2, [pc, #280]	; (800190c <__aeabi_dmul+0x39c>)
 80017f2:	00c9      	lsls	r1, r1, #3
 80017f4:	4014      	ands	r4, r2
 80017f6:	4461      	add	r1, ip
 80017f8:	4a45      	ldr	r2, [pc, #276]	; (8001910 <__aeabi_dmul+0x3a0>)
 80017fa:	4291      	cmp	r1, r2
 80017fc:	dd00      	ble.n	8001800 <__aeabi_dmul+0x290>
 80017fe:	e726      	b.n	800164e <__aeabi_dmul+0xde>
 8001800:	0762      	lsls	r2, r4, #29
 8001802:	08ed      	lsrs	r5, r5, #3
 8001804:	0264      	lsls	r4, r4, #9
 8001806:	0549      	lsls	r1, r1, #21
 8001808:	4315      	orrs	r5, r2
 800180a:	0b24      	lsrs	r4, r4, #12
 800180c:	0d4a      	lsrs	r2, r1, #21
 800180e:	e710      	b.n	8001632 <__aeabi_dmul+0xc2>
 8001810:	4652      	mov	r2, sl
 8001812:	4332      	orrs	r2, r6
 8001814:	d100      	bne.n	8001818 <__aeabi_dmul+0x2a8>
 8001816:	e07f      	b.n	8001918 <__aeabi_dmul+0x3a8>
 8001818:	2e00      	cmp	r6, #0
 800181a:	d100      	bne.n	800181e <__aeabi_dmul+0x2ae>
 800181c:	e0dc      	b.n	80019d8 <__aeabi_dmul+0x468>
 800181e:	0030      	movs	r0, r6
 8001820:	f000 fd0a 	bl	8002238 <__clzsi2>
 8001824:	0002      	movs	r2, r0
 8001826:	3a0b      	subs	r2, #11
 8001828:	231d      	movs	r3, #29
 800182a:	0001      	movs	r1, r0
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	4652      	mov	r2, sl
 8001830:	3908      	subs	r1, #8
 8001832:	40da      	lsrs	r2, r3
 8001834:	408e      	lsls	r6, r1
 8001836:	4316      	orrs	r6, r2
 8001838:	4652      	mov	r2, sl
 800183a:	408a      	lsls	r2, r1
 800183c:	9b00      	ldr	r3, [sp, #0]
 800183e:	4935      	ldr	r1, [pc, #212]	; (8001914 <__aeabi_dmul+0x3a4>)
 8001840:	1a18      	subs	r0, r3, r0
 8001842:	0003      	movs	r3, r0
 8001844:	468c      	mov	ip, r1
 8001846:	4463      	add	r3, ip
 8001848:	2000      	movs	r0, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	e6d3      	b.n	80015f6 <__aeabi_dmul+0x86>
 800184e:	0025      	movs	r5, r4
 8001850:	4305      	orrs	r5, r0
 8001852:	d04a      	beq.n	80018ea <__aeabi_dmul+0x37a>
 8001854:	2c00      	cmp	r4, #0
 8001856:	d100      	bne.n	800185a <__aeabi_dmul+0x2ea>
 8001858:	e0b0      	b.n	80019bc <__aeabi_dmul+0x44c>
 800185a:	0020      	movs	r0, r4
 800185c:	f000 fcec 	bl	8002238 <__clzsi2>
 8001860:	0001      	movs	r1, r0
 8001862:	0002      	movs	r2, r0
 8001864:	390b      	subs	r1, #11
 8001866:	231d      	movs	r3, #29
 8001868:	0010      	movs	r0, r2
 800186a:	1a5b      	subs	r3, r3, r1
 800186c:	0031      	movs	r1, r6
 800186e:	0035      	movs	r5, r6
 8001870:	3808      	subs	r0, #8
 8001872:	4084      	lsls	r4, r0
 8001874:	40d9      	lsrs	r1, r3
 8001876:	4085      	lsls	r5, r0
 8001878:	430c      	orrs	r4, r1
 800187a:	4826      	ldr	r0, [pc, #152]	; (8001914 <__aeabi_dmul+0x3a4>)
 800187c:	1a83      	subs	r3, r0, r2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	4699      	mov	r9, r3
 8001884:	469b      	mov	fp, r3
 8001886:	e697      	b.n	80015b8 <__aeabi_dmul+0x48>
 8001888:	0005      	movs	r5, r0
 800188a:	4325      	orrs	r5, r4
 800188c:	d126      	bne.n	80018dc <__aeabi_dmul+0x36c>
 800188e:	2208      	movs	r2, #8
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2302      	movs	r3, #2
 8001894:	2400      	movs	r4, #0
 8001896:	4691      	mov	r9, r2
 8001898:	469b      	mov	fp, r3
 800189a:	e68d      	b.n	80015b8 <__aeabi_dmul+0x48>
 800189c:	4652      	mov	r2, sl
 800189e:	9b00      	ldr	r3, [sp, #0]
 80018a0:	4332      	orrs	r2, r6
 80018a2:	d110      	bne.n	80018c6 <__aeabi_dmul+0x356>
 80018a4:	4915      	ldr	r1, [pc, #84]	; (80018fc <__aeabi_dmul+0x38c>)
 80018a6:	2600      	movs	r6, #0
 80018a8:	468c      	mov	ip, r1
 80018aa:	4463      	add	r3, ip
 80018ac:	4649      	mov	r1, r9
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2302      	movs	r3, #2
 80018b2:	4319      	orrs	r1, r3
 80018b4:	4689      	mov	r9, r1
 80018b6:	2002      	movs	r0, #2
 80018b8:	e69d      	b.n	80015f6 <__aeabi_dmul+0x86>
 80018ba:	465b      	mov	r3, fp
 80018bc:	9701      	str	r7, [sp, #4]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d000      	beq.n	80018c4 <__aeabi_dmul+0x354>
 80018c2:	e6ad      	b.n	8001620 <__aeabi_dmul+0xb0>
 80018c4:	e6c3      	b.n	800164e <__aeabi_dmul+0xde>
 80018c6:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <__aeabi_dmul+0x38c>)
 80018c8:	2003      	movs	r0, #3
 80018ca:	4694      	mov	ip, r2
 80018cc:	4463      	add	r3, ip
 80018ce:	464a      	mov	r2, r9
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2303      	movs	r3, #3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	4691      	mov	r9, r2
 80018d8:	4652      	mov	r2, sl
 80018da:	e68c      	b.n	80015f6 <__aeabi_dmul+0x86>
 80018dc:	220c      	movs	r2, #12
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2303      	movs	r3, #3
 80018e2:	0005      	movs	r5, r0
 80018e4:	4691      	mov	r9, r2
 80018e6:	469b      	mov	fp, r3
 80018e8:	e666      	b.n	80015b8 <__aeabi_dmul+0x48>
 80018ea:	2304      	movs	r3, #4
 80018ec:	4699      	mov	r9, r3
 80018ee:	2300      	movs	r3, #0
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	3301      	adds	r3, #1
 80018f4:	2400      	movs	r4, #0
 80018f6:	469b      	mov	fp, r3
 80018f8:	e65e      	b.n	80015b8 <__aeabi_dmul+0x48>
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	000007ff 	.word	0x000007ff
 8001900:	fffffc01 	.word	0xfffffc01
 8001904:	0800b918 	.word	0x0800b918
 8001908:	000003ff 	.word	0x000003ff
 800190c:	feffffff 	.word	0xfeffffff
 8001910:	000007fe 	.word	0x000007fe
 8001914:	fffffc0d 	.word	0xfffffc0d
 8001918:	4649      	mov	r1, r9
 800191a:	2301      	movs	r3, #1
 800191c:	4319      	orrs	r1, r3
 800191e:	4689      	mov	r9, r1
 8001920:	2600      	movs	r6, #0
 8001922:	2001      	movs	r0, #1
 8001924:	e667      	b.n	80015f6 <__aeabi_dmul+0x86>
 8001926:	2300      	movs	r3, #0
 8001928:	2480      	movs	r4, #128	; 0x80
 800192a:	2500      	movs	r5, #0
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <__aeabi_dmul+0x4cc>)
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	0324      	lsls	r4, r4, #12
 8001932:	e67e      	b.n	8001632 <__aeabi_dmul+0xc2>
 8001934:	2001      	movs	r0, #1
 8001936:	1a40      	subs	r0, r0, r1
 8001938:	2838      	cmp	r0, #56	; 0x38
 800193a:	dd00      	ble.n	800193e <__aeabi_dmul+0x3ce>
 800193c:	e676      	b.n	800162c <__aeabi_dmul+0xbc>
 800193e:	281f      	cmp	r0, #31
 8001940:	dd5b      	ble.n	80019fa <__aeabi_dmul+0x48a>
 8001942:	221f      	movs	r2, #31
 8001944:	0023      	movs	r3, r4
 8001946:	4252      	negs	r2, r2
 8001948:	1a51      	subs	r1, r2, r1
 800194a:	40cb      	lsrs	r3, r1
 800194c:	0019      	movs	r1, r3
 800194e:	2820      	cmp	r0, #32
 8001950:	d003      	beq.n	800195a <__aeabi_dmul+0x3ea>
 8001952:	4a3b      	ldr	r2, [pc, #236]	; (8001a40 <__aeabi_dmul+0x4d0>)
 8001954:	4462      	add	r2, ip
 8001956:	4094      	lsls	r4, r2
 8001958:	4325      	orrs	r5, r4
 800195a:	1e6a      	subs	r2, r5, #1
 800195c:	4195      	sbcs	r5, r2
 800195e:	002a      	movs	r2, r5
 8001960:	430a      	orrs	r2, r1
 8001962:	2107      	movs	r1, #7
 8001964:	000d      	movs	r5, r1
 8001966:	2400      	movs	r4, #0
 8001968:	4015      	ands	r5, r2
 800196a:	4211      	tst	r1, r2
 800196c:	d05b      	beq.n	8001a26 <__aeabi_dmul+0x4b6>
 800196e:	210f      	movs	r1, #15
 8001970:	2400      	movs	r4, #0
 8001972:	4011      	ands	r1, r2
 8001974:	2904      	cmp	r1, #4
 8001976:	d053      	beq.n	8001a20 <__aeabi_dmul+0x4b0>
 8001978:	1d11      	adds	r1, r2, #4
 800197a:	4291      	cmp	r1, r2
 800197c:	4192      	sbcs	r2, r2
 800197e:	4252      	negs	r2, r2
 8001980:	18a4      	adds	r4, r4, r2
 8001982:	000a      	movs	r2, r1
 8001984:	0223      	lsls	r3, r4, #8
 8001986:	d54b      	bpl.n	8001a20 <__aeabi_dmul+0x4b0>
 8001988:	2201      	movs	r2, #1
 800198a:	2400      	movs	r4, #0
 800198c:	2500      	movs	r5, #0
 800198e:	e650      	b.n	8001632 <__aeabi_dmul+0xc2>
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	031b      	lsls	r3, r3, #12
 8001994:	421c      	tst	r4, r3
 8001996:	d009      	beq.n	80019ac <__aeabi_dmul+0x43c>
 8001998:	421e      	tst	r6, r3
 800199a:	d107      	bne.n	80019ac <__aeabi_dmul+0x43c>
 800199c:	4333      	orrs	r3, r6
 800199e:	031c      	lsls	r4, r3, #12
 80019a0:	4643      	mov	r3, r8
 80019a2:	0015      	movs	r5, r2
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <__aeabi_dmul+0x4cc>)
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	e642      	b.n	8001632 <__aeabi_dmul+0xc2>
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	0312      	lsls	r2, r2, #12
 80019b0:	4314      	orrs	r4, r2
 80019b2:	0324      	lsls	r4, r4, #12
 80019b4:	4a21      	ldr	r2, [pc, #132]	; (8001a3c <__aeabi_dmul+0x4cc>)
 80019b6:	0b24      	lsrs	r4, r4, #12
 80019b8:	9701      	str	r7, [sp, #4]
 80019ba:	e63a      	b.n	8001632 <__aeabi_dmul+0xc2>
 80019bc:	f000 fc3c 	bl	8002238 <__clzsi2>
 80019c0:	0001      	movs	r1, r0
 80019c2:	0002      	movs	r2, r0
 80019c4:	3115      	adds	r1, #21
 80019c6:	3220      	adds	r2, #32
 80019c8:	291c      	cmp	r1, #28
 80019ca:	dc00      	bgt.n	80019ce <__aeabi_dmul+0x45e>
 80019cc:	e74b      	b.n	8001866 <__aeabi_dmul+0x2f6>
 80019ce:	0034      	movs	r4, r6
 80019d0:	3808      	subs	r0, #8
 80019d2:	2500      	movs	r5, #0
 80019d4:	4084      	lsls	r4, r0
 80019d6:	e750      	b.n	800187a <__aeabi_dmul+0x30a>
 80019d8:	f000 fc2e 	bl	8002238 <__clzsi2>
 80019dc:	0003      	movs	r3, r0
 80019de:	001a      	movs	r2, r3
 80019e0:	3215      	adds	r2, #21
 80019e2:	3020      	adds	r0, #32
 80019e4:	2a1c      	cmp	r2, #28
 80019e6:	dc00      	bgt.n	80019ea <__aeabi_dmul+0x47a>
 80019e8:	e71e      	b.n	8001828 <__aeabi_dmul+0x2b8>
 80019ea:	4656      	mov	r6, sl
 80019ec:	3b08      	subs	r3, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	409e      	lsls	r6, r3
 80019f2:	e723      	b.n	800183c <__aeabi_dmul+0x2cc>
 80019f4:	9b00      	ldr	r3, [sp, #0]
 80019f6:	469c      	mov	ip, r3
 80019f8:	e6e6      	b.n	80017c8 <__aeabi_dmul+0x258>
 80019fa:	4912      	ldr	r1, [pc, #72]	; (8001a44 <__aeabi_dmul+0x4d4>)
 80019fc:	0022      	movs	r2, r4
 80019fe:	4461      	add	r1, ip
 8001a00:	002e      	movs	r6, r5
 8001a02:	408d      	lsls	r5, r1
 8001a04:	408a      	lsls	r2, r1
 8001a06:	40c6      	lsrs	r6, r0
 8001a08:	1e69      	subs	r1, r5, #1
 8001a0a:	418d      	sbcs	r5, r1
 8001a0c:	4332      	orrs	r2, r6
 8001a0e:	432a      	orrs	r2, r5
 8001a10:	40c4      	lsrs	r4, r0
 8001a12:	0753      	lsls	r3, r2, #29
 8001a14:	d0b6      	beq.n	8001984 <__aeabi_dmul+0x414>
 8001a16:	210f      	movs	r1, #15
 8001a18:	4011      	ands	r1, r2
 8001a1a:	2904      	cmp	r1, #4
 8001a1c:	d1ac      	bne.n	8001978 <__aeabi_dmul+0x408>
 8001a1e:	e7b1      	b.n	8001984 <__aeabi_dmul+0x414>
 8001a20:	0765      	lsls	r5, r4, #29
 8001a22:	0264      	lsls	r4, r4, #9
 8001a24:	0b24      	lsrs	r4, r4, #12
 8001a26:	08d2      	lsrs	r2, r2, #3
 8001a28:	4315      	orrs	r5, r2
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	e601      	b.n	8001632 <__aeabi_dmul+0xc2>
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	0312      	lsls	r2, r2, #12
 8001a32:	4314      	orrs	r4, r2
 8001a34:	0324      	lsls	r4, r4, #12
 8001a36:	4a01      	ldr	r2, [pc, #4]	; (8001a3c <__aeabi_dmul+0x4cc>)
 8001a38:	0b24      	lsrs	r4, r4, #12
 8001a3a:	e5fa      	b.n	8001632 <__aeabi_dmul+0xc2>
 8001a3c:	000007ff 	.word	0x000007ff
 8001a40:	0000043e 	.word	0x0000043e
 8001a44:	0000041e 	.word	0x0000041e

08001a48 <__aeabi_dsub>:
 8001a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4a:	4657      	mov	r7, sl
 8001a4c:	464e      	mov	r6, r9
 8001a4e:	4645      	mov	r5, r8
 8001a50:	46de      	mov	lr, fp
 8001a52:	b5e0      	push	{r5, r6, r7, lr}
 8001a54:	001e      	movs	r6, r3
 8001a56:	0017      	movs	r7, r2
 8001a58:	004a      	lsls	r2, r1, #1
 8001a5a:	030b      	lsls	r3, r1, #12
 8001a5c:	0d52      	lsrs	r2, r2, #21
 8001a5e:	0a5b      	lsrs	r3, r3, #9
 8001a60:	4690      	mov	r8, r2
 8001a62:	0f42      	lsrs	r2, r0, #29
 8001a64:	431a      	orrs	r2, r3
 8001a66:	0fcd      	lsrs	r5, r1, #31
 8001a68:	4ccd      	ldr	r4, [pc, #820]	; (8001da0 <__aeabi_dsub+0x358>)
 8001a6a:	0331      	lsls	r1, r6, #12
 8001a6c:	00c3      	lsls	r3, r0, #3
 8001a6e:	4694      	mov	ip, r2
 8001a70:	0070      	lsls	r0, r6, #1
 8001a72:	0f7a      	lsrs	r2, r7, #29
 8001a74:	0a49      	lsrs	r1, r1, #9
 8001a76:	00ff      	lsls	r7, r7, #3
 8001a78:	469a      	mov	sl, r3
 8001a7a:	46b9      	mov	r9, r7
 8001a7c:	0d40      	lsrs	r0, r0, #21
 8001a7e:	0ff6      	lsrs	r6, r6, #31
 8001a80:	4311      	orrs	r1, r2
 8001a82:	42a0      	cmp	r0, r4
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x40>
 8001a86:	e0b1      	b.n	8001bec <__aeabi_dsub+0x1a4>
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4056      	eors	r6, r2
 8001a8c:	46b3      	mov	fp, r6
 8001a8e:	42b5      	cmp	r5, r6
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x4c>
 8001a92:	e088      	b.n	8001ba6 <__aeabi_dsub+0x15e>
 8001a94:	4642      	mov	r2, r8
 8001a96:	1a12      	subs	r2, r2, r0
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	dc00      	bgt.n	8001a9e <__aeabi_dsub+0x56>
 8001a9c:	e0ae      	b.n	8001bfc <__aeabi_dsub+0x1b4>
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d100      	bne.n	8001aa4 <__aeabi_dsub+0x5c>
 8001aa2:	e0c1      	b.n	8001c28 <__aeabi_dsub+0x1e0>
 8001aa4:	48be      	ldr	r0, [pc, #760]	; (8001da0 <__aeabi_dsub+0x358>)
 8001aa6:	4580      	cmp	r8, r0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x64>
 8001aaa:	e151      	b.n	8001d50 <__aeabi_dsub+0x308>
 8001aac:	2080      	movs	r0, #128	; 0x80
 8001aae:	0400      	lsls	r0, r0, #16
 8001ab0:	4301      	orrs	r1, r0
 8001ab2:	2a38      	cmp	r2, #56	; 0x38
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0x70>
 8001ab6:	e17b      	b.n	8001db0 <__aeabi_dsub+0x368>
 8001ab8:	2a1f      	cmp	r2, #31
 8001aba:	dd00      	ble.n	8001abe <__aeabi_dsub+0x76>
 8001abc:	e1ee      	b.n	8001e9c <__aeabi_dsub+0x454>
 8001abe:	2020      	movs	r0, #32
 8001ac0:	003e      	movs	r6, r7
 8001ac2:	1a80      	subs	r0, r0, r2
 8001ac4:	000c      	movs	r4, r1
 8001ac6:	40d6      	lsrs	r6, r2
 8001ac8:	40d1      	lsrs	r1, r2
 8001aca:	4087      	lsls	r7, r0
 8001acc:	4662      	mov	r2, ip
 8001ace:	4084      	lsls	r4, r0
 8001ad0:	1a52      	subs	r2, r2, r1
 8001ad2:	1e78      	subs	r0, r7, #1
 8001ad4:	4187      	sbcs	r7, r0
 8001ad6:	4694      	mov	ip, r2
 8001ad8:	4334      	orrs	r4, r6
 8001ada:	4327      	orrs	r7, r4
 8001adc:	1bdc      	subs	r4, r3, r7
 8001ade:	42a3      	cmp	r3, r4
 8001ae0:	419b      	sbcs	r3, r3
 8001ae2:	4662      	mov	r2, ip
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	4699      	mov	r9, r3
 8001aea:	464b      	mov	r3, r9
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	d400      	bmi.n	8001af2 <__aeabi_dsub+0xaa>
 8001af0:	e118      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 8001af2:	464b      	mov	r3, r9
 8001af4:	0258      	lsls	r0, r3, #9
 8001af6:	0a43      	lsrs	r3, r0, #9
 8001af8:	4699      	mov	r9, r3
 8001afa:	464b      	mov	r3, r9
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0xba>
 8001b00:	e137      	b.n	8001d72 <__aeabi_dsub+0x32a>
 8001b02:	4648      	mov	r0, r9
 8001b04:	f000 fb98 	bl	8002238 <__clzsi2>
 8001b08:	0001      	movs	r1, r0
 8001b0a:	3908      	subs	r1, #8
 8001b0c:	2320      	movs	r3, #32
 8001b0e:	0022      	movs	r2, r4
 8001b10:	4648      	mov	r0, r9
 8001b12:	1a5b      	subs	r3, r3, r1
 8001b14:	40da      	lsrs	r2, r3
 8001b16:	4088      	lsls	r0, r1
 8001b18:	408c      	lsls	r4, r1
 8001b1a:	4643      	mov	r3, r8
 8001b1c:	4310      	orrs	r0, r2
 8001b1e:	4588      	cmp	r8, r1
 8001b20:	dd00      	ble.n	8001b24 <__aeabi_dsub+0xdc>
 8001b22:	e136      	b.n	8001d92 <__aeabi_dsub+0x34a>
 8001b24:	1ac9      	subs	r1, r1, r3
 8001b26:	1c4b      	adds	r3, r1, #1
 8001b28:	2b1f      	cmp	r3, #31
 8001b2a:	dd00      	ble.n	8001b2e <__aeabi_dsub+0xe6>
 8001b2c:	e0ea      	b.n	8001d04 <__aeabi_dsub+0x2bc>
 8001b2e:	2220      	movs	r2, #32
 8001b30:	0026      	movs	r6, r4
 8001b32:	1ad2      	subs	r2, r2, r3
 8001b34:	0001      	movs	r1, r0
 8001b36:	4094      	lsls	r4, r2
 8001b38:	40de      	lsrs	r6, r3
 8001b3a:	40d8      	lsrs	r0, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	4091      	lsls	r1, r2
 8001b40:	1e62      	subs	r2, r4, #1
 8001b42:	4194      	sbcs	r4, r2
 8001b44:	4681      	mov	r9, r0
 8001b46:	4698      	mov	r8, r3
 8001b48:	4331      	orrs	r1, r6
 8001b4a:	430c      	orrs	r4, r1
 8001b4c:	0763      	lsls	r3, r4, #29
 8001b4e:	d009      	beq.n	8001b64 <__aeabi_dsub+0x11c>
 8001b50:	230f      	movs	r3, #15
 8001b52:	4023      	ands	r3, r4
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d005      	beq.n	8001b64 <__aeabi_dsub+0x11c>
 8001b58:	1d23      	adds	r3, r4, #4
 8001b5a:	42a3      	cmp	r3, r4
 8001b5c:	41a4      	sbcs	r4, r4
 8001b5e:	4264      	negs	r4, r4
 8001b60:	44a1      	add	r9, r4
 8001b62:	001c      	movs	r4, r3
 8001b64:	464b      	mov	r3, r9
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	d400      	bmi.n	8001b6c <__aeabi_dsub+0x124>
 8001b6a:	e0de      	b.n	8001d2a <__aeabi_dsub+0x2e2>
 8001b6c:	4641      	mov	r1, r8
 8001b6e:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <__aeabi_dsub+0x358>)
 8001b70:	3101      	adds	r1, #1
 8001b72:	4299      	cmp	r1, r3
 8001b74:	d100      	bne.n	8001b78 <__aeabi_dsub+0x130>
 8001b76:	e0e7      	b.n	8001d48 <__aeabi_dsub+0x300>
 8001b78:	464b      	mov	r3, r9
 8001b7a:	488a      	ldr	r0, [pc, #552]	; (8001da4 <__aeabi_dsub+0x35c>)
 8001b7c:	08e4      	lsrs	r4, r4, #3
 8001b7e:	4003      	ands	r3, r0
 8001b80:	0018      	movs	r0, r3
 8001b82:	0549      	lsls	r1, r1, #21
 8001b84:	075b      	lsls	r3, r3, #29
 8001b86:	0240      	lsls	r0, r0, #9
 8001b88:	4323      	orrs	r3, r4
 8001b8a:	0d4a      	lsrs	r2, r1, #21
 8001b8c:	0b04      	lsrs	r4, r0, #12
 8001b8e:	0512      	lsls	r2, r2, #20
 8001b90:	07ed      	lsls	r5, r5, #31
 8001b92:	4322      	orrs	r2, r4
 8001b94:	432a      	orrs	r2, r5
 8001b96:	0018      	movs	r0, r3
 8001b98:	0011      	movs	r1, r2
 8001b9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9c:	46bb      	mov	fp, r7
 8001b9e:	46b2      	mov	sl, r6
 8001ba0:	46a9      	mov	r9, r5
 8001ba2:	46a0      	mov	r8, r4
 8001ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba6:	4642      	mov	r2, r8
 8001ba8:	1a12      	subs	r2, r2, r0
 8001baa:	2a00      	cmp	r2, #0
 8001bac:	dd52      	ble.n	8001c54 <__aeabi_dsub+0x20c>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d100      	bne.n	8001bb4 <__aeabi_dsub+0x16c>
 8001bb2:	e09c      	b.n	8001cee <__aeabi_dsub+0x2a6>
 8001bb4:	45a0      	cmp	r8, r4
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dsub+0x172>
 8001bb8:	e0ca      	b.n	8001d50 <__aeabi_dsub+0x308>
 8001bba:	2080      	movs	r0, #128	; 0x80
 8001bbc:	0400      	lsls	r0, r0, #16
 8001bbe:	4301      	orrs	r1, r0
 8001bc0:	2a38      	cmp	r2, #56	; 0x38
 8001bc2:	dd00      	ble.n	8001bc6 <__aeabi_dsub+0x17e>
 8001bc4:	e149      	b.n	8001e5a <__aeabi_dsub+0x412>
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dsub+0x184>
 8001bca:	e197      	b.n	8001efc <__aeabi_dsub+0x4b4>
 8001bcc:	0010      	movs	r0, r2
 8001bce:	000e      	movs	r6, r1
 8001bd0:	3820      	subs	r0, #32
 8001bd2:	40c6      	lsrs	r6, r0
 8001bd4:	2a20      	cmp	r2, #32
 8001bd6:	d004      	beq.n	8001be2 <__aeabi_dsub+0x19a>
 8001bd8:	2040      	movs	r0, #64	; 0x40
 8001bda:	1a82      	subs	r2, r0, r2
 8001bdc:	4091      	lsls	r1, r2
 8001bde:	430f      	orrs	r7, r1
 8001be0:	46b9      	mov	r9, r7
 8001be2:	464c      	mov	r4, r9
 8001be4:	1e62      	subs	r2, r4, #1
 8001be6:	4194      	sbcs	r4, r2
 8001be8:	4334      	orrs	r4, r6
 8001bea:	e13a      	b.n	8001e62 <__aeabi_dsub+0x41a>
 8001bec:	000a      	movs	r2, r1
 8001bee:	433a      	orrs	r2, r7
 8001bf0:	d028      	beq.n	8001c44 <__aeabi_dsub+0x1fc>
 8001bf2:	46b3      	mov	fp, r6
 8001bf4:	42b5      	cmp	r5, r6
 8001bf6:	d02b      	beq.n	8001c50 <__aeabi_dsub+0x208>
 8001bf8:	4a6b      	ldr	r2, [pc, #428]	; (8001da8 <__aeabi_dsub+0x360>)
 8001bfa:	4442      	add	r2, r8
 8001bfc:	2a00      	cmp	r2, #0
 8001bfe:	d05d      	beq.n	8001cbc <__aeabi_dsub+0x274>
 8001c00:	4642      	mov	r2, r8
 8001c02:	4644      	mov	r4, r8
 8001c04:	1a82      	subs	r2, r0, r2
 8001c06:	2c00      	cmp	r4, #0
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x1c4>
 8001c0a:	e0f5      	b.n	8001df8 <__aeabi_dsub+0x3b0>
 8001c0c:	4665      	mov	r5, ip
 8001c0e:	431d      	orrs	r5, r3
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dsub+0x1cc>
 8001c12:	e19c      	b.n	8001f4e <__aeabi_dsub+0x506>
 8001c14:	1e55      	subs	r5, r2, #1
 8001c16:	2a01      	cmp	r2, #1
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x1d4>
 8001c1a:	e1fb      	b.n	8002014 <__aeabi_dsub+0x5cc>
 8001c1c:	4c60      	ldr	r4, [pc, #384]	; (8001da0 <__aeabi_dsub+0x358>)
 8001c1e:	42a2      	cmp	r2, r4
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dsub+0x1dc>
 8001c22:	e1bd      	b.n	8001fa0 <__aeabi_dsub+0x558>
 8001c24:	002a      	movs	r2, r5
 8001c26:	e0f0      	b.n	8001e0a <__aeabi_dsub+0x3c2>
 8001c28:	0008      	movs	r0, r1
 8001c2a:	4338      	orrs	r0, r7
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x1e8>
 8001c2e:	e0c3      	b.n	8001db8 <__aeabi_dsub+0x370>
 8001c30:	1e50      	subs	r0, r2, #1
 8001c32:	2a01      	cmp	r2, #1
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x1f0>
 8001c36:	e1a8      	b.n	8001f8a <__aeabi_dsub+0x542>
 8001c38:	4c59      	ldr	r4, [pc, #356]	; (8001da0 <__aeabi_dsub+0x358>)
 8001c3a:	42a2      	cmp	r2, r4
 8001c3c:	d100      	bne.n	8001c40 <__aeabi_dsub+0x1f8>
 8001c3e:	e087      	b.n	8001d50 <__aeabi_dsub+0x308>
 8001c40:	0002      	movs	r2, r0
 8001c42:	e736      	b.n	8001ab2 <__aeabi_dsub+0x6a>
 8001c44:	2201      	movs	r2, #1
 8001c46:	4056      	eors	r6, r2
 8001c48:	46b3      	mov	fp, r6
 8001c4a:	42b5      	cmp	r5, r6
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x208>
 8001c4e:	e721      	b.n	8001a94 <__aeabi_dsub+0x4c>
 8001c50:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <__aeabi_dsub+0x360>)
 8001c52:	4442      	add	r2, r8
 8001c54:	2a00      	cmp	r2, #0
 8001c56:	d100      	bne.n	8001c5a <__aeabi_dsub+0x212>
 8001c58:	e0b5      	b.n	8001dc6 <__aeabi_dsub+0x37e>
 8001c5a:	4642      	mov	r2, r8
 8001c5c:	4644      	mov	r4, r8
 8001c5e:	1a82      	subs	r2, r0, r2
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x21e>
 8001c64:	e138      	b.n	8001ed8 <__aeabi_dsub+0x490>
 8001c66:	4e4e      	ldr	r6, [pc, #312]	; (8001da0 <__aeabi_dsub+0x358>)
 8001c68:	42b0      	cmp	r0, r6
 8001c6a:	d100      	bne.n	8001c6e <__aeabi_dsub+0x226>
 8001c6c:	e1de      	b.n	800202c <__aeabi_dsub+0x5e4>
 8001c6e:	2680      	movs	r6, #128	; 0x80
 8001c70:	4664      	mov	r4, ip
 8001c72:	0436      	lsls	r6, r6, #16
 8001c74:	4334      	orrs	r4, r6
 8001c76:	46a4      	mov	ip, r4
 8001c78:	2a38      	cmp	r2, #56	; 0x38
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dsub+0x236>
 8001c7c:	e196      	b.n	8001fac <__aeabi_dsub+0x564>
 8001c7e:	2a1f      	cmp	r2, #31
 8001c80:	dd00      	ble.n	8001c84 <__aeabi_dsub+0x23c>
 8001c82:	e224      	b.n	80020ce <__aeabi_dsub+0x686>
 8001c84:	2620      	movs	r6, #32
 8001c86:	1ab4      	subs	r4, r6, r2
 8001c88:	46a2      	mov	sl, r4
 8001c8a:	4664      	mov	r4, ip
 8001c8c:	4656      	mov	r6, sl
 8001c8e:	40b4      	lsls	r4, r6
 8001c90:	46a1      	mov	r9, r4
 8001c92:	001c      	movs	r4, r3
 8001c94:	464e      	mov	r6, r9
 8001c96:	40d4      	lsrs	r4, r2
 8001c98:	4326      	orrs	r6, r4
 8001c9a:	0034      	movs	r4, r6
 8001c9c:	4656      	mov	r6, sl
 8001c9e:	40b3      	lsls	r3, r6
 8001ca0:	1e5e      	subs	r6, r3, #1
 8001ca2:	41b3      	sbcs	r3, r6
 8001ca4:	431c      	orrs	r4, r3
 8001ca6:	4663      	mov	r3, ip
 8001ca8:	40d3      	lsrs	r3, r2
 8001caa:	18c9      	adds	r1, r1, r3
 8001cac:	19e4      	adds	r4, r4, r7
 8001cae:	42bc      	cmp	r4, r7
 8001cb0:	41bf      	sbcs	r7, r7
 8001cb2:	427f      	negs	r7, r7
 8001cb4:	46b9      	mov	r9, r7
 8001cb6:	4680      	mov	r8, r0
 8001cb8:	4489      	add	r9, r1
 8001cba:	e0d8      	b.n	8001e6e <__aeabi_dsub+0x426>
 8001cbc:	4640      	mov	r0, r8
 8001cbe:	4c3b      	ldr	r4, [pc, #236]	; (8001dac <__aeabi_dsub+0x364>)
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	4220      	tst	r0, r4
 8001cc4:	d000      	beq.n	8001cc8 <__aeabi_dsub+0x280>
 8001cc6:	e0b4      	b.n	8001e32 <__aeabi_dsub+0x3ea>
 8001cc8:	4640      	mov	r0, r8
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d000      	beq.n	8001cd0 <__aeabi_dsub+0x288>
 8001cce:	e144      	b.n	8001f5a <__aeabi_dsub+0x512>
 8001cd0:	4660      	mov	r0, ip
 8001cd2:	4318      	orrs	r0, r3
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_dsub+0x290>
 8001cd6:	e190      	b.n	8001ffa <__aeabi_dsub+0x5b2>
 8001cd8:	0008      	movs	r0, r1
 8001cda:	4338      	orrs	r0, r7
 8001cdc:	d000      	beq.n	8001ce0 <__aeabi_dsub+0x298>
 8001cde:	e1aa      	b.n	8002036 <__aeabi_dsub+0x5ee>
 8001ce0:	4661      	mov	r1, ip
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	0749      	lsls	r1, r1, #29
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	4661      	mov	r1, ip
 8001cea:	08cc      	lsrs	r4, r1, #3
 8001cec:	e027      	b.n	8001d3e <__aeabi_dsub+0x2f6>
 8001cee:	0008      	movs	r0, r1
 8001cf0:	4338      	orrs	r0, r7
 8001cf2:	d061      	beq.n	8001db8 <__aeabi_dsub+0x370>
 8001cf4:	1e50      	subs	r0, r2, #1
 8001cf6:	2a01      	cmp	r2, #1
 8001cf8:	d100      	bne.n	8001cfc <__aeabi_dsub+0x2b4>
 8001cfa:	e139      	b.n	8001f70 <__aeabi_dsub+0x528>
 8001cfc:	42a2      	cmp	r2, r4
 8001cfe:	d027      	beq.n	8001d50 <__aeabi_dsub+0x308>
 8001d00:	0002      	movs	r2, r0
 8001d02:	e75d      	b.n	8001bc0 <__aeabi_dsub+0x178>
 8001d04:	0002      	movs	r2, r0
 8001d06:	391f      	subs	r1, #31
 8001d08:	40ca      	lsrs	r2, r1
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	2b20      	cmp	r3, #32
 8001d0e:	d003      	beq.n	8001d18 <__aeabi_dsub+0x2d0>
 8001d10:	2240      	movs	r2, #64	; 0x40
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4098      	lsls	r0, r3
 8001d16:	4304      	orrs	r4, r0
 8001d18:	1e63      	subs	r3, r4, #1
 8001d1a:	419c      	sbcs	r4, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	4699      	mov	r9, r3
 8001d20:	4698      	mov	r8, r3
 8001d22:	430c      	orrs	r4, r1
 8001d24:	0763      	lsls	r3, r4, #29
 8001d26:	d000      	beq.n	8001d2a <__aeabi_dsub+0x2e2>
 8001d28:	e712      	b.n	8001b50 <__aeabi_dsub+0x108>
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	08e4      	lsrs	r4, r4, #3
 8001d30:	075b      	lsls	r3, r3, #29
 8001d32:	4323      	orrs	r3, r4
 8001d34:	08d4      	lsrs	r4, r2, #3
 8001d36:	4642      	mov	r2, r8
 8001d38:	4919      	ldr	r1, [pc, #100]	; (8001da0 <__aeabi_dsub+0x358>)
 8001d3a:	428a      	cmp	r2, r1
 8001d3c:	d00e      	beq.n	8001d5c <__aeabi_dsub+0x314>
 8001d3e:	0324      	lsls	r4, r4, #12
 8001d40:	0552      	lsls	r2, r2, #21
 8001d42:	0b24      	lsrs	r4, r4, #12
 8001d44:	0d52      	lsrs	r2, r2, #21
 8001d46:	e722      	b.n	8001b8e <__aeabi_dsub+0x146>
 8001d48:	000a      	movs	r2, r1
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e71e      	b.n	8001b8e <__aeabi_dsub+0x146>
 8001d50:	08db      	lsrs	r3, r3, #3
 8001d52:	4662      	mov	r2, ip
 8001d54:	0752      	lsls	r2, r2, #29
 8001d56:	4313      	orrs	r3, r2
 8001d58:	4662      	mov	r2, ip
 8001d5a:	08d4      	lsrs	r4, r2, #3
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	d100      	bne.n	8001d64 <__aeabi_dsub+0x31c>
 8001d62:	e1fc      	b.n	800215e <__aeabi_dsub+0x716>
 8001d64:	2280      	movs	r2, #128	; 0x80
 8001d66:	0312      	lsls	r2, r2, #12
 8001d68:	4314      	orrs	r4, r2
 8001d6a:	0324      	lsls	r4, r4, #12
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <__aeabi_dsub+0x358>)
 8001d6e:	0b24      	lsrs	r4, r4, #12
 8001d70:	e70d      	b.n	8001b8e <__aeabi_dsub+0x146>
 8001d72:	0020      	movs	r0, r4
 8001d74:	f000 fa60 	bl	8002238 <__clzsi2>
 8001d78:	0001      	movs	r1, r0
 8001d7a:	3118      	adds	r1, #24
 8001d7c:	291f      	cmp	r1, #31
 8001d7e:	dc00      	bgt.n	8001d82 <__aeabi_dsub+0x33a>
 8001d80:	e6c4      	b.n	8001b0c <__aeabi_dsub+0xc4>
 8001d82:	3808      	subs	r0, #8
 8001d84:	4084      	lsls	r4, r0
 8001d86:	4643      	mov	r3, r8
 8001d88:	0020      	movs	r0, r4
 8001d8a:	2400      	movs	r4, #0
 8001d8c:	4588      	cmp	r8, r1
 8001d8e:	dc00      	bgt.n	8001d92 <__aeabi_dsub+0x34a>
 8001d90:	e6c8      	b.n	8001b24 <__aeabi_dsub+0xdc>
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <__aeabi_dsub+0x35c>)
 8001d94:	1a5b      	subs	r3, r3, r1
 8001d96:	4010      	ands	r0, r2
 8001d98:	4698      	mov	r8, r3
 8001d9a:	4681      	mov	r9, r0
 8001d9c:	e6d6      	b.n	8001b4c <__aeabi_dsub+0x104>
 8001d9e:	46c0      	nop			; (mov r8, r8)
 8001da0:	000007ff 	.word	0x000007ff
 8001da4:	ff7fffff 	.word	0xff7fffff
 8001da8:	fffff801 	.word	0xfffff801
 8001dac:	000007fe 	.word	0x000007fe
 8001db0:	430f      	orrs	r7, r1
 8001db2:	1e7a      	subs	r2, r7, #1
 8001db4:	4197      	sbcs	r7, r2
 8001db6:	e691      	b.n	8001adc <__aeabi_dsub+0x94>
 8001db8:	4661      	mov	r1, ip
 8001dba:	08db      	lsrs	r3, r3, #3
 8001dbc:	0749      	lsls	r1, r1, #29
 8001dbe:	430b      	orrs	r3, r1
 8001dc0:	4661      	mov	r1, ip
 8001dc2:	08cc      	lsrs	r4, r1, #3
 8001dc4:	e7b8      	b.n	8001d38 <__aeabi_dsub+0x2f0>
 8001dc6:	4640      	mov	r0, r8
 8001dc8:	4cd3      	ldr	r4, [pc, #844]	; (8002118 <__aeabi_dsub+0x6d0>)
 8001dca:	3001      	adds	r0, #1
 8001dcc:	4220      	tst	r0, r4
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x38a>
 8001dd0:	e0a2      	b.n	8001f18 <__aeabi_dsub+0x4d0>
 8001dd2:	4640      	mov	r0, r8
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d000      	beq.n	8001dda <__aeabi_dsub+0x392>
 8001dd8:	e101      	b.n	8001fde <__aeabi_dsub+0x596>
 8001dda:	4660      	mov	r0, ip
 8001ddc:	4318      	orrs	r0, r3
 8001dde:	d100      	bne.n	8001de2 <__aeabi_dsub+0x39a>
 8001de0:	e15e      	b.n	80020a0 <__aeabi_dsub+0x658>
 8001de2:	0008      	movs	r0, r1
 8001de4:	4338      	orrs	r0, r7
 8001de6:	d000      	beq.n	8001dea <__aeabi_dsub+0x3a2>
 8001de8:	e15f      	b.n	80020aa <__aeabi_dsub+0x662>
 8001dea:	4661      	mov	r1, ip
 8001dec:	08db      	lsrs	r3, r3, #3
 8001dee:	0749      	lsls	r1, r1, #29
 8001df0:	430b      	orrs	r3, r1
 8001df2:	4661      	mov	r1, ip
 8001df4:	08cc      	lsrs	r4, r1, #3
 8001df6:	e7a2      	b.n	8001d3e <__aeabi_dsub+0x2f6>
 8001df8:	4dc8      	ldr	r5, [pc, #800]	; (800211c <__aeabi_dsub+0x6d4>)
 8001dfa:	42a8      	cmp	r0, r5
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x3b8>
 8001dfe:	e0cf      	b.n	8001fa0 <__aeabi_dsub+0x558>
 8001e00:	2580      	movs	r5, #128	; 0x80
 8001e02:	4664      	mov	r4, ip
 8001e04:	042d      	lsls	r5, r5, #16
 8001e06:	432c      	orrs	r4, r5
 8001e08:	46a4      	mov	ip, r4
 8001e0a:	2a38      	cmp	r2, #56	; 0x38
 8001e0c:	dc56      	bgt.n	8001ebc <__aeabi_dsub+0x474>
 8001e0e:	2a1f      	cmp	r2, #31
 8001e10:	dd00      	ble.n	8001e14 <__aeabi_dsub+0x3cc>
 8001e12:	e0d1      	b.n	8001fb8 <__aeabi_dsub+0x570>
 8001e14:	2520      	movs	r5, #32
 8001e16:	001e      	movs	r6, r3
 8001e18:	1aad      	subs	r5, r5, r2
 8001e1a:	4664      	mov	r4, ip
 8001e1c:	40ab      	lsls	r3, r5
 8001e1e:	40ac      	lsls	r4, r5
 8001e20:	40d6      	lsrs	r6, r2
 8001e22:	1e5d      	subs	r5, r3, #1
 8001e24:	41ab      	sbcs	r3, r5
 8001e26:	4334      	orrs	r4, r6
 8001e28:	4323      	orrs	r3, r4
 8001e2a:	4664      	mov	r4, ip
 8001e2c:	40d4      	lsrs	r4, r2
 8001e2e:	1b09      	subs	r1, r1, r4
 8001e30:	e049      	b.n	8001ec6 <__aeabi_dsub+0x47e>
 8001e32:	4660      	mov	r0, ip
 8001e34:	1bdc      	subs	r4, r3, r7
 8001e36:	1a46      	subs	r6, r0, r1
 8001e38:	42a3      	cmp	r3, r4
 8001e3a:	4180      	sbcs	r0, r0
 8001e3c:	4240      	negs	r0, r0
 8001e3e:	4681      	mov	r9, r0
 8001e40:	0030      	movs	r0, r6
 8001e42:	464e      	mov	r6, r9
 8001e44:	1b80      	subs	r0, r0, r6
 8001e46:	4681      	mov	r9, r0
 8001e48:	0200      	lsls	r0, r0, #8
 8001e4a:	d476      	bmi.n	8001f3a <__aeabi_dsub+0x4f2>
 8001e4c:	464b      	mov	r3, r9
 8001e4e:	4323      	orrs	r3, r4
 8001e50:	d000      	beq.n	8001e54 <__aeabi_dsub+0x40c>
 8001e52:	e652      	b.n	8001afa <__aeabi_dsub+0xb2>
 8001e54:	2400      	movs	r4, #0
 8001e56:	2500      	movs	r5, #0
 8001e58:	e771      	b.n	8001d3e <__aeabi_dsub+0x2f6>
 8001e5a:	4339      	orrs	r1, r7
 8001e5c:	000c      	movs	r4, r1
 8001e5e:	1e62      	subs	r2, r4, #1
 8001e60:	4194      	sbcs	r4, r2
 8001e62:	18e4      	adds	r4, r4, r3
 8001e64:	429c      	cmp	r4, r3
 8001e66:	419b      	sbcs	r3, r3
 8001e68:	425b      	negs	r3, r3
 8001e6a:	4463      	add	r3, ip
 8001e6c:	4699      	mov	r9, r3
 8001e6e:	464b      	mov	r3, r9
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	d400      	bmi.n	8001e76 <__aeabi_dsub+0x42e>
 8001e74:	e756      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 8001e76:	2301      	movs	r3, #1
 8001e78:	469c      	mov	ip, r3
 8001e7a:	4ba8      	ldr	r3, [pc, #672]	; (800211c <__aeabi_dsub+0x6d4>)
 8001e7c:	44e0      	add	r8, ip
 8001e7e:	4598      	cmp	r8, r3
 8001e80:	d038      	beq.n	8001ef4 <__aeabi_dsub+0x4ac>
 8001e82:	464b      	mov	r3, r9
 8001e84:	48a6      	ldr	r0, [pc, #664]	; (8002120 <__aeabi_dsub+0x6d8>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	4003      	ands	r3, r0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	0863      	lsrs	r3, r4, #1
 8001e8e:	4014      	ands	r4, r2
 8001e90:	431c      	orrs	r4, r3
 8001e92:	07c3      	lsls	r3, r0, #31
 8001e94:	431c      	orrs	r4, r3
 8001e96:	0843      	lsrs	r3, r0, #1
 8001e98:	4699      	mov	r9, r3
 8001e9a:	e657      	b.n	8001b4c <__aeabi_dsub+0x104>
 8001e9c:	0010      	movs	r0, r2
 8001e9e:	000e      	movs	r6, r1
 8001ea0:	3820      	subs	r0, #32
 8001ea2:	40c6      	lsrs	r6, r0
 8001ea4:	2a20      	cmp	r2, #32
 8001ea6:	d004      	beq.n	8001eb2 <__aeabi_dsub+0x46a>
 8001ea8:	2040      	movs	r0, #64	; 0x40
 8001eaa:	1a82      	subs	r2, r0, r2
 8001eac:	4091      	lsls	r1, r2
 8001eae:	430f      	orrs	r7, r1
 8001eb0:	46b9      	mov	r9, r7
 8001eb2:	464f      	mov	r7, r9
 8001eb4:	1e7a      	subs	r2, r7, #1
 8001eb6:	4197      	sbcs	r7, r2
 8001eb8:	4337      	orrs	r7, r6
 8001eba:	e60f      	b.n	8001adc <__aeabi_dsub+0x94>
 8001ebc:	4662      	mov	r2, ip
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	0013      	movs	r3, r2
 8001ec2:	1e5a      	subs	r2, r3, #1
 8001ec4:	4193      	sbcs	r3, r2
 8001ec6:	1afc      	subs	r4, r7, r3
 8001ec8:	42a7      	cmp	r7, r4
 8001eca:	41bf      	sbcs	r7, r7
 8001ecc:	427f      	negs	r7, r7
 8001ece:	1bcb      	subs	r3, r1, r7
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	465d      	mov	r5, fp
 8001ed4:	4680      	mov	r8, r0
 8001ed6:	e608      	b.n	8001aea <__aeabi_dsub+0xa2>
 8001ed8:	4666      	mov	r6, ip
 8001eda:	431e      	orrs	r6, r3
 8001edc:	d100      	bne.n	8001ee0 <__aeabi_dsub+0x498>
 8001ede:	e0be      	b.n	800205e <__aeabi_dsub+0x616>
 8001ee0:	1e56      	subs	r6, r2, #1
 8001ee2:	2a01      	cmp	r2, #1
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dsub+0x4a0>
 8001ee6:	e109      	b.n	80020fc <__aeabi_dsub+0x6b4>
 8001ee8:	4c8c      	ldr	r4, [pc, #560]	; (800211c <__aeabi_dsub+0x6d4>)
 8001eea:	42a2      	cmp	r2, r4
 8001eec:	d100      	bne.n	8001ef0 <__aeabi_dsub+0x4a8>
 8001eee:	e119      	b.n	8002124 <__aeabi_dsub+0x6dc>
 8001ef0:	0032      	movs	r2, r6
 8001ef2:	e6c1      	b.n	8001c78 <__aeabi_dsub+0x230>
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	2400      	movs	r4, #0
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e648      	b.n	8001b8e <__aeabi_dsub+0x146>
 8001efc:	2020      	movs	r0, #32
 8001efe:	000c      	movs	r4, r1
 8001f00:	1a80      	subs	r0, r0, r2
 8001f02:	003e      	movs	r6, r7
 8001f04:	4087      	lsls	r7, r0
 8001f06:	4084      	lsls	r4, r0
 8001f08:	40d6      	lsrs	r6, r2
 8001f0a:	1e78      	subs	r0, r7, #1
 8001f0c:	4187      	sbcs	r7, r0
 8001f0e:	40d1      	lsrs	r1, r2
 8001f10:	4334      	orrs	r4, r6
 8001f12:	433c      	orrs	r4, r7
 8001f14:	448c      	add	ip, r1
 8001f16:	e7a4      	b.n	8001e62 <__aeabi_dsub+0x41a>
 8001f18:	4a80      	ldr	r2, [pc, #512]	; (800211c <__aeabi_dsub+0x6d4>)
 8001f1a:	4290      	cmp	r0, r2
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x4d8>
 8001f1e:	e0e9      	b.n	80020f4 <__aeabi_dsub+0x6ac>
 8001f20:	19df      	adds	r7, r3, r7
 8001f22:	429f      	cmp	r7, r3
 8001f24:	419b      	sbcs	r3, r3
 8001f26:	4461      	add	r1, ip
 8001f28:	425b      	negs	r3, r3
 8001f2a:	18c9      	adds	r1, r1, r3
 8001f2c:	07cc      	lsls	r4, r1, #31
 8001f2e:	087f      	lsrs	r7, r7, #1
 8001f30:	084b      	lsrs	r3, r1, #1
 8001f32:	4699      	mov	r9, r3
 8001f34:	4680      	mov	r8, r0
 8001f36:	433c      	orrs	r4, r7
 8001f38:	e6f4      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 8001f3a:	1afc      	subs	r4, r7, r3
 8001f3c:	42a7      	cmp	r7, r4
 8001f3e:	41bf      	sbcs	r7, r7
 8001f40:	4663      	mov	r3, ip
 8001f42:	427f      	negs	r7, r7
 8001f44:	1ac9      	subs	r1, r1, r3
 8001f46:	1bcb      	subs	r3, r1, r7
 8001f48:	4699      	mov	r9, r3
 8001f4a:	465d      	mov	r5, fp
 8001f4c:	e5d5      	b.n	8001afa <__aeabi_dsub+0xb2>
 8001f4e:	08ff      	lsrs	r7, r7, #3
 8001f50:	074b      	lsls	r3, r1, #29
 8001f52:	465d      	mov	r5, fp
 8001f54:	433b      	orrs	r3, r7
 8001f56:	08cc      	lsrs	r4, r1, #3
 8001f58:	e6ee      	b.n	8001d38 <__aeabi_dsub+0x2f0>
 8001f5a:	4662      	mov	r2, ip
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	d000      	beq.n	8001f62 <__aeabi_dsub+0x51a>
 8001f60:	e082      	b.n	8002068 <__aeabi_dsub+0x620>
 8001f62:	000b      	movs	r3, r1
 8001f64:	433b      	orrs	r3, r7
 8001f66:	d11b      	bne.n	8001fa0 <__aeabi_dsub+0x558>
 8001f68:	2480      	movs	r4, #128	; 0x80
 8001f6a:	2500      	movs	r5, #0
 8001f6c:	0324      	lsls	r4, r4, #12
 8001f6e:	e6f9      	b.n	8001d64 <__aeabi_dsub+0x31c>
 8001f70:	19dc      	adds	r4, r3, r7
 8001f72:	429c      	cmp	r4, r3
 8001f74:	419b      	sbcs	r3, r3
 8001f76:	4461      	add	r1, ip
 8001f78:	4689      	mov	r9, r1
 8001f7a:	425b      	negs	r3, r3
 8001f7c:	4499      	add	r9, r3
 8001f7e:	464b      	mov	r3, r9
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	d444      	bmi.n	800200e <__aeabi_dsub+0x5c6>
 8001f84:	2301      	movs	r3, #1
 8001f86:	4698      	mov	r8, r3
 8001f88:	e6cc      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 8001f8a:	1bdc      	subs	r4, r3, r7
 8001f8c:	4662      	mov	r2, ip
 8001f8e:	42a3      	cmp	r3, r4
 8001f90:	419b      	sbcs	r3, r3
 8001f92:	1a51      	subs	r1, r2, r1
 8001f94:	425b      	negs	r3, r3
 8001f96:	1acb      	subs	r3, r1, r3
 8001f98:	4699      	mov	r9, r3
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	4698      	mov	r8, r3
 8001f9e:	e5a4      	b.n	8001aea <__aeabi_dsub+0xa2>
 8001fa0:	08ff      	lsrs	r7, r7, #3
 8001fa2:	074b      	lsls	r3, r1, #29
 8001fa4:	465d      	mov	r5, fp
 8001fa6:	433b      	orrs	r3, r7
 8001fa8:	08cc      	lsrs	r4, r1, #3
 8001faa:	e6d7      	b.n	8001d5c <__aeabi_dsub+0x314>
 8001fac:	4662      	mov	r2, ip
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	0014      	movs	r4, r2
 8001fb2:	1e63      	subs	r3, r4, #1
 8001fb4:	419c      	sbcs	r4, r3
 8001fb6:	e679      	b.n	8001cac <__aeabi_dsub+0x264>
 8001fb8:	0015      	movs	r5, r2
 8001fba:	4664      	mov	r4, ip
 8001fbc:	3d20      	subs	r5, #32
 8001fbe:	40ec      	lsrs	r4, r5
 8001fc0:	46a0      	mov	r8, r4
 8001fc2:	2a20      	cmp	r2, #32
 8001fc4:	d005      	beq.n	8001fd2 <__aeabi_dsub+0x58a>
 8001fc6:	2540      	movs	r5, #64	; 0x40
 8001fc8:	4664      	mov	r4, ip
 8001fca:	1aaa      	subs	r2, r5, r2
 8001fcc:	4094      	lsls	r4, r2
 8001fce:	4323      	orrs	r3, r4
 8001fd0:	469a      	mov	sl, r3
 8001fd2:	4654      	mov	r4, sl
 8001fd4:	1e63      	subs	r3, r4, #1
 8001fd6:	419c      	sbcs	r4, r3
 8001fd8:	4643      	mov	r3, r8
 8001fda:	4323      	orrs	r3, r4
 8001fdc:	e773      	b.n	8001ec6 <__aeabi_dsub+0x47e>
 8001fde:	4662      	mov	r2, ip
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	d023      	beq.n	800202c <__aeabi_dsub+0x5e4>
 8001fe4:	000a      	movs	r2, r1
 8001fe6:	433a      	orrs	r2, r7
 8001fe8:	d000      	beq.n	8001fec <__aeabi_dsub+0x5a4>
 8001fea:	e0a0      	b.n	800212e <__aeabi_dsub+0x6e6>
 8001fec:	4662      	mov	r2, ip
 8001fee:	08db      	lsrs	r3, r3, #3
 8001ff0:	0752      	lsls	r2, r2, #29
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	4662      	mov	r2, ip
 8001ff6:	08d4      	lsrs	r4, r2, #3
 8001ff8:	e6b0      	b.n	8001d5c <__aeabi_dsub+0x314>
 8001ffa:	000b      	movs	r3, r1
 8001ffc:	433b      	orrs	r3, r7
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x5ba>
 8002000:	e728      	b.n	8001e54 <__aeabi_dsub+0x40c>
 8002002:	08ff      	lsrs	r7, r7, #3
 8002004:	074b      	lsls	r3, r1, #29
 8002006:	465d      	mov	r5, fp
 8002008:	433b      	orrs	r3, r7
 800200a:	08cc      	lsrs	r4, r1, #3
 800200c:	e697      	b.n	8001d3e <__aeabi_dsub+0x2f6>
 800200e:	2302      	movs	r3, #2
 8002010:	4698      	mov	r8, r3
 8002012:	e736      	b.n	8001e82 <__aeabi_dsub+0x43a>
 8002014:	1afc      	subs	r4, r7, r3
 8002016:	42a7      	cmp	r7, r4
 8002018:	41bf      	sbcs	r7, r7
 800201a:	4663      	mov	r3, ip
 800201c:	427f      	negs	r7, r7
 800201e:	1ac9      	subs	r1, r1, r3
 8002020:	1bcb      	subs	r3, r1, r7
 8002022:	4699      	mov	r9, r3
 8002024:	2301      	movs	r3, #1
 8002026:	465d      	mov	r5, fp
 8002028:	4698      	mov	r8, r3
 800202a:	e55e      	b.n	8001aea <__aeabi_dsub+0xa2>
 800202c:	074b      	lsls	r3, r1, #29
 800202e:	08ff      	lsrs	r7, r7, #3
 8002030:	433b      	orrs	r3, r7
 8002032:	08cc      	lsrs	r4, r1, #3
 8002034:	e692      	b.n	8001d5c <__aeabi_dsub+0x314>
 8002036:	1bdc      	subs	r4, r3, r7
 8002038:	4660      	mov	r0, ip
 800203a:	42a3      	cmp	r3, r4
 800203c:	41b6      	sbcs	r6, r6
 800203e:	1a40      	subs	r0, r0, r1
 8002040:	4276      	negs	r6, r6
 8002042:	1b80      	subs	r0, r0, r6
 8002044:	4681      	mov	r9, r0
 8002046:	0200      	lsls	r0, r0, #8
 8002048:	d560      	bpl.n	800210c <__aeabi_dsub+0x6c4>
 800204a:	1afc      	subs	r4, r7, r3
 800204c:	42a7      	cmp	r7, r4
 800204e:	41bf      	sbcs	r7, r7
 8002050:	4663      	mov	r3, ip
 8002052:	427f      	negs	r7, r7
 8002054:	1ac9      	subs	r1, r1, r3
 8002056:	1bcb      	subs	r3, r1, r7
 8002058:	4699      	mov	r9, r3
 800205a:	465d      	mov	r5, fp
 800205c:	e576      	b.n	8001b4c <__aeabi_dsub+0x104>
 800205e:	08ff      	lsrs	r7, r7, #3
 8002060:	074b      	lsls	r3, r1, #29
 8002062:	433b      	orrs	r3, r7
 8002064:	08cc      	lsrs	r4, r1, #3
 8002066:	e667      	b.n	8001d38 <__aeabi_dsub+0x2f0>
 8002068:	000a      	movs	r2, r1
 800206a:	08db      	lsrs	r3, r3, #3
 800206c:	433a      	orrs	r2, r7
 800206e:	d100      	bne.n	8002072 <__aeabi_dsub+0x62a>
 8002070:	e66f      	b.n	8001d52 <__aeabi_dsub+0x30a>
 8002072:	4662      	mov	r2, ip
 8002074:	0752      	lsls	r2, r2, #29
 8002076:	4313      	orrs	r3, r2
 8002078:	4662      	mov	r2, ip
 800207a:	08d4      	lsrs	r4, r2, #3
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	0312      	lsls	r2, r2, #12
 8002080:	4214      	tst	r4, r2
 8002082:	d007      	beq.n	8002094 <__aeabi_dsub+0x64c>
 8002084:	08c8      	lsrs	r0, r1, #3
 8002086:	4210      	tst	r0, r2
 8002088:	d104      	bne.n	8002094 <__aeabi_dsub+0x64c>
 800208a:	465d      	mov	r5, fp
 800208c:	0004      	movs	r4, r0
 800208e:	08fb      	lsrs	r3, r7, #3
 8002090:	0749      	lsls	r1, r1, #29
 8002092:	430b      	orrs	r3, r1
 8002094:	0f5a      	lsrs	r2, r3, #29
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	0752      	lsls	r2, r2, #29
 800209c:	4313      	orrs	r3, r2
 800209e:	e65d      	b.n	8001d5c <__aeabi_dsub+0x314>
 80020a0:	074b      	lsls	r3, r1, #29
 80020a2:	08ff      	lsrs	r7, r7, #3
 80020a4:	433b      	orrs	r3, r7
 80020a6:	08cc      	lsrs	r4, r1, #3
 80020a8:	e649      	b.n	8001d3e <__aeabi_dsub+0x2f6>
 80020aa:	19dc      	adds	r4, r3, r7
 80020ac:	429c      	cmp	r4, r3
 80020ae:	419b      	sbcs	r3, r3
 80020b0:	4461      	add	r1, ip
 80020b2:	4689      	mov	r9, r1
 80020b4:	425b      	negs	r3, r3
 80020b6:	4499      	add	r9, r3
 80020b8:	464b      	mov	r3, r9
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	d400      	bmi.n	80020c0 <__aeabi_dsub+0x678>
 80020be:	e631      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 80020c0:	464a      	mov	r2, r9
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <__aeabi_dsub+0x6d8>)
 80020c4:	401a      	ands	r2, r3
 80020c6:	2301      	movs	r3, #1
 80020c8:	4691      	mov	r9, r2
 80020ca:	4698      	mov	r8, r3
 80020cc:	e62a      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 80020ce:	0016      	movs	r6, r2
 80020d0:	4664      	mov	r4, ip
 80020d2:	3e20      	subs	r6, #32
 80020d4:	40f4      	lsrs	r4, r6
 80020d6:	46a0      	mov	r8, r4
 80020d8:	2a20      	cmp	r2, #32
 80020da:	d005      	beq.n	80020e8 <__aeabi_dsub+0x6a0>
 80020dc:	2640      	movs	r6, #64	; 0x40
 80020de:	4664      	mov	r4, ip
 80020e0:	1ab2      	subs	r2, r6, r2
 80020e2:	4094      	lsls	r4, r2
 80020e4:	4323      	orrs	r3, r4
 80020e6:	469a      	mov	sl, r3
 80020e8:	4654      	mov	r4, sl
 80020ea:	1e63      	subs	r3, r4, #1
 80020ec:	419c      	sbcs	r4, r3
 80020ee:	4643      	mov	r3, r8
 80020f0:	431c      	orrs	r4, r3
 80020f2:	e5db      	b.n	8001cac <__aeabi_dsub+0x264>
 80020f4:	0002      	movs	r2, r0
 80020f6:	2400      	movs	r4, #0
 80020f8:	2300      	movs	r3, #0
 80020fa:	e548      	b.n	8001b8e <__aeabi_dsub+0x146>
 80020fc:	19dc      	adds	r4, r3, r7
 80020fe:	42bc      	cmp	r4, r7
 8002100:	41bf      	sbcs	r7, r7
 8002102:	4461      	add	r1, ip
 8002104:	4689      	mov	r9, r1
 8002106:	427f      	negs	r7, r7
 8002108:	44b9      	add	r9, r7
 800210a:	e738      	b.n	8001f7e <__aeabi_dsub+0x536>
 800210c:	464b      	mov	r3, r9
 800210e:	4323      	orrs	r3, r4
 8002110:	d100      	bne.n	8002114 <__aeabi_dsub+0x6cc>
 8002112:	e69f      	b.n	8001e54 <__aeabi_dsub+0x40c>
 8002114:	e606      	b.n	8001d24 <__aeabi_dsub+0x2dc>
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	000007fe 	.word	0x000007fe
 800211c:	000007ff 	.word	0x000007ff
 8002120:	ff7fffff 	.word	0xff7fffff
 8002124:	08ff      	lsrs	r7, r7, #3
 8002126:	074b      	lsls	r3, r1, #29
 8002128:	433b      	orrs	r3, r7
 800212a:	08cc      	lsrs	r4, r1, #3
 800212c:	e616      	b.n	8001d5c <__aeabi_dsub+0x314>
 800212e:	4662      	mov	r2, ip
 8002130:	08db      	lsrs	r3, r3, #3
 8002132:	0752      	lsls	r2, r2, #29
 8002134:	4313      	orrs	r3, r2
 8002136:	4662      	mov	r2, ip
 8002138:	08d4      	lsrs	r4, r2, #3
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	0312      	lsls	r2, r2, #12
 800213e:	4214      	tst	r4, r2
 8002140:	d007      	beq.n	8002152 <__aeabi_dsub+0x70a>
 8002142:	08c8      	lsrs	r0, r1, #3
 8002144:	4210      	tst	r0, r2
 8002146:	d104      	bne.n	8002152 <__aeabi_dsub+0x70a>
 8002148:	465d      	mov	r5, fp
 800214a:	0004      	movs	r4, r0
 800214c:	08fb      	lsrs	r3, r7, #3
 800214e:	0749      	lsls	r1, r1, #29
 8002150:	430b      	orrs	r3, r1
 8002152:	0f5a      	lsrs	r2, r3, #29
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	0752      	lsls	r2, r2, #29
 8002158:	08db      	lsrs	r3, r3, #3
 800215a:	4313      	orrs	r3, r2
 800215c:	e5fe      	b.n	8001d5c <__aeabi_dsub+0x314>
 800215e:	2300      	movs	r3, #0
 8002160:	4a01      	ldr	r2, [pc, #4]	; (8002168 <__aeabi_dsub+0x720>)
 8002162:	001c      	movs	r4, r3
 8002164:	e513      	b.n	8001b8e <__aeabi_dsub+0x146>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	000007ff 	.word	0x000007ff

0800216c <__aeabi_d2iz>:
 800216c:	000a      	movs	r2, r1
 800216e:	b530      	push	{r4, r5, lr}
 8002170:	4c13      	ldr	r4, [pc, #76]	; (80021c0 <__aeabi_d2iz+0x54>)
 8002172:	0053      	lsls	r3, r2, #1
 8002174:	0309      	lsls	r1, r1, #12
 8002176:	0005      	movs	r5, r0
 8002178:	0b09      	lsrs	r1, r1, #12
 800217a:	2000      	movs	r0, #0
 800217c:	0d5b      	lsrs	r3, r3, #21
 800217e:	0fd2      	lsrs	r2, r2, #31
 8002180:	42a3      	cmp	r3, r4
 8002182:	dd04      	ble.n	800218e <__aeabi_d2iz+0x22>
 8002184:	480f      	ldr	r0, [pc, #60]	; (80021c4 <__aeabi_d2iz+0x58>)
 8002186:	4283      	cmp	r3, r0
 8002188:	dd02      	ble.n	8002190 <__aeabi_d2iz+0x24>
 800218a:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <__aeabi_d2iz+0x5c>)
 800218c:	18d0      	adds	r0, r2, r3
 800218e:	bd30      	pop	{r4, r5, pc}
 8002190:	2080      	movs	r0, #128	; 0x80
 8002192:	0340      	lsls	r0, r0, #13
 8002194:	4301      	orrs	r1, r0
 8002196:	480d      	ldr	r0, [pc, #52]	; (80021cc <__aeabi_d2iz+0x60>)
 8002198:	1ac0      	subs	r0, r0, r3
 800219a:	281f      	cmp	r0, #31
 800219c:	dd08      	ble.n	80021b0 <__aeabi_d2iz+0x44>
 800219e:	480c      	ldr	r0, [pc, #48]	; (80021d0 <__aeabi_d2iz+0x64>)
 80021a0:	1ac3      	subs	r3, r0, r3
 80021a2:	40d9      	lsrs	r1, r3
 80021a4:	000b      	movs	r3, r1
 80021a6:	4258      	negs	r0, r3
 80021a8:	2a00      	cmp	r2, #0
 80021aa:	d1f0      	bne.n	800218e <__aeabi_d2iz+0x22>
 80021ac:	0018      	movs	r0, r3
 80021ae:	e7ee      	b.n	800218e <__aeabi_d2iz+0x22>
 80021b0:	4c08      	ldr	r4, [pc, #32]	; (80021d4 <__aeabi_d2iz+0x68>)
 80021b2:	40c5      	lsrs	r5, r0
 80021b4:	46a4      	mov	ip, r4
 80021b6:	4463      	add	r3, ip
 80021b8:	4099      	lsls	r1, r3
 80021ba:	000b      	movs	r3, r1
 80021bc:	432b      	orrs	r3, r5
 80021be:	e7f2      	b.n	80021a6 <__aeabi_d2iz+0x3a>
 80021c0:	000003fe 	.word	0x000003fe
 80021c4:	0000041d 	.word	0x0000041d
 80021c8:	7fffffff 	.word	0x7fffffff
 80021cc:	00000433 	.word	0x00000433
 80021d0:	00000413 	.word	0x00000413
 80021d4:	fffffbed 	.word	0xfffffbed

080021d8 <__aeabi_i2d>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	2800      	cmp	r0, #0
 80021dc:	d016      	beq.n	800220c <__aeabi_i2d+0x34>
 80021de:	17c3      	asrs	r3, r0, #31
 80021e0:	18c5      	adds	r5, r0, r3
 80021e2:	405d      	eors	r5, r3
 80021e4:	0fc4      	lsrs	r4, r0, #31
 80021e6:	0028      	movs	r0, r5
 80021e8:	f000 f826 	bl	8002238 <__clzsi2>
 80021ec:	4a11      	ldr	r2, [pc, #68]	; (8002234 <__aeabi_i2d+0x5c>)
 80021ee:	1a12      	subs	r2, r2, r0
 80021f0:	280a      	cmp	r0, #10
 80021f2:	dc16      	bgt.n	8002222 <__aeabi_i2d+0x4a>
 80021f4:	0003      	movs	r3, r0
 80021f6:	002e      	movs	r6, r5
 80021f8:	3315      	adds	r3, #21
 80021fa:	409e      	lsls	r6, r3
 80021fc:	230b      	movs	r3, #11
 80021fe:	1a18      	subs	r0, r3, r0
 8002200:	40c5      	lsrs	r5, r0
 8002202:	0552      	lsls	r2, r2, #21
 8002204:	032d      	lsls	r5, r5, #12
 8002206:	0b2d      	lsrs	r5, r5, #12
 8002208:	0d53      	lsrs	r3, r2, #21
 800220a:	e003      	b.n	8002214 <__aeabi_i2d+0x3c>
 800220c:	2400      	movs	r4, #0
 800220e:	2300      	movs	r3, #0
 8002210:	2500      	movs	r5, #0
 8002212:	2600      	movs	r6, #0
 8002214:	051b      	lsls	r3, r3, #20
 8002216:	432b      	orrs	r3, r5
 8002218:	07e4      	lsls	r4, r4, #31
 800221a:	4323      	orrs	r3, r4
 800221c:	0030      	movs	r0, r6
 800221e:	0019      	movs	r1, r3
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	380b      	subs	r0, #11
 8002224:	4085      	lsls	r5, r0
 8002226:	0552      	lsls	r2, r2, #21
 8002228:	032d      	lsls	r5, r5, #12
 800222a:	2600      	movs	r6, #0
 800222c:	0b2d      	lsrs	r5, r5, #12
 800222e:	0d53      	lsrs	r3, r2, #21
 8002230:	e7f0      	b.n	8002214 <__aeabi_i2d+0x3c>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	0000041e 	.word	0x0000041e

08002238 <__clzsi2>:
 8002238:	211c      	movs	r1, #28
 800223a:	2301      	movs	r3, #1
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	4298      	cmp	r0, r3
 8002240:	d301      	bcc.n	8002246 <__clzsi2+0xe>
 8002242:	0c00      	lsrs	r0, r0, #16
 8002244:	3910      	subs	r1, #16
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	4298      	cmp	r0, r3
 800224a:	d301      	bcc.n	8002250 <__clzsi2+0x18>
 800224c:	0a00      	lsrs	r0, r0, #8
 800224e:	3908      	subs	r1, #8
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	4298      	cmp	r0, r3
 8002254:	d301      	bcc.n	800225a <__clzsi2+0x22>
 8002256:	0900      	lsrs	r0, r0, #4
 8002258:	3904      	subs	r1, #4
 800225a:	a202      	add	r2, pc, #8	; (adr r2, 8002264 <__clzsi2+0x2c>)
 800225c:	5c10      	ldrb	r0, [r2, r0]
 800225e:	1840      	adds	r0, r0, r1
 8002260:	4770      	bx	lr
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	02020304 	.word	0x02020304
 8002268:	01010101 	.word	0x01010101
	...

08002274 <__clzdi2>:
 8002274:	b510      	push	{r4, lr}
 8002276:	2900      	cmp	r1, #0
 8002278:	d103      	bne.n	8002282 <__clzdi2+0xe>
 800227a:	f7ff ffdd 	bl	8002238 <__clzsi2>
 800227e:	3020      	adds	r0, #32
 8002280:	e002      	b.n	8002288 <__clzdi2+0x14>
 8002282:	0008      	movs	r0, r1
 8002284:	f7ff ffd8 	bl	8002238 <__clzsi2>
 8002288:	bd10      	pop	{r4, pc}
 800228a:	46c0      	nop			; (mov r8, r8)

0800228c <setSPI_Size>:
 * @return none
 */



static void setSPI_Size(int8_t size){
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	0002      	movs	r2, r0
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	701a      	strb	r2, [r3, #0]
  if(config.spi_sz!=size){
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <setSPI_Size+0x78>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	b25b      	sxtb	r3, r3
 800229e:	1dfa      	adds	r2, r7, #7
 80022a0:	7812      	ldrb	r2, [r2, #0]
 80022a2:	b252      	sxtb	r2, r2
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d029      	beq.n	80022fc <setSPI_Size+0x70>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80022a8:	4b17      	ldr	r3, [pc, #92]	; (8002308 <setSPI_Size+0x7c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b16      	ldr	r3, [pc, #88]	; (8002308 <setSPI_Size+0x7c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2140      	movs	r1, #64	; 0x40
 80022b4:	438a      	bics	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <setSPI_Size+0x78>)
 80022ba:	1dfa      	adds	r2, r7, #7
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	701a      	strb	r2, [r3, #0]
    if(size==mode_16bit){
 80022c0:	1dfb      	adds	r3, r7, #7
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10d      	bne.n	80022e6 <setSPI_Size+0x5a>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80022ca:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <setSPI_Size+0x7c>)
 80022cc:	2280      	movs	r2, #128	; 0x80
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 80022d2:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <setSPI_Size+0x7c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <setSPI_Size+0x7c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0109      	lsls	r1, r1, #4
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 80022e4:	e00a      	b.n	80022fc <setSPI_Size+0x70>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80022e6:	4b08      	ldr	r3, [pc, #32]	; (8002308 <setSPI_Size+0x7c>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <setSPI_Size+0x7c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b05      	ldr	r3, [pc, #20]	; (8002308 <setSPI_Size+0x7c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4905      	ldr	r1, [pc, #20]	; (800230c <setSPI_Size+0x80>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000000 	.word	0x20000000
 8002308:	20000190 	.word	0x20000190
 800230c:	fffff7ff 	.word	0xfffff7ff

08002310 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	0002      	movs	r2, r0
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	1dbb      	adds	r3, r7, #6
 800231e:	1c0a      	adds	r2, r1, #0
 8002320:	701a      	strb	r2, [r3, #0]
  setSPI_Size(size);
 8002322:	1dbb      	adds	r3, r7, #6
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b25b      	sxtb	r3, r3
 8002328:	0018      	movs	r0, r3
 800232a:	f7ff ffaf 	bl	800228c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800232e:	4b3f      	ldr	r3, [pc, #252]	; (800242c <setDMAMemMode+0x11c>)
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	b25b      	sxtb	r3, r3
 8002334:	001a      	movs	r2, r3
 8002336:	1dbb      	adds	r3, r7, #6
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d107      	bne.n	800234e <setDMAMemMode+0x3e>
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <setDMAMemMode+0x11c>)
 8002340:	789b      	ldrb	r3, [r3, #2]
 8002342:	b25b      	sxtb	r3, r3
 8002344:	001a      	movs	r2, r3
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d06a      	beq.n	8002424 <setDMAMemMode+0x114>
    config.dma_sz =size;
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	2200      	movs	r2, #0
 8002352:	569a      	ldrsb	r2, [r3, r2]
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <setDMAMemMode+0x11c>)
 8002356:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	2200      	movs	r2, #0
 800235c:	569a      	ldrsb	r2, [r3, r2]
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <setDMAMemMode+0x11c>)
 8002360:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <setDMAMemMode+0x120>)
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b31      	ldr	r3, [pc, #196]	; (8002430 <setDMAMemMode+0x120>)
 800236c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2101      	movs	r1, #1
 8002372:	438a      	bics	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <setDMAMemMode+0x120>)
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	4013      	ands	r3, r2
 8002384:	d1f8      	bne.n	8002378 <setDMAMemMode+0x68>
#endif
    if(memInc==mem_increase){
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10e      	bne.n	80023ac <setDMAMemMode+0x9c>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <setDMAMemMode+0x120>)
 8002390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <setDMAMemMode+0x120>)
 8002398:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <setDMAMemMode+0x120>)
 80023a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2180      	movs	r1, #128	; 0x80
 80023a6:	430a      	orrs	r2, r1
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	e00d      	b.n	80023c8 <setDMAMemMode+0xb8>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <setDMAMemMode+0x120>)
 80023ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <setDMAMemMode+0x120>)
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b1c      	ldr	r3, [pc, #112]	; (8002430 <setDMAMemMode+0x120>)
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	438a      	bics	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80023c8:	1dbb      	adds	r3, r7, #6
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d117      	bne.n	8002400 <setDMAMemMode+0xf0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023d0:	4b17      	ldr	r3, [pc, #92]	; (8002430 <setDMAMemMode+0x120>)
 80023d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	0052      	lsls	r2, r2, #1
 80023d8:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <setDMAMemMode+0x120>)
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	00d2      	lsls	r2, r2, #3
 80023e2:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <setDMAMemMode+0x120>)
 80023e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <setDMAMemMode+0x124>)
 80023ee:	401a      	ands	r2, r3
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <setDMAMemMode+0x120>)
 80023f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	21a0      	movs	r1, #160	; 0xa0
 80023f8:	00c9      	lsls	r1, r1, #3
 80023fa:	430a      	orrs	r2, r1
 80023fc:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 80023fe:	e011      	b.n	8002424 <setDMAMemMode+0x114>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <setDMAMemMode+0x120>)
 8002402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002404:	2200      	movs	r2, #0
 8002406:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <setDMAMemMode+0x120>)
 800240a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 8002410:	4b07      	ldr	r3, [pc, #28]	; (8002430 <setDMAMemMode+0x120>)
 8002412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <setDMAMemMode+0x120>)
 800241a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4905      	ldr	r1, [pc, #20]	; (8002434 <setDMAMemMode+0x124>)
 8002420:	400a      	ands	r2, r1
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	46c0      	nop			; (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000000 	.word	0x20000000
 8002430:	20000190 	.word	0x20000190
 8002434:	fffff0ff 	.word	0xfffff0ff

08002438 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	000a      	movs	r2, r1
 8002442:	1cfb      	adds	r3, r7, #3
 8002444:	701a      	strb	r2, [r3, #0]
	setSPI_Size(mode_8bit);
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff ff20 	bl	800228c <setSPI_Size>
	LCD_PIN(LCD_DC,RESET);
 800244c:	23a0      	movs	r3, #160	; 0xa0
 800244e:	05db      	lsls	r3, r3, #23
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	0352      	lsls	r2, r2, #13
 8002454:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
	LCD_PIN(LCD_CS,RESET);
#endif
	HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8002456:	2301      	movs	r3, #1
 8002458:	425b      	negs	r3, r3
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <LCD_WriteCommand+0x58>)
 800245e:	2201      	movs	r2, #1
 8002460:	f006 fd10 	bl	8008e84 <HAL_SPI_Transmit>
	if(argc){
 8002464:	1cfb      	adds	r3, r7, #3
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <LCD_WriteCommand+0x50>
		LCD_PIN(LCD_DC,SET);
 800246c:	23a0      	movs	r3, #160	; 0xa0
 800246e:	05db      	lsls	r3, r3, #23
 8002470:	2210      	movs	r2, #16
 8002472:	619a      	str	r2, [r3, #24]
		HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	1cfb      	adds	r3, r7, #3
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b29a      	uxth	r2, r3
 800247e:	2301      	movs	r3, #1
 8002480:	425b      	negs	r3, r3
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <LCD_WriteCommand+0x58>)
 8002484:	f006 fcfe 	bl	8008e84 <HAL_SPI_Transmit>
	}
#ifdef LCD_CS
	LCD_PIN(LCD_CS,SET);
#endif
}
 8002488:	46c0      	nop			; (mov r8, r8)
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000190 	.word	0x20000190

08002494 <LCD_GetRed>:

static uint8_t LCD_GetRed(uint16_t red){
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	0002      	movs	r2, r0
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	801a      	strh	r2, [r3, #0]
	return (red & 0xf800)>>11;
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	0adb      	lsrs	r3, r3, #11
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <LCD_GetGreen>:

static uint8_t LCD_GetGreen(uint16_t green){
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	0002      	movs	r2, r0
 80024ba:	1dbb      	adds	r3, r7, #6
 80024bc:	801a      	strh	r2, [r3, #0]
	return (green & 0x07e0)>>5;
 80024be:	1dbb      	adds	r3, r7, #6
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	115b      	asrs	r3, r3, #5
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	223f      	movs	r2, #63	; 0x3f
 80024c8:	4013      	ands	r3, r2
 80024ca:	b2db      	uxtb	r3, r3
}
 80024cc:	0018      	movs	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	b002      	add	sp, #8
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <LCD_GetBlue>:

static uint8_t LCD_GetBlue(uint16_t blue){
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	0002      	movs	r2, r0
 80024dc:	1dbb      	adds	r3, r7, #6
 80024de:	801a      	strh	r2, [r3, #0]
	return blue & 0x001F;
 80024e0:	1dbb      	adds	r3, r7, #6
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	221f      	movs	r2, #31
 80024e8:	4013      	ands	r3, r2
 80024ea:	b2db      	uxtb	r3, r3
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 80024fe:	23a0      	movs	r3, #160	; 0xa0
 8002500:	05db      	lsls	r3, r3, #23
 8002502:	2210      	movs	r2, #16
 8002504:	619a      	str	r2, [r3, #24]
  LCD_PIN(LCD_CS,RESET);
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8002506:	e058      	b.n	80025ba <LCD_WriteData+0xc6>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	0252      	lsls	r2, r2, #9
 800250e:	4293      	cmp	r3, r2
 8002510:	d300      	bcc.n	8002514 <LCD_WriteData+0x20>
 8002512:	4b2e      	ldr	r3, [pc, #184]	; (80025cc <LCD_WriteData+0xd8>)
 8002514:	210e      	movs	r1, #14
 8002516:	187a      	adds	r2, r7, r1
 8002518:	8013      	strh	r3, [r2, #0]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d929      	bls.n	8002574 <LCD_WriteData+0x80>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8002520:	187b      	adds	r3, r7, r1
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <LCD_WriteData+0xdc>)
 8002528:	0018      	movs	r0, r3
 800252a:	f006 fe01 	bl	8009130 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <LCD_WriteData+0xdc>)
 8002532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002534:	0018      	movs	r0, r3
 8002536:	f005 f805 	bl	8007544 <HAL_DMA_GetState>
 800253a:	0003      	movs	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d1f7      	bne.n	8002530 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <LCD_WriteData+0xe0>)
 8002542:	789b      	ldrb	r3, [r3, #2]
 8002544:	b25b      	sxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d131      	bne.n	80025ae <LCD_WriteData+0xba>
        if(config.dma_sz==mode_16bit)
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <LCD_WriteData+0xe0>)
 800254c:	785b      	ldrb	r3, [r3, #1]
 800254e:	b25b      	sxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <LCD_WriteData+0x6e>
          buff += chunk_size;
 8002554:	230e      	movs	r3, #14
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	18d3      	adds	r3, r2, r3
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	e025      	b.n	80025ae <LCD_WriteData+0xba>
        else
          buff += chunk_size*2;
 8002562:	230e      	movs	r3, #14
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	001a      	movs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	189b      	adds	r3, r3, r2
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	e01c      	b.n	80025ae <LCD_WriteData+0xba>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8002574:	2301      	movs	r3, #1
 8002576:	425c      	negs	r4, r3
 8002578:	250e      	movs	r5, #14
 800257a:	197b      	adds	r3, r7, r5
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4813      	ldr	r0, [pc, #76]	; (80025d0 <LCD_WriteData+0xdc>)
 8002582:	0023      	movs	r3, r4
 8002584:	f006 fc7e 	bl	8008e84 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <LCD_WriteData+0xe0>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b25b      	sxtb	r3, r3
 800258e:	2b01      	cmp	r3, #1
 8002590:	d105      	bne.n	800259e <LCD_WriteData+0xaa>
        buff += chunk_size;
 8002592:	197b      	adds	r3, r7, r5
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	18d3      	adds	r3, r2, r3
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	e007      	b.n	80025ae <LCD_WriteData+0xba>
      else
        buff += chunk_size*2;
 800259e:	230e      	movs	r3, #14
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	001a      	movs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	189b      	adds	r3, r3, r2
 80025ac:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80025ae:	230e      	movs	r3, #14
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1a3      	bne.n	8002508 <LCD_WriteData+0x14>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	0000ffff 	.word	0x0000ffff
 80025d0:	20000190 	.word	0x20000190
 80025d4:	20000000 	.word	0x20000000

080025d8 <LCD_ColorOpacity>:
	 }
	 setSPI_Mode(MODE_WRITE);
	 return 0;
}

uint16_t LCD_ColorOpacity(uint16_t col, uint16_t op){
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	0002      	movs	r2, r0
 80025e0:	1dbb      	adds	r3, r7, #6
 80025e2:	801a      	strh	r2, [r3, #0]
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	1c0a      	adds	r2, r1, #0
 80025e8:	801a      	strh	r2, [r3, #0]
	if 		(LCD_GetRed(col) >= op) col -= op << 11;
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7ff ff50 	bl	8002494 <LCD_GetRed>
 80025f4:	0003      	movs	r3, r0
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	1d3a      	adds	r2, r7, #4
 80025fa:	8812      	ldrh	r2, [r2, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d809      	bhi.n	8002614 <LCD_ColorOpacity+0x3c>
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	02db      	lsls	r3, r3, #11
 8002606:	b29a      	uxth	r2, r3
 8002608:	1dbb      	adds	r3, r7, #6
 800260a:	1db9      	adds	r1, r7, #6
 800260c:	8809      	ldrh	r1, [r1, #0]
 800260e:	1a8a      	subs	r2, r1, r2
 8002610:	801a      	strh	r2, [r3, #0]
 8002612:	e00c      	b.n	800262e <LCD_ColorOpacity+0x56>
	else if (LCD_GetRed(col) > 0) col &= 0x07FF;
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	0018      	movs	r0, r3
 800261a:	f7ff ff3b 	bl	8002494 <LCD_GetRed>
 800261e:	1e03      	subs	r3, r0, #0
 8002620:	d005      	beq.n	800262e <LCD_ColorOpacity+0x56>
 8002622:	1dbb      	adds	r3, r7, #6
 8002624:	1dba      	adds	r2, r7, #6
 8002626:	8812      	ldrh	r2, [r2, #0]
 8002628:	0552      	lsls	r2, r2, #21
 800262a:	0d52      	lsrs	r2, r2, #21
 800262c:	801a      	strh	r2, [r3, #0]

	if 		(LCD_GetGreen(col) >= op << 1) col -= op << 6;
 800262e:	1dbb      	adds	r3, r7, #6
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	0018      	movs	r0, r3
 8002634:	f7ff ff3d 	bl	80024b2 <LCD_GetGreen>
 8002638:	0003      	movs	r3, r0
 800263a:	001a      	movs	r2, r3
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	429a      	cmp	r2, r3
 8002644:	db09      	blt.n	800265a <LCD_ColorOpacity+0x82>
 8002646:	1d3b      	adds	r3, r7, #4
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	019b      	lsls	r3, r3, #6
 800264c:	b29a      	uxth	r2, r3
 800264e:	1dbb      	adds	r3, r7, #6
 8002650:	1db9      	adds	r1, r7, #6
 8002652:	8809      	ldrh	r1, [r1, #0]
 8002654:	1a8a      	subs	r2, r1, r2
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	e00c      	b.n	8002674 <LCD_ColorOpacity+0x9c>
	else if (LCD_GetGreen(col) > 0) col &= 0xF81F;
 800265a:	1dbb      	adds	r3, r7, #6
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	0018      	movs	r0, r3
 8002660:	f7ff ff27 	bl	80024b2 <LCD_GetGreen>
 8002664:	1e03      	subs	r3, r0, #0
 8002666:	d005      	beq.n	8002674 <LCD_ColorOpacity+0x9c>
 8002668:	1dbb      	adds	r3, r7, #6
 800266a:	1dba      	adds	r2, r7, #6
 800266c:	8812      	ldrh	r2, [r2, #0]
 800266e:	4914      	ldr	r1, [pc, #80]	; (80026c0 <LCD_ColorOpacity+0xe8>)
 8002670:	400a      	ands	r2, r1
 8002672:	801a      	strh	r2, [r3, #0]

	if 		(LCD_GetBlue(col) >= op) col -= op;
 8002674:	1dbb      	adds	r3, r7, #6
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff ff2b 	bl	80024d4 <LCD_GetBlue>
 800267e:	0003      	movs	r3, r0
 8002680:	b29b      	uxth	r3, r3
 8002682:	1d3a      	adds	r2, r7, #4
 8002684:	8812      	ldrh	r2, [r2, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d807      	bhi.n	800269a <LCD_ColorOpacity+0xc2>
 800268a:	1dbb      	adds	r3, r7, #6
 800268c:	1db9      	adds	r1, r7, #6
 800268e:	1d3a      	adds	r2, r7, #4
 8002690:	8809      	ldrh	r1, [r1, #0]
 8002692:	8812      	ldrh	r2, [r2, #0]
 8002694:	1a8a      	subs	r2, r1, r2
 8002696:	801a      	strh	r2, [r3, #0]
 8002698:	e00c      	b.n	80026b4 <LCD_ColorOpacity+0xdc>
	else if (LCD_GetBlue(col) > 0) col &= 0xFF80;
 800269a:	1dbb      	adds	r3, r7, #6
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	0018      	movs	r0, r3
 80026a0:	f7ff ff18 	bl	80024d4 <LCD_GetBlue>
 80026a4:	1e03      	subs	r3, r0, #0
 80026a6:	d005      	beq.n	80026b4 <LCD_ColorOpacity+0xdc>
 80026a8:	1dbb      	adds	r3, r7, #6
 80026aa:	1dba      	adds	r2, r7, #6
 80026ac:	8812      	ldrh	r2, [r2, #0]
 80026ae:	217f      	movs	r1, #127	; 0x7f
 80026b0:	438a      	bics	r2, r1
 80026b2:	801a      	strh	r2, [r3, #0]
	return col;
 80026b4:	1dbb      	adds	r3, r7, #6
 80026b6:	881b      	ldrh	r3, [r3, #0]
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	fffff81f 	.word	0xfffff81f

080026c4 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80026c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026c6:	b08b      	sub	sp, #44	; 0x2c
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	0005      	movs	r5, r0
 80026cc:	000c      	movs	r4, r1
 80026ce:	0010      	movs	r0, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	1dbb      	adds	r3, r7, #6
 80026d4:	1c2a      	adds	r2, r5, #0
 80026d6:	801a      	strh	r2, [r3, #0]
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	1c22      	adds	r2, r4, #0
 80026dc:	801a      	strh	r2, [r3, #0]
 80026de:	1cbb      	adds	r3, r7, #2
 80026e0:	1c02      	adds	r2, r0, #0
 80026e2:	801a      	strh	r2, [r3, #0]
 80026e4:	003b      	movs	r3, r7
 80026e6:	1c0a      	adds	r2, r1, #0
 80026e8:	801a      	strh	r2, [r3, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80026ea:	2026      	movs	r0, #38	; 0x26
 80026ec:	183b      	adds	r3, r7, r0
 80026ee:	1dba      	adds	r2, r7, #6
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	801a      	strh	r2, [r3, #0]
 80026f4:	2424      	movs	r4, #36	; 0x24
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	1cba      	adds	r2, r7, #2
 80026fa:	8812      	ldrh	r2, [r2, #0]
 80026fc:	801a      	strh	r2, [r3, #0]
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	3350      	adds	r3, #80	; 0x50
 8002704:	b29a      	uxth	r2, r3
 8002706:	2522      	movs	r5, #34	; 0x22
 8002708:	197b      	adds	r3, r7, r5
 800270a:	801a      	strh	r2, [r3, #0]
 800270c:	003b      	movs	r3, r7
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	3350      	adds	r3, #80	; 0x50
 8002712:	b29a      	uxth	r2, r3
 8002714:	2620      	movs	r6, #32
 8002716:	19bb      	adds	r3, r7, r6
 8002718:	801a      	strh	r2, [r3, #0]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800271a:	2118      	movs	r1, #24
 800271c:	187b      	adds	r3, r7, r1
 800271e:	222a      	movs	r2, #42	; 0x2a
 8002720:	701a      	strb	r2, [r3, #0]
 8002722:	183b      	adds	r3, r7, r0
 8002724:	2200      	movs	r2, #0
 8002726:	5e9b      	ldrsh	r3, [r3, r2]
 8002728:	121b      	asrs	r3, r3, #8
 800272a:	b21b      	sxth	r3, r3
 800272c:	b2da      	uxtb	r2, r3
 800272e:	187b      	adds	r3, r7, r1
 8002730:	705a      	strb	r2, [r3, #1]
 8002732:	183b      	adds	r3, r7, r0
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	187b      	adds	r3, r7, r1
 800273a:	709a      	strb	r2, [r3, #2]
 800273c:	193b      	adds	r3, r7, r4
 800273e:	2200      	movs	r2, #0
 8002740:	5e9b      	ldrsh	r3, [r3, r2]
 8002742:	121b      	asrs	r3, r3, #8
 8002744:	b21b      	sxth	r3, r3
 8002746:	b2da      	uxtb	r2, r3
 8002748:	187b      	adds	r3, r7, r1
 800274a:	70da      	strb	r2, [r3, #3]
 800274c:	193b      	adds	r3, r7, r4
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	187b      	adds	r3, r7, r1
 8002754:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8002756:	187b      	adds	r3, r7, r1
 8002758:	2104      	movs	r1, #4
 800275a:	0018      	movs	r0, r3
 800275c:	f7ff fe6c 	bl	8002438 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8002760:	2110      	movs	r1, #16
 8002762:	187b      	adds	r3, r7, r1
 8002764:	222b      	movs	r2, #43	; 0x2b
 8002766:	701a      	strb	r2, [r3, #0]
 8002768:	197b      	adds	r3, r7, r5
 800276a:	2200      	movs	r2, #0
 800276c:	5e9b      	ldrsh	r3, [r3, r2]
 800276e:	121b      	asrs	r3, r3, #8
 8002770:	b21b      	sxth	r3, r3
 8002772:	b2da      	uxtb	r2, r3
 8002774:	187b      	adds	r3, r7, r1
 8002776:	705a      	strb	r2, [r3, #1]
 8002778:	197b      	adds	r3, r7, r5
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	187b      	adds	r3, r7, r1
 8002780:	709a      	strb	r2, [r3, #2]
 8002782:	19bb      	adds	r3, r7, r6
 8002784:	2200      	movs	r2, #0
 8002786:	5e9b      	ldrsh	r3, [r3, r2]
 8002788:	121b      	asrs	r3, r3, #8
 800278a:	b21b      	sxth	r3, r3
 800278c:	b2da      	uxtb	r2, r3
 800278e:	187b      	adds	r3, r7, r1
 8002790:	70da      	strb	r2, [r3, #3]
 8002792:	19bb      	adds	r3, r7, r6
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	187b      	adds	r3, r7, r1
 800279a:	711a      	strb	r2, [r3, #4]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2104      	movs	r1, #4
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff fe49 	bl	8002438 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80027a6:	210c      	movs	r1, #12
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <LCD_SetAddressWindow+0x100>)
 80027ac:	7812      	ldrb	r2, [r2, #0]
 80027ae:	701a      	strb	r2, [r3, #0]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2100      	movs	r1, #0
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7ff fe3f 	bl	8002438 <LCD_WriteCommand>
  }
}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	b00b      	add	sp, #44	; 0x2c
 80027c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c2:	46c0      	nop			; (mov r8, r8)
 80027c4:	0800b8b8 	.word	0x0800b8b8

080027c8 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80027c8:	b5b0      	push	{r4, r5, r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	0004      	movs	r4, r0
 80027d0:	0008      	movs	r0, r1
 80027d2:	0011      	movs	r1, r2
 80027d4:	1dbb      	adds	r3, r7, #6
 80027d6:	1c22      	adds	r2, r4, #0
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	1c02      	adds	r2, r0, #0
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	1cbb      	adds	r3, r7, #2
 80027e2:	1c0a      	adds	r2, r1, #0
 80027e4:	801a      	strh	r2, [r3, #0]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80027e6:	1dbb      	adds	r3, r7, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	5e9b      	ldrsh	r3, [r3, r2]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	db36      	blt.n	800285e <LCD_DrawPixel+0x96>
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	2200      	movs	r2, #0
 80027f4:	5e9b      	ldrsh	r3, [r3, r2]
 80027f6:	2bef      	cmp	r3, #239	; 0xef
 80027f8:	dc31      	bgt.n	800285e <LCD_DrawPixel+0x96>
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	5e9b      	ldrsh	r3, [r3, r2]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db2c      	blt.n	800285e <LCD_DrawPixel+0x96>
     (y < 0) || (y > LCD_HEIGHT-1))
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	2200      	movs	r2, #0
 8002808:	5e9b      	ldrsh	r3, [r3, r2]
 800280a:	2bef      	cmp	r3, #239	; 0xef
 800280c:	dc27      	bgt.n	800285e <LCD_DrawPixel+0x96>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800280e:	1cbb      	adds	r3, r7, #2
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	0a1b      	lsrs	r3, r3, #8
 8002814:	b29b      	uxth	r3, r3
 8002816:	b2da      	uxtb	r2, r3
 8002818:	250c      	movs	r5, #12
 800281a:	197b      	adds	r3, r7, r5
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	1cbb      	adds	r3, r7, #2
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	197b      	adds	r3, r7, r5
 8002826:	705a      	strb	r2, [r3, #1]

  LCD_SetAddressWindow(x, y, x, y);
 8002828:	1d3b      	adds	r3, r7, #4
 800282a:	2400      	movs	r4, #0
 800282c:	5f1c      	ldrsh	r4, [r3, r4]
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	2200      	movs	r2, #0
 8002832:	5e9a      	ldrsh	r2, [r3, r2]
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	2100      	movs	r1, #0
 8002838:	5e59      	ldrsh	r1, [r3, r1]
 800283a:	1dbb      	adds	r3, r7, #6
 800283c:	2000      	movs	r0, #0
 800283e:	5e18      	ldrsh	r0, [r3, r0]
 8002840:	0023      	movs	r3, r4
 8002842:	f7ff ff3f 	bl	80026c4 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 8002846:	23a0      	movs	r3, #160	; 0xa0
 8002848:	05db      	lsls	r3, r3, #23
 800284a:	2210      	movs	r2, #16
 800284c:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 800284e:	2301      	movs	r3, #1
 8002850:	425b      	negs	r3, r3
 8002852:	1979      	adds	r1, r7, r5
 8002854:	4804      	ldr	r0, [pc, #16]	; (8002868 <LCD_DrawPixel+0xa0>)
 8002856:	2202      	movs	r2, #2
 8002858:	f006 fb14 	bl	8008e84 <HAL_SPI_Transmit>
 800285c:	e000      	b.n	8002860 <LCD_DrawPixel+0x98>
    return;
 800285e:	46c0      	nop			; (mov r8, r8)
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
#endif
}
 8002860:	46bd      	mov	sp, r7
 8002862:	b004      	add	sp, #16
 8002864:	bdb0      	pop	{r4, r5, r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000190 	.word	0x20000190

0800286c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint16_t pixels, uint16_t color){
 800286c:	b590      	push	{r4, r7, lr}
 800286e:	b0a5      	sub	sp, #148	; 0x94
 8002870:	af00      	add	r7, sp, #0
 8002872:	0002      	movs	r2, r0
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	801a      	strh	r2, [r3, #0]
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	1c0a      	adds	r2, r1, #0
 800287c:	801a      	strh	r2, [r3, #0]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 800287e:	1dbb      	adds	r3, r7, #6
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	2b40      	cmp	r3, #64	; 0x40
 8002884:	d907      	bls.n	8002896 <LCD_FillPixels+0x2a>
    LCD_WriteData((uint8_t*)&color, pixels);
 8002886:	1dbb      	adds	r3, r7, #6
 8002888:	881a      	ldrh	r2, [r3, #0]
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	0011      	movs	r1, r2
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff fe30 	bl	80024f4 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8002894:	e03d      	b.n	8002912 <LCD_FillPixels+0xa6>
    for(uint8_t t=0;t<(pixels<DMA_min_Sz ? pixels : DMA_min_Sz);t++){                                 // Fill the buffer with the color
 8002896:	238f      	movs	r3, #143	; 0x8f
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
 800289e:	e00d      	b.n	80028bc <LCD_FillPixels+0x50>
      fill[t]=color;
 80028a0:	208f      	movs	r0, #143	; 0x8f
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	8819      	ldrh	r1, [r3, #0]
 80028aa:	230c      	movs	r3, #12
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	0052      	lsls	r2, r2, #1
 80028b0:	52d1      	strh	r1, [r2, r3]
    for(uint8_t t=0;t<(pixels<DMA_min_Sz ? pixels : DMA_min_Sz);t++){                                 // Fill the buffer with the color
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	183b      	adds	r3, r7, r0
 80028b8:	3201      	adds	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
 80028bc:	238f      	movs	r3, #143	; 0x8f
 80028be:	18fb      	adds	r3, r7, r3
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	1dbb      	adds	r3, r7, #6
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b299      	uxth	r1, r3
 80028c8:	2940      	cmp	r1, #64	; 0x40
 80028ca:	d900      	bls.n	80028ce <LCD_FillPixels+0x62>
 80028cc:	2340      	movs	r3, #64	; 0x40
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	429a      	cmp	r2, r3
 80028d2:	dbe5      	blt.n	80028a0 <LCD_FillPixels+0x34>
    while(pixels){                                                                    // Send 64 pixel blocks
 80028d4:	e019      	b.n	800290a <LCD_FillPixels+0x9e>
      uint8_t sz = (pixels<DMA_min_Sz ? pixels : DMA_min_Sz);
 80028d6:	1dbb      	adds	r3, r7, #6
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	2a40      	cmp	r2, #64	; 0x40
 80028de:	d900      	bls.n	80028e2 <LCD_FillPixels+0x76>
 80028e0:	2340      	movs	r3, #64	; 0x40
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	248e      	movs	r4, #142	; 0x8e
 80028e6:	193b      	adds	r3, r7, r4
 80028e8:	701a      	strb	r2, [r3, #0]
      LCD_WriteData((uint8_t*)fill, sz);
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	781a      	ldrb	r2, [r3, #0]
 80028ee:	230c      	movs	r3, #12
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	0011      	movs	r1, r2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff fdfd 	bl	80024f4 <LCD_WriteData>
      pixels-=sz;
 80028fa:	193b      	adds	r3, r7, r4
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	1dbb      	adds	r3, r7, #6
 8002902:	1db9      	adds	r1, r7, #6
 8002904:	8809      	ldrh	r1, [r1, #0]
 8002906:	1a8a      	subs	r2, r1, r2
 8002908:	801a      	strh	r2, [r3, #0]
    while(pixels){                                                                    // Send 64 pixel blocks
 800290a:	1dbb      	adds	r3, r7, #6
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e1      	bne.n	80028d6 <LCD_FillPixels+0x6a>
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b025      	add	sp, #148	; 0x94
 8002918:	bd90      	pop	{r4, r7, pc}
	...

0800291c <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint16_t,uint16_t){
 800291c:	b5b0      	push	{r4, r5, r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	0005      	movs	r5, r0
 8002924:	000c      	movs	r4, r1
 8002926:	0010      	movs	r0, r2
 8002928:	0019      	movs	r1, r3
 800292a:	1dbb      	adds	r3, r7, #6
 800292c:	1c2a      	adds	r2, r5, #0
 800292e:	801a      	strh	r2, [r3, #0]
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	1c22      	adds	r2, r4, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	1cbb      	adds	r3, r7, #2
 8002938:	1c02      	adds	r2, r0, #0
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	003b      	movs	r3, r7
 800293e:	1c0a      	adds	r2, r1, #0
 8002940:	801a      	strh	r2, [r3, #0]
  if(x0==-1){
 8002942:	1dbb      	adds	r3, r7, #6
 8002944:	2200      	movs	r2, #0
 8002946:	5e9b      	ldrsh	r3, [r3, r2]
 8002948:	3301      	adds	r3, #1
 800294a:	d101      	bne.n	8002950 <LCD_FillArea+0x34>
	return NULL;
 800294c:	2300      	movs	r3, #0
 800294e:	e01b      	b.n	8002988 <LCD_FillArea+0x6c>
  }
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8002950:	2100      	movs	r1, #0
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff fcdc 	bl	8002310 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif

  LCD_SetAddressWindow(x0,y0,x1,y1);
 8002958:	003b      	movs	r3, r7
 800295a:	2400      	movs	r4, #0
 800295c:	5f1c      	ldrsh	r4, [r3, r4]
 800295e:	1cbb      	adds	r3, r7, #2
 8002960:	2200      	movs	r2, #0
 8002962:	5e9a      	ldrsh	r2, [r3, r2]
 8002964:	1d3b      	adds	r3, r7, #4
 8002966:	2100      	movs	r1, #0
 8002968:	5e59      	ldrsh	r1, [r3, r1]
 800296a:	1dbb      	adds	r3, r7, #6
 800296c:	2000      	movs	r0, #0
 800296e:	5e18      	ldrsh	r0, [r3, r0]
 8002970:	0023      	movs	r3, r4
 8002972:	f7ff fea7 	bl	80026c4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8002976:	2101      	movs	r1, #1
 8002978:	2000      	movs	r0, #0
 800297a:	f7ff fcc9 	bl	8002310 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 800297e:	23a0      	movs	r3, #160	; 0xa0
 8002980:	05db      	lsls	r3, r3, #23
 8002982:	2210      	movs	r2, #16
 8002984:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 8002986:	4b02      	ldr	r3, [pc, #8]	; (8002990 <LCD_FillArea+0x74>)
}
 8002988:	0018      	movs	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bdb0      	pop	{r4, r5, r7, pc}
 8002990:	0800286d 	.word	0x0800286d

08002994 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	0005      	movs	r5, r0
 800299c:	000c      	movs	r4, r1
 800299e:	0010      	movs	r0, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	1dbb      	adds	r3, r7, #6
 80029a4:	1c2a      	adds	r2, r5, #0
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	1c22      	adds	r2, r4, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	1cbb      	adds	r3, r7, #2
 80029b0:	1c02      	adds	r2, r0, #0
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	003b      	movs	r3, r7
 80029b6:	1c0a      	adds	r2, r1, #0
 80029b8:	801a      	strh	r2, [r3, #0]
  uint16_t pixels = (xEnd-xSta+1)*(yEnd-ySta+1);
 80029ba:	1cbb      	adds	r3, r7, #2
 80029bc:	881a      	ldrh	r2, [r3, #0]
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	881b      	ldrh	r3, [r3, #0]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	003b      	movs	r3, r7
 80029ca:	8819      	ldrh	r1, [r3, #0]
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	1acb      	subs	r3, r1, r3
 80029d2:	3301      	adds	r3, #1
 80029d4:	b299      	uxth	r1, r3
 80029d6:	240e      	movs	r4, #14
 80029d8:	193b      	adds	r3, r7, r4
 80029da:	434a      	muls	r2, r1
 80029dc:	801a      	strh	r2, [r3, #0]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80029de:	1dbb      	adds	r3, r7, #6
 80029e0:	2000      	movs	r0, #0
 80029e2:	5e18      	ldrsh	r0, [r3, r0]
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2100      	movs	r1, #0
 80029e8:	5e59      	ldrsh	r1, [r3, r1]
 80029ea:	1cbb      	adds	r3, r7, #2
 80029ec:	2200      	movs	r2, #0
 80029ee:	5e9a      	ldrsh	r2, [r3, r2]
 80029f0:	003b      	movs	r3, r7
 80029f2:	2500      	movs	r5, #0
 80029f4:	5f5b      	ldrsh	r3, [r3, r5]
 80029f6:	f7ff fe65 	bl	80026c4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80029fa:	2101      	movs	r1, #1
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff fc87 	bl	8002310 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8002a02:	2320      	movs	r3, #32
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	881a      	ldrh	r2, [r3, #0]
 8002a08:	193b      	adds	r3, r7, r4
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	0011      	movs	r1, r2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7ff ff2c 	bl	800286c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8002a14:	2100      	movs	r1, #0
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff fc7a 	bl	8002310 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	0018      	movs	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	b004      	add	sp, #16
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8002a26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a28:	b085      	sub	sp, #20
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	603a      	str	r2, [r7, #0]
 8002a2e:	1dbb      	adds	r3, r7, #6
 8002a30:	1c02      	adds	r2, r0, #0
 8002a32:	801a      	strh	r2, [r3, #0]
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	1c0a      	adds	r2, r1, #0
 8002a38:	801a      	strh	r2, [r3, #0]
  uint16_t w = bmp->width;
 8002a3a:	250e      	movs	r5, #14
 8002a3c:	197b      	adds	r3, r7, r5
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	8892      	ldrh	r2, [r2, #4]
 8002a42:	801a      	strh	r2, [r3, #0]
  uint16_t h = bmp->height;
 8002a44:	260c      	movs	r6, #12
 8002a46:	19bb      	adds	r3, r7, r6
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	88d2      	ldrh	r2, [r2, #6]
 8002a4c:	801a      	strh	r2, [r3, #0]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8002a4e:	1dbb      	adds	r3, r7, #6
 8002a50:	881b      	ldrh	r3, [r3, #0]
 8002a52:	2bef      	cmp	r3, #239	; 0xef
 8002a54:	d843      	bhi.n	8002ade <LCD_DrawImage+0xb8>
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2bef      	cmp	r3, #239	; 0xef
 8002a5c:	d83f      	bhi.n	8002ade <LCD_DrawImage+0xb8>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8002a5e:	1dbb      	adds	r3, r7, #6
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	197b      	adds	r3, r7, r5
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	18d3      	adds	r3, r2, r3
 8002a68:	2bf0      	cmp	r3, #240	; 0xf0
 8002a6a:	dc3a      	bgt.n	8002ae2 <LCD_DrawImage+0xbc>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	881a      	ldrh	r2, [r3, #0]
 8002a70:	19bb      	adds	r3, r7, r6
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	18d3      	adds	r3, r2, r3
 8002a76:	2bf0      	cmp	r3, #240	; 0xf0
 8002a78:	dc35      	bgt.n	8002ae6 <LCD_DrawImage+0xc0>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	7a1b      	ldrb	r3, [r3, #8]
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d133      	bne.n	8002aea <LCD_DrawImage+0xc4>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8002a82:	1dbb      	adds	r3, r7, #6
 8002a84:	2000      	movs	r0, #0
 8002a86:	5e18      	ldrsh	r0, [r3, r0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	5e59      	ldrsh	r1, [r3, r1]
 8002a8e:	1dba      	adds	r2, r7, #6
 8002a90:	197b      	adds	r3, r7, r5
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	18d3      	adds	r3, r2, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21c      	sxth	r4, r3
 8002aa0:	1d3a      	adds	r2, r7, #4
 8002aa2:	19bb      	adds	r3, r7, r6
 8002aa4:	8812      	ldrh	r2, [r2, #0]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	b21b      	sxth	r3, r3
 8002ab2:	0022      	movs	r2, r4
 8002ab4:	f7ff fe06 	bl	80026c4 <LCD_SetAddressWindow>

#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8002ab8:	2101      	movs	r1, #1
 8002aba:	2001      	movs	r0, #1
 8002abc:	f7ff fc28 	bl	8002310 <setDMAMemMode>
#else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
#endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	197b      	adds	r3, r7, r5
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	19ba      	adds	r2, r7, r6
 8002aca:	8812      	ldrh	r2, [r2, #0]
 8002acc:	4353      	muls	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	f7ff fd10 	bl	80024f4 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7ff fc1a 	bl	8002310 <setDMAMemMode>
 8002adc:	e006      	b.n	8002aec <LCD_DrawImage+0xc6>
    return;
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	e004      	b.n	8002aec <LCD_DrawImage+0xc6>
    return;
 8002ae2:	46c0      	nop			; (mov r8, r8)
 8002ae4:	e002      	b.n	8002aec <LCD_DrawImage+0xc6>
    return;
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	e000      	b.n	8002aec <LCD_DrawImage+0xc6>
    return;
 8002aea:	46c0      	nop			; (mov r8, r8)
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8002aec:	46bd      	mov	sp, r7
 8002aee:	b005      	add	sp, #20
 8002af0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002af2 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8002af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60ba      	str	r2, [r7, #8]
 8002afa:	607b      	str	r3, [r7, #4]
 8002afc:	240e      	movs	r4, #14
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	1c02      	adds	r2, r0, #0
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	250c      	movs	r5, #12
 8002b06:	197b      	adds	r3, r7, r5
 8002b08:	1c0a      	adds	r2, r1, #0
 8002b0a:	801a      	strh	r2, [r3, #0]
  UG_FontSelect(font);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f001 fcfc 	bl	800450c <UG_FontSelect>
  UG_SetForecolor(color);
 8002b14:	2318      	movs	r3, #24
 8002b16:	2608      	movs	r6, #8
 8002b18:	199b      	adds	r3, r3, r6
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	4694      	mov	ip, r2
 8002b1e:	44bc      	add	ip, r7
 8002b20:	4463      	add	r3, ip
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f001 ffed 	bl	8004b04 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8002b2a:	231c      	movs	r3, #28
 8002b2c:	199b      	adds	r3, r3, r6
 8002b2e:	2208      	movs	r2, #8
 8002b30:	4694      	mov	ip, r2
 8002b32:	44bc      	add	ip, r7
 8002b34:	4463      	add	r3, ip
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f001 fff5 	bl	8004b28 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8002b3e:	193b      	adds	r3, r7, r4
 8002b40:	2000      	movs	r0, #0
 8002b42:	5e18      	ldrsh	r0, [r3, r0]
 8002b44:	197b      	adds	r3, r7, r5
 8002b46:	2200      	movs	r2, #0
 8002b48:	5e9b      	ldrsh	r3, [r3, r2]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	0019      	movs	r1, r3
 8002b4e:	f001 ff19 	bl	8004984 <UG_PutString>
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b005      	add	sp, #20
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b5a <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	0002      	movs	r2, r0
 8002b62:	1dfb      	adds	r3, r7, #7
 8002b64:	701a      	strb	r2, [r3, #0]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <LCD_setPower+0x18>
 8002b6e:	2229      	movs	r2, #41	; 0x29
 8002b70:	e000      	b.n	8002b74 <LCD_setPower+0x1a>
 8002b72:	2228      	movs	r2, #40	; 0x28
 8002b74:	210c      	movs	r1, #12
 8002b76:	187b      	adds	r3, r7, r1
 8002b78:	701a      	strb	r2, [r3, #0]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8002b7a:	187b      	adds	r3, r7, r1
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff fc5a 	bl	8002438 <LCD_WriteCommand>
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b004      	add	sp, #16
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <LCD_Update>:

static void LCD_Update(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8002b90:	2100      	movs	r1, #0
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7ff fbbc 	bl	8002310 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8002ba6:	4b2a      	ldr	r3, [pc, #168]	; (8002c50 <LCD_init+0xb0>)
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	0292      	lsls	r2, r2, #10
 8002bac:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f003 fe1e 	bl	80067f0 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <LCD_init+0xb0>)
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8002bba:	20c8      	movs	r0, #200	; 0xc8
 8002bbc:	f003 fe18 	bl	80067f0 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8002bc0:	4a24      	ldr	r2, [pc, #144]	; (8002c54 <LCD_init+0xb4>)
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <LCD_init+0xb8>)
 8002bc4:	0011      	movs	r1, r2
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f001 fbfc 	bl	80043c4 <UG_Init>
#ifndef LCD_LOCAL_FB
//  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8002bcc:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <LCD_init+0xbc>)
 8002bce:	0019      	movs	r1, r3
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f003 fadd 	bl	8006190 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8002bd6:	4b22      	ldr	r3, [pc, #136]	; (8002c60 <LCD_init+0xc0>)
 8002bd8:	0019      	movs	r1, r3
 8002bda:	2002      	movs	r0, #2
 8002bdc:	f003 fad8 	bl	8006190 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <LCD_init+0xc4>)
 8002be2:	0019      	movs	r1, r3
 8002be4:	2003      	movs	r0, #3
 8002be6:	f003 fad3 	bl	8006190 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f001 ffae 	bl	8004b4c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f001 ffbf 	bl	8004b74 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8002bf6:	1dbb      	adds	r3, r7, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	801a      	strh	r2, [r3, #0]
 8002bfc:	e017      	b.n	8002c2e <LCD_init+0x8e>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8002bfe:	1dbb      	adds	r3, r7, #6
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <LCD_init+0xc8>)
 8002c06:	18d0      	adds	r0, r2, r3
 8002c08:	1dbb      	adds	r3, r7, #6
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <LCD_init+0xc8>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	0019      	movs	r1, r3
 8002c12:	f7ff fc11 	bl	8002438 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8002c16:	1dbb      	adds	r3, r7, #6
 8002c18:	881b      	ldrh	r3, [r3, #0]
 8002c1a:	4a13      	ldr	r2, [pc, #76]	; (8002c68 <LCD_init+0xc8>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	1dbb      	adds	r3, r7, #6
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	18d3      	adds	r3, r2, r3
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	1dbb      	adds	r3, r7, #6
 8002c2a:	3202      	adds	r2, #2
 8002c2c:	801a      	strh	r2, [r3, #0]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8002c2e:	1dbb      	adds	r3, r7, #6
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	2b4b      	cmp	r3, #75	; 0x4b
 8002c34:	d9e3      	bls.n	8002bfe <LCD_init+0x5e>
  }
//  UG_FillScreen(C_GOLD);               //  Clear screen
//  UG_FillScreen(C_WHITE);               //  Clear screen
    UG_FillScreen(C_BLACK);               //  Clear screen
 8002c36:	2000      	movs	r0, #0
 8002c38:	f001 fc76 	bl	8004528 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7ff ff8c 	bl	8002b5a <LCD_setPower>
  UG_Update();
 8002c42:	f003 facb 	bl	80061dc <UG_Update>
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	50000400 	.word	0x50000400
 8002c54:	20000004 	.word	0x20000004
 8002c58:	2000009c 	.word	0x2000009c
 8002c5c:	08002995 	.word	0x08002995
 8002c60:	0800291d 	.word	0x0800291d
 8002c64:	08002a27 	.word	0x08002a27
 8002c68:	0800b958 	.word	0x0800b958

08002c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c70:	f003 fd4e 	bl	8006710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c74:	f000 f840 	bl	8002cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c78:	f000 fa10 	bl	800309c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c7c:	f000 f9f0 	bl	8003060 <MX_DMA_Init>
  MX_ADC_Init();
 8002c80:	f000 f8be 	bl	8002e00 <MX_ADC_Init>
  MX_RTC_Init();
 8002c84:	f000 f920 	bl	8002ec8 <MX_RTC_Init>
  MX_SPI1_Init();
 8002c88:	f000 f982 	bl	8002f90 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002c8c:	f000 f9b8 	bl	8003000 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  measRequest = 1;
 8002c90:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <main+0x74>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
  LCD_init();
 8002c96:	f7ff ff83 	bl	8002ba0 <LCD_init>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002c9a:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <main+0x78>)
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f004 f948 	bl	8006f34 <HAL_ADCEx_Calibration_Start>
  InitHandsCoords();
 8002ca4:	f000 fb6c 	bl	8003380 <InitHandsCoords>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002ca8:	490f      	ldr	r1, [pc, #60]	; (8002ce8 <main+0x7c>)
 8002caa:	4b10      	ldr	r3, [pc, #64]	; (8002cec <main+0x80>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f005 fe66 	bl	8008980 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <main+0x84>)
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <main+0x80>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f005 ff6a 	bl	8008b94 <HAL_RTC_GetDate>
	  GetBatteryMeas(&measBat, &measRequest);
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <main+0x74>)
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <main+0x88>)
 8002cc4:	0011      	movs	r1, r2
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f000 fb1e 	bl	8003308 <GetBatteryMeas>
	  SetColor();
 8002ccc:	f000 fd34 	bl	8003738 <SetColor>
	  RefreshClock();
 8002cd0:	f000 fe32 	bl	8003938 <RefreshClock>
	  SetTimeDate();
 8002cd4:	f000 ffb0 	bl	8003c38 <SetTimeDate>
	  CheckRegularState();
 8002cd8:	f001 f8a8 	bl	8003e2c <CheckRegularState>
	  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002cdc:	e7e4      	b.n	8002ca8 <main+0x3c>
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	200006bc 	.word	0x200006bc
 8002ce4:	20000110 	.word	0x20000110
 8002ce8:	20000680 	.word	0x20000680
 8002cec:	2000016c 	.word	0x2000016c
 8002cf0:	20000694 	.word	0x20000694
 8002cf4:	200006b8 	.word	0x200006b8

08002cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b09b      	sub	sp, #108	; 0x6c
 8002cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cfe:	2434      	movs	r4, #52	; 0x34
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	0018      	movs	r0, r3
 8002d04:	2334      	movs	r3, #52	; 0x34
 8002d06:	001a      	movs	r2, r3
 8002d08:	2100      	movs	r1, #0
 8002d0a:	f007 f909 	bl	8009f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d0e:	2320      	movs	r3, #32
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	0018      	movs	r0, r3
 8002d14:	2314      	movs	r3, #20
 8002d16:	001a      	movs	r2, r3
 8002d18:	2100      	movs	r1, #0
 8002d1a:	f007 f901 	bl	8009f20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	0018      	movs	r0, r3
 8002d22:	231c      	movs	r3, #28
 8002d24:	001a      	movs	r2, r3
 8002d26:	2100      	movs	r1, #0
 8002d28:	f007 f8fa 	bl	8009f20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d2c:	4b31      	ldr	r3, [pc, #196]	; (8002df4 <SystemClock_Config+0xfc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <SystemClock_Config+0x100>)
 8002d32:	401a      	ands	r2, r3
 8002d34:	4b2f      	ldr	r3, [pc, #188]	; (8002df4 <SystemClock_Config+0xfc>)
 8002d36:	2180      	movs	r1, #128	; 0x80
 8002d38:	0109      	lsls	r1, r1, #4
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002d3e:	f004 fdeb 	bl	8007918 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002d42:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <SystemClock_Config+0x104>)
 8002d44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <SystemClock_Config+0x104>)
 8002d48:	492b      	ldr	r1, [pc, #172]	; (8002df8 <SystemClock_Config+0x100>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	651a      	str	r2, [r3, #80]	; 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002d4e:	193b      	adds	r3, r7, r4
 8002d50:	2206      	movs	r2, #6
 8002d52:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002d54:	193b      	adds	r3, r7, r4
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	0052      	lsls	r2, r2, #1
 8002d5a:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d5c:	0021      	movs	r1, r4
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	2201      	movs	r2, #1
 8002d62:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d64:	187b      	adds	r3, r7, r1
 8002d66:	2210      	movs	r2, #16
 8002d68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d70:	187b      	adds	r3, r7, r1
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	2280      	movs	r2, #128	; 0x80
 8002d7a:	02d2      	lsls	r2, r2, #11
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2280      	movs	r2, #128	; 0x80
 8002d82:	03d2      	lsls	r2, r2, #15
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f004 fdd3 	bl	8007934 <HAL_RCC_OscConfig>
 8002d8e:	1e03      	subs	r3, r0, #0
 8002d90:	d001      	beq.n	8002d96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d92:	f001 f8a3 	bl	8003edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d96:	2120      	movs	r1, #32
 8002d98:	187b      	adds	r3, r7, r1
 8002d9a:	220f      	movs	r2, #15
 8002d9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2203      	movs	r2, #3
 8002da2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	2101      	movs	r1, #1
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f005 f924 	bl	8008008 <HAL_RCC_ClockConfig>
 8002dc0:	1e03      	subs	r3, r0, #0
 8002dc2:	d001      	beq.n	8002dc8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002dc4:	f001 f88a 	bl	8003edc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8002dc8:	1d3b      	adds	r3, r7, #4
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	0252      	lsls	r2, r2, #9
 8002dda:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ddc:	1d3b      	adds	r3, r7, #4
 8002dde:	0018      	movs	r0, r3
 8002de0:	f005 fb36 	bl	8008450 <HAL_RCCEx_PeriphCLKConfig>
 8002de4:	1e03      	subs	r3, r0, #0
 8002de6:	d001      	beq.n	8002dec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002de8:	f001 f878 	bl	8003edc <Error_Handler>
  }
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b01b      	add	sp, #108	; 0x6c
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	40007000 	.word	0x40007000
 8002df8:	ffffe7ff 	.word	0xffffe7ff
 8002dfc:	40021000 	.word	0x40021000

08002e00 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e06:	003b      	movs	r3, r7
 8002e08:	0018      	movs	r0, r3
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f007 f886 	bl	8009f20 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e16:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <MX_ADC_Init+0xc4>)
 8002e18:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8002e1a:	4b29      	ldr	r3, [pc, #164]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8002e20:	4b27      	ldr	r3, [pc, #156]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e22:	2290      	movs	r2, #144	; 0x90
 8002e24:	0392      	lsls	r2, r2, #14
 8002e26:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e30:	2207      	movs	r2, #7
 8002e32:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002e34:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e3a:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8002e40:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e42:	2220      	movs	r2, #32
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e4a:	2221      	movs	r2, #33	; 0x21
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e56:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e58:	22c2      	movs	r2, #194	; 0xc2
 8002e5a:	32ff      	adds	r2, #255	; 0xff
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e60:	222c      	movs	r2, #44	; 0x2c
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e68:	2204      	movs	r2, #4
 8002e6a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002e6c:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	0152      	lsls	r2, r2, #5
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002e74:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002e86:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f003 fcd5 	bl	8006838 <HAL_ADC_Init>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d001      	beq.n	8002e96 <MX_ADC_Init+0x96>
  {
    Error_Handler();
 8002e92:	f001 f823 	bl	8003edc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002e96:	003b      	movs	r3, r7
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8002e9c:	003b      	movs	r3, r7
 8002e9e:	2280      	movs	r2, #128	; 0x80
 8002ea0:	0152      	lsls	r2, r2, #5
 8002ea2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002ea4:	003a      	movs	r2, r7
 8002ea6:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <MX_ADC_Init+0xc0>)
 8002ea8:	0011      	movs	r1, r2
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f003 ff34 	bl	8006d18 <HAL_ADC_ConfigChannel>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_ADC_Init+0xb8>
  {
    Error_Handler();
 8002eb4:	f001 f812 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	20000110 	.word	0x20000110
 8002ec4:	40012400 	.word	0x40012400

08002ec8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	2314      	movs	r3, #20
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f007 f822 	bl	8009f20 <memset>
  RTC_DateTypeDef sDate = {0};
 8002edc:	003b      	movs	r3, r7
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ee2:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <MX_RTC_Init+0xc4>)
 8002ee6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ee8:	4b27      	ldr	r3, [pc, #156]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002eee:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002ef0:	227f      	movs	r2, #127	; 0x7f
 8002ef2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002ef4:	4b24      	ldr	r3, [pc, #144]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002efa:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002f00:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002f14:	0018      	movs	r0, r3
 8002f16:	f005 fbd1 	bl	80086bc <HAL_RTC_Init>
 8002f1a:	1e03      	subs	r3, r0, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002f1e:	f000 ffdd 	bl	8003edc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 41;
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	2229      	movs	r2, #41	; 0x29
 8002f2c:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 55;
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	2237      	movs	r2, #55	; 0x37
 8002f32:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002f34:	1d3b      	adds	r3, r7, #4
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002f40:	1d39      	adds	r1, r7, #4
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	0018      	movs	r0, r3
 8002f48:	f005 fc56 	bl	80087f8 <HAL_RTC_SetTime>
 8002f4c:	1e03      	subs	r3, r0, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8002f50:	f000 ffc4 	bl	8003edc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002f54:	003b      	movs	r3, r7
 8002f56:	2202      	movs	r2, #2
 8002f58:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002f5a:	003b      	movs	r3, r7
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 10;
 8002f60:	003b      	movs	r3, r7
 8002f62:	220a      	movs	r2, #10
 8002f64:	709a      	strb	r2, [r3, #2]
  sDate.Year = 23;
 8002f66:	003b      	movs	r3, r7
 8002f68:	2217      	movs	r2, #23
 8002f6a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002f6c:	0039      	movs	r1, r7
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_RTC_Init+0xc0>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f005 fd60 	bl	8008a38 <HAL_RTC_SetDate>
 8002f78:	1e03      	subs	r3, r0, #0
 8002f7a:	d001      	beq.n	8002f80 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8002f7c:	f000 ffae 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b006      	add	sp, #24
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	2000016c 	.word	0x2000016c
 8002f8c:	40002800 	.word	0x40002800

08002f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002f94:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002f96:	4a19      	ldr	r2, [pc, #100]	; (8002ffc <MX_SPI1_Init+0x6c>)
 8002f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002f9c:	2282      	movs	r2, #130	; 0x82
 8002f9e:	0052      	lsls	r2, r2, #1
 8002fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002fa2:	4b15      	ldr	r3, [pc, #84]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	0212      	lsls	r2, r2, #8
 8002fa8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002fbc:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	0092      	lsls	r2, r2, #2
 8002fc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fde:	2207      	movs	r2, #7
 8002fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <MX_SPI1_Init+0x68>)
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f005 feb9 	bl	8008d5c <HAL_SPI_Init>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002fee:	f000 ff75 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000190 	.word	0x20000190
 8002ffc:	40013000 	.word	0x40013000

08003000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003006:	4a15      	ldr	r2, [pc, #84]	; (800305c <MX_USART1_UART_Init+0x5c>)
 8003008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_USART1_UART_Init+0x58>)
 800300c:	22e1      	movs	r2, #225	; 0xe1
 800300e:	0252      	lsls	r2, r2, #9
 8003010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003014:	2200      	movs	r2, #0
 8003016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_USART1_UART_Init+0x58>)
 800301a:	2200      	movs	r2, #0
 800301c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003026:	220c      	movs	r2, #12
 8003028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_USART1_UART_Init+0x58>)
 800302c:	2200      	movs	r2, #0
 800302e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003032:	2200      	movs	r2, #0
 8003034:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003038:	2200      	movs	r2, #0
 800303a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_USART1_UART_Init+0x58>)
 800303e:	2200      	movs	r2, #0
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <MX_USART1_UART_Init+0x58>)
 8003044:	0018      	movs	r0, r3
 8003046:	f006 faa9 	bl	800959c <HAL_UART_Init>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d001      	beq.n	8003052 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800304e:	f000 ff45 	bl	8003edc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003052:	46c0      	nop			; (mov r8, r8)
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	20000278 	.word	0x20000278
 800305c:	40013800 	.word	0x40013800

08003060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003066:	4b0c      	ldr	r3, [pc, #48]	; (8003098 <MX_DMA_Init+0x38>)
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <MX_DMA_Init+0x38>)
 800306c:	2101      	movs	r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <MX_DMA_Init+0x38>)
 8003074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003076:	2201      	movs	r2, #1
 8003078:	4013      	ands	r3, r2
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	200a      	movs	r0, #10
 8003084:	f004 f8a0 	bl	80071c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003088:	200a      	movs	r0, #10
 800308a:	f004 f8b2 	bl	80071f2 <HAL_NVIC_EnableIRQ>

}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b002      	add	sp, #8
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	40021000 	.word	0x40021000

0800309c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a2:	240c      	movs	r4, #12
 80030a4:	193b      	adds	r3, r7, r4
 80030a6:	0018      	movs	r0, r3
 80030a8:	2314      	movs	r3, #20
 80030aa:	001a      	movs	r2, r3
 80030ac:	2100      	movs	r1, #0
 80030ae:	f006 ff37 	bl	8009f20 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b2:	4b53      	ldr	r3, [pc, #332]	; (8003200 <MX_GPIO_Init+0x164>)
 80030b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b6:	4b52      	ldr	r3, [pc, #328]	; (8003200 <MX_GPIO_Init+0x164>)
 80030b8:	2104      	movs	r1, #4
 80030ba:	430a      	orrs	r2, r1
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80030be:	4b50      	ldr	r3, [pc, #320]	; (8003200 <MX_GPIO_Init+0x164>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <MX_GPIO_Init+0x164>)
 80030cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ce:	4b4c      	ldr	r3, [pc, #304]	; (8003200 <MX_GPIO_Init+0x164>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030d6:	4b4a      	ldr	r3, [pc, #296]	; (8003200 <MX_GPIO_Init+0x164>)
 80030d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030da:	2201      	movs	r2, #1
 80030dc:	4013      	ands	r3, r2
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <MX_GPIO_Init+0x164>)
 80030e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e6:	4b46      	ldr	r3, [pc, #280]	; (8003200 <MX_GPIO_Init+0x164>)
 80030e8:	2102      	movs	r1, #2
 80030ea:	430a      	orrs	r2, r1
 80030ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <MX_GPIO_Init+0x164>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	2202      	movs	r2, #2
 80030f4:	4013      	ands	r3, r2
 80030f6:	603b      	str	r3, [r7, #0]
 80030f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_BAT_EN_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 80030fa:	23a0      	movs	r3, #160	; 0xa0
 80030fc:	05db      	lsls	r3, r3, #23
 80030fe:	2201      	movs	r2, #1
 8003100:	2144      	movs	r1, #68	; 0x44
 8003102:	0018      	movs	r0, r3
 8003104:	f004 fbeb 	bl	80078de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8003108:	23a0      	movs	r3, #160	; 0xa0
 800310a:	05db      	lsls	r3, r3, #23
 800310c:	2200      	movs	r2, #0
 800310e:	2110      	movs	r1, #16
 8003110:	0018      	movs	r0, r3
 8003112:	f004 fbe4 	bl	80078de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8003116:	4b3b      	ldr	r3, [pc, #236]	; (8003204 <MX_GPIO_Init+0x168>)
 8003118:	2200      	movs	r2, #0
 800311a:	2103      	movs	r1, #3
 800311c:	0018      	movs	r0, r3
 800311e:	f004 fbde 	bl	80078de <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BAT_CH_Pin SW2_Pin */
  GPIO_InitStruct.Pin = BAT_CH_Pin|SW2_Pin;
 8003122:	193b      	adds	r3, r7, r4
 8003124:	4a38      	ldr	r2, [pc, #224]	; (8003208 <MX_GPIO_Init+0x16c>)
 8003126:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003128:	193b      	adds	r3, r7, r4
 800312a:	2200      	movs	r2, #0
 800312c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	193b      	adds	r3, r7, r4
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003134:	193a      	adds	r2, r7, r4
 8003136:	23a0      	movs	r3, #160	; 0xa0
 8003138:	05db      	lsls	r3, r3, #23
 800313a:	0011      	movs	r1, r2
 800313c:	0018      	movs	r0, r3
 800313e:	f004 fa3b 	bl	80075b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_BAT_EN_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = A_BAT_EN_Pin|LCD_BLK_Pin;
 8003142:	193b      	adds	r3, r7, r4
 8003144:	2244      	movs	r2, #68	; 0x44
 8003146:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003148:	193b      	adds	r3, r7, r4
 800314a:	2201      	movs	r2, #1
 800314c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314e:	193b      	adds	r3, r7, r4
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	193b      	adds	r3, r7, r4
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800315a:	193a      	adds	r2, r7, r4
 800315c:	23a0      	movs	r3, #160	; 0xa0
 800315e:	05db      	lsls	r3, r3, #23
 8003160:	0011      	movs	r1, r2
 8003162:	0018      	movs	r0, r3
 8003164:	f004 fa28 	bl	80075b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8003168:	193b      	adds	r3, r7, r4
 800316a:	2210      	movs	r2, #16
 800316c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316e:	193b      	adds	r3, r7, r4
 8003170:	2201      	movs	r2, #1
 8003172:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	193b      	adds	r3, r7, r4
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	193b      	adds	r3, r7, r4
 800317c:	2203      	movs	r2, #3
 800317e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8003180:	193a      	adds	r2, r7, r4
 8003182:	23a0      	movs	r3, #160	; 0xa0
 8003184:	05db      	lsls	r3, r3, #23
 8003186:	0011      	movs	r1, r2
 8003188:	0018      	movs	r0, r3
 800318a:	f004 fa15 	bl	80075b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800318e:	193b      	adds	r3, r7, r4
 8003190:	2201      	movs	r2, #1
 8003192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003194:	193b      	adds	r3, r7, r4
 8003196:	2201      	movs	r2, #1
 8003198:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	2203      	movs	r2, #3
 80031a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80031a6:	193b      	adds	r3, r7, r4
 80031a8:	4a16      	ldr	r2, [pc, #88]	; (8003204 <MX_GPIO_Init+0x168>)
 80031aa:	0019      	movs	r1, r3
 80031ac:	0010      	movs	r0, r2
 80031ae:	f004 fa03 	bl	80075b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	2202      	movs	r2, #2
 80031b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031b8:	193b      	adds	r3, r7, r4
 80031ba:	2201      	movs	r2, #1
 80031bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	193b      	adds	r3, r7, r4
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c4:	193b      	adds	r3, r7, r4
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80031ca:	193b      	adds	r3, r7, r4
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <MX_GPIO_Init+0x168>)
 80031ce:	0019      	movs	r1, r3
 80031d0:	0010      	movs	r0, r2
 80031d2:	f004 f9f1 	bl	80075b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 80031d6:	0021      	movs	r1, r4
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2208      	movs	r2, #8
 80031dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	2200      	movs	r2, #0
 80031e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	4a05      	ldr	r2, [pc, #20]	; (8003204 <MX_GPIO_Init+0x168>)
 80031ee:	0019      	movs	r1, r3
 80031f0:	0010      	movs	r0, r2
 80031f2:	f004 f9e1 	bl	80075b8 <HAL_GPIO_Init>

}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b009      	add	sp, #36	; 0x24
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40021000 	.word	0x40021000
 8003204:	50000400 	.word	0x50000400
 8003208:	00008002 	.word	0x00008002

0800320c <DrawHand>:

/* USER CODE BEGIN 4 */
void DrawHand(WATCH_HAND_T* h, uint16_t col)
{
 800320c:	b590      	push	{r4, r7, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	af02      	add	r7, sp, #8
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	000a      	movs	r2, r1
 8003216:	1cbb      	adds	r3, r7, #2
 8003218:	801a      	strh	r2, [r3, #0]
	UG_DrawLine(h->x1, h->y1, h->x2, h->y2, col);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	785b      	ldrb	r3, [r3, #1]
 800321e:	b218      	sxth	r0, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	78db      	ldrb	r3, [r3, #3]
 8003224:	b219      	sxth	r1, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	789b      	ldrb	r3, [r3, #2]
 800322a:	b21a      	sxth	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	791b      	ldrb	r3, [r3, #4]
 8003230:	b21c      	sxth	r4, r3
 8003232:	1cbb      	adds	r3, r7, #2
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	0023      	movs	r3, r4
 800323a:	f001 fa41 	bl	80046c0 <UG_DrawLine>
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	b003      	add	sp, #12
 8003244:	bd90      	pop	{r4, r7, pc}

08003246 <SetHandDisplay>:

void SetHandDisplay(WATCH_HAND_T* h, uint8_t pos, uint8_t cnt, uint16_t primCol, uint16_t secCol)
{
 8003246:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	000c      	movs	r4, r1
 8003250:	0010      	movs	r0, r2
 8003252:	0019      	movs	r1, r3
 8003254:	1cfb      	adds	r3, r7, #3
 8003256:	1c22      	adds	r2, r4, #0
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	1cbb      	adds	r3, r7, #2
 800325c:	1c02      	adds	r2, r0, #0
 800325e:	701a      	strb	r2, [r3, #0]
 8003260:	003b      	movs	r3, r7
 8003262:	1c0a      	adds	r2, r1, #0
 8003264:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=60; i>60-cnt; i--)
 8003266:	230f      	movs	r3, #15
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	223c      	movs	r2, #60	; 0x3c
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e03d      	b.n	80032ec <SetHandDisplay+0xa6>
	{
		uint16_t col = (pos+i) % 5 == 0 ? primCol : secCol;
 8003270:	1cfb      	adds	r3, r7, #3
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	230f      	movs	r3, #15
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	18d3      	adds	r3, r2, r3
 800327c:	2105      	movs	r1, #5
 800327e:	0018      	movs	r0, r3
 8003280:	f7fd f8bc 	bl	80003fc <__aeabi_idivmod>
 8003284:	1e0b      	subs	r3, r1, #0
 8003286:	d102      	bne.n	800328e <SetHandDisplay+0x48>
 8003288:	003b      	movs	r3, r7
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	e004      	b.n	8003298 <SetHandDisplay+0x52>
 800328e:	2320      	movs	r3, #32
 8003290:	2208      	movs	r2, #8
 8003292:	189b      	adds	r3, r3, r2
 8003294:	19db      	adds	r3, r3, r7
 8003296:	881b      	ldrh	r3, [r3, #0]
 8003298:	260c      	movs	r6, #12
 800329a:	19ba      	adds	r2, r7, r6
 800329c:	8013      	strh	r3, [r2, #0]
		DrawHand(&h[(pos+i)%60], LCD_ColorOpacity(col, (60-i)>>1));
 800329e:	1cfb      	adds	r3, r7, #3
 80032a0:	781a      	ldrb	r2, [r3, #0]
 80032a2:	250f      	movs	r5, #15
 80032a4:	197b      	adds	r3, r7, r5
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	18d3      	adds	r3, r2, r3
 80032aa:	213c      	movs	r1, #60	; 0x3c
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fd f8a5 	bl	80003fc <__aeabi_idivmod>
 80032b2:	000b      	movs	r3, r1
 80032b4:	001a      	movs	r2, r3
 80032b6:	0013      	movs	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	18d4      	adds	r4, r2, r3
 80032c0:	197b      	adds	r3, r7, r5
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	223c      	movs	r2, #60	; 0x3c
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	105b      	asrs	r3, r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	19bb      	adds	r3, r7, r6
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	0011      	movs	r1, r2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7ff f980 	bl	80025d8 <LCD_ColorOpacity>
 80032d8:	0003      	movs	r3, r0
 80032da:	0019      	movs	r1, r3
 80032dc:	0020      	movs	r0, r4
 80032de:	f7ff ff95 	bl	800320c <DrawHand>
	for(uint8_t i=60; i>60-cnt; i--)
 80032e2:	197b      	adds	r3, r7, r5
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	197b      	adds	r3, r7, r5
 80032e8:	3a01      	subs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	1cbb      	adds	r3, r7, #2
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	213c      	movs	r1, #60	; 0x3c
 80032f8:	1acb      	subs	r3, r1, r3
 80032fa:	429a      	cmp	r2, r3
 80032fc:	dcb8      	bgt.n	8003270 <SetHandDisplay+0x2a>
	}
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46c0      	nop			; (mov r8, r8)
 8003302:	46bd      	mov	sp, r7
 8003304:	b005      	add	sp, #20
 8003306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003308 <GetBatteryMeas>:

void GetBatteryMeas(uint32_t * meas, uint8_t* cond)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
	if (!*cond)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d029      	beq.n	800336e <GetBatteryMeas+0x66>
	{
		return;
	}
	HAL_GPIO_WritePin(A_BAT_EN_GPIO_Port, A_BAT_EN_Pin, 1);
 800331a:	23a0      	movs	r3, #160	; 0xa0
 800331c:	05db      	lsls	r3, r3, #23
 800331e:	2201      	movs	r2, #1
 8003320:	2104      	movs	r1, #4
 8003322:	0018      	movs	r0, r3
 8003324:	f004 fadb 	bl	80078de <HAL_GPIO_WritePin>
	HAL_Delay(1);	//to avoid adc measure during transient state;
 8003328:	2001      	movs	r0, #1
 800332a:	f003 fa61 	bl	80067f0 <HAL_Delay>
	HAL_ADC_Start(&hadc);
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <GetBatteryMeas+0x70>)
 8003330:	0018      	movs	r0, r3
 8003332:	f003 fbf5 	bl	8006b20 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8003336:	2301      	movs	r3, #1
 8003338:	425a      	negs	r2, r3
 800333a:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <GetBatteryMeas+0x70>)
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f003 fc42 	bl	8006bc8 <HAL_ADC_PollForConversion>
	*meas = HAL_ADC_GetValue(&hadc) * VREF * ADC_V_DIV / ADC_DIV;
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <GetBatteryMeas+0x70>)
 8003346:	0018      	movs	r0, r3
 8003348:	f003 fcda 	bl	8006d00 <HAL_ADC_GetValue>
 800334c:	0003      	movs	r3, r0
 800334e:	4a0b      	ldr	r2, [pc, #44]	; (800337c <GetBatteryMeas+0x74>)
 8003350:	4353      	muls	r3, r2
 8003352:	0b1a      	lsrs	r2, r3, #12
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(A_BAT_EN_GPIO_Port, A_BAT_EN_Pin, 0);
 8003358:	23a0      	movs	r3, #160	; 0xa0
 800335a:	05db      	lsls	r3, r3, #23
 800335c:	2200      	movs	r2, #0
 800335e:	2104      	movs	r1, #4
 8003360:	0018      	movs	r0, r3
 8003362:	f004 fabc 	bl	80078de <HAL_GPIO_WritePin>
	*cond = 0;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
	return;
 800336c:	e000      	b.n	8003370 <GetBatteryMeas+0x68>
		return;
 800336e:	46c0      	nop			; (mov r8, r8)
}
 8003370:	46bd      	mov	sp, r7
 8003372:	b002      	add	sp, #8
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	20000110 	.word	0x20000110
 800337c:	000019c8 	.word	0x000019c8

08003380 <InitHandsCoords>:

void InitHandsCoords()
{
 8003380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
	uint8_t i = 0, j = 0, z = 0;
 8003386:	1d7b      	adds	r3, r7, #5
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
 800338c:	1dfb      	adds	r3, r7, #7
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	1dbb      	adds	r3, r7, #6
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
	for(z=0; z<3; z++)
 8003398:	1dbb      	adds	r3, r7, #6
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e179      	b.n	8003694 <InitHandsCoords+0x314>
	{
		for(j=0; j<60; j++)
 80033a0:	1dfb      	adds	r3, r7, #7
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e16b      	b.n	8003680 <InitHandsCoords+0x300>
		{
			i = ((j % 5) == 0) ? 0 : 10;
 80033a8:	1dfb      	adds	r3, r7, #7
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2105      	movs	r1, #5
 80033ae:	0018      	movs	r0, r3
 80033b0:	f7fc ff3a 	bl	8000228 <__aeabi_uidivmod>
 80033b4:	000b      	movs	r3, r1
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <InitHandsCoords+0x40>
 80033bc:	2200      	movs	r2, #0
 80033be:	e000      	b.n	80033c2 <InitHandsCoords+0x42>
 80033c0:	220a      	movs	r2, #10
 80033c2:	1d7b      	adds	r3, r7, #5
 80033c4:	701a      	strb	r2, [r3, #0]
			watchHand[z][j].x1 = 120 + (70+z*25)*sin((j%60)*2*M_PI/60);
 80033c6:	1dbb      	adds	r3, r7, #6
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	0013      	movs	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	009a      	lsls	r2, r3, #2
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	3346      	adds	r3, #70	; 0x46
 80033d6:	0018      	movs	r0, r3
 80033d8:	f7fe fefe 	bl	80021d8 <__aeabi_i2d>
 80033dc:	0004      	movs	r4, r0
 80033de:	000d      	movs	r5, r1
 80033e0:	1dfb      	adds	r3, r7, #7
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	213c      	movs	r1, #60	; 0x3c
 80033e6:	0018      	movs	r0, r3
 80033e8:	f7fc ff1e 	bl	8000228 <__aeabi_uidivmod>
 80033ec:	000b      	movs	r3, r1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	0018      	movs	r0, r3
 80033f4:	f7fe fef0 	bl	80021d8 <__aeabi_i2d>
 80033f8:	4aab      	ldr	r2, [pc, #684]	; (80036a8 <InitHandsCoords+0x328>)
 80033fa:	4bac      	ldr	r3, [pc, #688]	; (80036ac <InitHandsCoords+0x32c>)
 80033fc:	f7fe f8b8 	bl	8001570 <__aeabi_dmul>
 8003400:	0002      	movs	r2, r0
 8003402:	000b      	movs	r3, r1
 8003404:	0010      	movs	r0, r2
 8003406:	0019      	movs	r1, r3
 8003408:	2200      	movs	r2, #0
 800340a:	4ba9      	ldr	r3, [pc, #676]	; (80036b0 <InitHandsCoords+0x330>)
 800340c:	f7fd fcae 	bl	8000d6c <__aeabi_ddiv>
 8003410:	0002      	movs	r2, r0
 8003412:	000b      	movs	r3, r1
 8003414:	0010      	movs	r0, r2
 8003416:	0019      	movs	r1, r3
 8003418:	f007 fa34 	bl	800a884 <sin>
 800341c:	0002      	movs	r2, r0
 800341e:	000b      	movs	r3, r1
 8003420:	0020      	movs	r0, r4
 8003422:	0029      	movs	r1, r5
 8003424:	f7fe f8a4 	bl	8001570 <__aeabi_dmul>
 8003428:	0002      	movs	r2, r0
 800342a:	000b      	movs	r3, r1
 800342c:	0010      	movs	r0, r2
 800342e:	0019      	movs	r1, r3
 8003430:	2200      	movs	r2, #0
 8003432:	4ba0      	ldr	r3, [pc, #640]	; (80036b4 <InitHandsCoords+0x334>)
 8003434:	f7fd f95e 	bl	80006f4 <__aeabi_dadd>
 8003438:	0002      	movs	r2, r0
 800343a:	000b      	movs	r3, r1
 800343c:	1db9      	adds	r1, r7, #6
 800343e:	780c      	ldrb	r4, [r1, #0]
 8003440:	1df9      	adds	r1, r7, #7
 8003442:	780d      	ldrb	r5, [r1, #0]
 8003444:	0010      	movs	r0, r2
 8003446:	0019      	movs	r1, r3
 8003448:	f7fd f86a 	bl	8000520 <__aeabi_d2uiz>
 800344c:	0003      	movs	r3, r0
 800344e:	b2de      	uxtb	r6, r3
 8003450:	4899      	ldr	r0, [pc, #612]	; (80036b8 <InitHandsCoords+0x338>)
 8003452:	0029      	movs	r1, r5
 8003454:	0089      	lsls	r1, r1, #2
 8003456:	1949      	adds	r1, r1, r5
 8003458:	0023      	movs	r3, r4
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	191b      	adds	r3, r3, r4
 800345e:	011a      	lsls	r2, r3, #4
 8003460:	1ad2      	subs	r2, r2, r3
 8003462:	0093      	lsls	r3, r2, #2
 8003464:	001a      	movs	r2, r3
 8003466:	188b      	adds	r3, r1, r2
 8003468:	18c3      	adds	r3, r0, r3
 800346a:	3301      	adds	r3, #1
 800346c:	1c32      	adds	r2, r6, #0
 800346e:	701a      	strb	r2, [r3, #0]
			watchHand[z][j].y1 = 120 - (70+z*25)*cos((j%60)*2*M_PI/60);
 8003470:	1dbb      	adds	r3, r7, #6
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	0013      	movs	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	189b      	adds	r3, r3, r2
 800347a:	009a      	lsls	r2, r3, #2
 800347c:	189b      	adds	r3, r3, r2
 800347e:	3346      	adds	r3, #70	; 0x46
 8003480:	0018      	movs	r0, r3
 8003482:	f7fe fea9 	bl	80021d8 <__aeabi_i2d>
 8003486:	0004      	movs	r4, r0
 8003488:	000d      	movs	r5, r1
 800348a:	1dfb      	adds	r3, r7, #7
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	213c      	movs	r1, #60	; 0x3c
 8003490:	0018      	movs	r0, r3
 8003492:	f7fc fec9 	bl	8000228 <__aeabi_uidivmod>
 8003496:	000b      	movs	r3, r1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	0018      	movs	r0, r3
 800349e:	f7fe fe9b 	bl	80021d8 <__aeabi_i2d>
 80034a2:	4a81      	ldr	r2, [pc, #516]	; (80036a8 <InitHandsCoords+0x328>)
 80034a4:	4b81      	ldr	r3, [pc, #516]	; (80036ac <InitHandsCoords+0x32c>)
 80034a6:	f7fe f863 	bl	8001570 <__aeabi_dmul>
 80034aa:	0002      	movs	r2, r0
 80034ac:	000b      	movs	r3, r1
 80034ae:	0010      	movs	r0, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	2200      	movs	r2, #0
 80034b4:	4b7e      	ldr	r3, [pc, #504]	; (80036b0 <InitHandsCoords+0x330>)
 80034b6:	f7fd fc59 	bl	8000d6c <__aeabi_ddiv>
 80034ba:	0002      	movs	r2, r0
 80034bc:	000b      	movs	r3, r1
 80034be:	0010      	movs	r0, r2
 80034c0:	0019      	movs	r1, r3
 80034c2:	f007 f99d 	bl	800a800 <cos>
 80034c6:	0002      	movs	r2, r0
 80034c8:	000b      	movs	r3, r1
 80034ca:	0020      	movs	r0, r4
 80034cc:	0029      	movs	r1, r5
 80034ce:	f7fe f84f 	bl	8001570 <__aeabi_dmul>
 80034d2:	0002      	movs	r2, r0
 80034d4:	000b      	movs	r3, r1
 80034d6:	2000      	movs	r0, #0
 80034d8:	4976      	ldr	r1, [pc, #472]	; (80036b4 <InitHandsCoords+0x334>)
 80034da:	f7fe fab5 	bl	8001a48 <__aeabi_dsub>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	1db9      	adds	r1, r7, #6
 80034e4:	780c      	ldrb	r4, [r1, #0]
 80034e6:	1df9      	adds	r1, r7, #7
 80034e8:	780d      	ldrb	r5, [r1, #0]
 80034ea:	0010      	movs	r0, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	f7fd f817 	bl	8000520 <__aeabi_d2uiz>
 80034f2:	0003      	movs	r3, r0
 80034f4:	b2de      	uxtb	r6, r3
 80034f6:	4870      	ldr	r0, [pc, #448]	; (80036b8 <InitHandsCoords+0x338>)
 80034f8:	0029      	movs	r1, r5
 80034fa:	0089      	lsls	r1, r1, #2
 80034fc:	1949      	adds	r1, r1, r5
 80034fe:	0023      	movs	r3, r4
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	191b      	adds	r3, r3, r4
 8003504:	011a      	lsls	r2, r3, #4
 8003506:	1ad2      	subs	r2, r2, r3
 8003508:	0093      	lsls	r3, r2, #2
 800350a:	001a      	movs	r2, r3
 800350c:	188b      	adds	r3, r1, r2
 800350e:	18c3      	adds	r3, r0, r3
 8003510:	3303      	adds	r3, #3
 8003512:	1c32      	adds	r2, r6, #0
 8003514:	701a      	strb	r2, [r3, #0]
			watchHand[z][j].x2 = 120 + (50+i+z*25)*sin((j%60)*2*M_PI/60);
 8003516:	1d7b      	adds	r3, r7, #5
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	3332      	adds	r3, #50	; 0x32
 800351c:	0019      	movs	r1, r3
 800351e:	1dbb      	adds	r3, r7, #6
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	0013      	movs	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	189b      	adds	r3, r3, r2
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	189b      	adds	r3, r3, r2
 800352c:	18cb      	adds	r3, r1, r3
 800352e:	0018      	movs	r0, r3
 8003530:	f7fe fe52 	bl	80021d8 <__aeabi_i2d>
 8003534:	0004      	movs	r4, r0
 8003536:	000d      	movs	r5, r1
 8003538:	1dfb      	adds	r3, r7, #7
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	213c      	movs	r1, #60	; 0x3c
 800353e:	0018      	movs	r0, r3
 8003540:	f7fc fe72 	bl	8000228 <__aeabi_uidivmod>
 8003544:	000b      	movs	r3, r1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	0018      	movs	r0, r3
 800354c:	f7fe fe44 	bl	80021d8 <__aeabi_i2d>
 8003550:	4a55      	ldr	r2, [pc, #340]	; (80036a8 <InitHandsCoords+0x328>)
 8003552:	4b56      	ldr	r3, [pc, #344]	; (80036ac <InitHandsCoords+0x32c>)
 8003554:	f7fe f80c 	bl	8001570 <__aeabi_dmul>
 8003558:	0002      	movs	r2, r0
 800355a:	000b      	movs	r3, r1
 800355c:	0010      	movs	r0, r2
 800355e:	0019      	movs	r1, r3
 8003560:	2200      	movs	r2, #0
 8003562:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <InitHandsCoords+0x330>)
 8003564:	f7fd fc02 	bl	8000d6c <__aeabi_ddiv>
 8003568:	0002      	movs	r2, r0
 800356a:	000b      	movs	r3, r1
 800356c:	0010      	movs	r0, r2
 800356e:	0019      	movs	r1, r3
 8003570:	f007 f988 	bl	800a884 <sin>
 8003574:	0002      	movs	r2, r0
 8003576:	000b      	movs	r3, r1
 8003578:	0020      	movs	r0, r4
 800357a:	0029      	movs	r1, r5
 800357c:	f7fd fff8 	bl	8001570 <__aeabi_dmul>
 8003580:	0002      	movs	r2, r0
 8003582:	000b      	movs	r3, r1
 8003584:	0010      	movs	r0, r2
 8003586:	0019      	movs	r1, r3
 8003588:	2200      	movs	r2, #0
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <InitHandsCoords+0x334>)
 800358c:	f7fd f8b2 	bl	80006f4 <__aeabi_dadd>
 8003590:	0002      	movs	r2, r0
 8003592:	000b      	movs	r3, r1
 8003594:	1db9      	adds	r1, r7, #6
 8003596:	780c      	ldrb	r4, [r1, #0]
 8003598:	1df9      	adds	r1, r7, #7
 800359a:	780d      	ldrb	r5, [r1, #0]
 800359c:	0010      	movs	r0, r2
 800359e:	0019      	movs	r1, r3
 80035a0:	f7fc ffbe 	bl	8000520 <__aeabi_d2uiz>
 80035a4:	0003      	movs	r3, r0
 80035a6:	b2de      	uxtb	r6, r3
 80035a8:	4843      	ldr	r0, [pc, #268]	; (80036b8 <InitHandsCoords+0x338>)
 80035aa:	0029      	movs	r1, r5
 80035ac:	0089      	lsls	r1, r1, #2
 80035ae:	1949      	adds	r1, r1, r5
 80035b0:	0023      	movs	r3, r4
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	191b      	adds	r3, r3, r4
 80035b6:	011a      	lsls	r2, r3, #4
 80035b8:	1ad2      	subs	r2, r2, r3
 80035ba:	0093      	lsls	r3, r2, #2
 80035bc:	001a      	movs	r2, r3
 80035be:	188b      	adds	r3, r1, r2
 80035c0:	18c3      	adds	r3, r0, r3
 80035c2:	3302      	adds	r3, #2
 80035c4:	1c32      	adds	r2, r6, #0
 80035c6:	701a      	strb	r2, [r3, #0]
			watchHand[z][j].y2 = 120 - (50+i+z*25)*cos((j%60)*2*M_PI/60);
 80035c8:	1d7b      	adds	r3, r7, #5
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	3332      	adds	r3, #50	; 0x32
 80035ce:	0019      	movs	r1, r3
 80035d0:	1dbb      	adds	r3, r7, #6
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	0013      	movs	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	189b      	adds	r3, r3, r2
 80035da:	009a      	lsls	r2, r3, #2
 80035dc:	189b      	adds	r3, r3, r2
 80035de:	18cb      	adds	r3, r1, r3
 80035e0:	0018      	movs	r0, r3
 80035e2:	f7fe fdf9 	bl	80021d8 <__aeabi_i2d>
 80035e6:	0004      	movs	r4, r0
 80035e8:	000d      	movs	r5, r1
 80035ea:	1dfb      	adds	r3, r7, #7
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	213c      	movs	r1, #60	; 0x3c
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fc fe19 	bl	8000228 <__aeabi_uidivmod>
 80035f6:	000b      	movs	r3, r1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7fe fdeb 	bl	80021d8 <__aeabi_i2d>
 8003602:	4a29      	ldr	r2, [pc, #164]	; (80036a8 <InitHandsCoords+0x328>)
 8003604:	4b29      	ldr	r3, [pc, #164]	; (80036ac <InitHandsCoords+0x32c>)
 8003606:	f7fd ffb3 	bl	8001570 <__aeabi_dmul>
 800360a:	0002      	movs	r2, r0
 800360c:	000b      	movs	r3, r1
 800360e:	0010      	movs	r0, r2
 8003610:	0019      	movs	r1, r3
 8003612:	2200      	movs	r2, #0
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <InitHandsCoords+0x330>)
 8003616:	f7fd fba9 	bl	8000d6c <__aeabi_ddiv>
 800361a:	0002      	movs	r2, r0
 800361c:	000b      	movs	r3, r1
 800361e:	0010      	movs	r0, r2
 8003620:	0019      	movs	r1, r3
 8003622:	f007 f8ed 	bl	800a800 <cos>
 8003626:	0002      	movs	r2, r0
 8003628:	000b      	movs	r3, r1
 800362a:	0020      	movs	r0, r4
 800362c:	0029      	movs	r1, r5
 800362e:	f7fd ff9f 	bl	8001570 <__aeabi_dmul>
 8003632:	0002      	movs	r2, r0
 8003634:	000b      	movs	r3, r1
 8003636:	2000      	movs	r0, #0
 8003638:	491e      	ldr	r1, [pc, #120]	; (80036b4 <InitHandsCoords+0x334>)
 800363a:	f7fe fa05 	bl	8001a48 <__aeabi_dsub>
 800363e:	0002      	movs	r2, r0
 8003640:	000b      	movs	r3, r1
 8003642:	1db9      	adds	r1, r7, #6
 8003644:	780c      	ldrb	r4, [r1, #0]
 8003646:	1df9      	adds	r1, r7, #7
 8003648:	780d      	ldrb	r5, [r1, #0]
 800364a:	0010      	movs	r0, r2
 800364c:	0019      	movs	r1, r3
 800364e:	f7fc ff67 	bl	8000520 <__aeabi_d2uiz>
 8003652:	0003      	movs	r3, r0
 8003654:	b2de      	uxtb	r6, r3
 8003656:	4818      	ldr	r0, [pc, #96]	; (80036b8 <InitHandsCoords+0x338>)
 8003658:	0029      	movs	r1, r5
 800365a:	0089      	lsls	r1, r1, #2
 800365c:	1949      	adds	r1, r1, r5
 800365e:	0023      	movs	r3, r4
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	191b      	adds	r3, r3, r4
 8003664:	011a      	lsls	r2, r3, #4
 8003666:	1ad2      	subs	r2, r2, r3
 8003668:	0093      	lsls	r3, r2, #2
 800366a:	001a      	movs	r2, r3
 800366c:	188b      	adds	r3, r1, r2
 800366e:	18c3      	adds	r3, r0, r3
 8003670:	3304      	adds	r3, #4
 8003672:	1c32      	adds	r2, r6, #0
 8003674:	701a      	strb	r2, [r3, #0]
		for(j=0; j<60; j++)
 8003676:	1dfb      	adds	r3, r7, #7
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	1dfb      	adds	r3, r7, #7
 800367c:	3201      	adds	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b3b      	cmp	r3, #59	; 0x3b
 8003686:	d800      	bhi.n	800368a <InitHandsCoords+0x30a>
 8003688:	e68e      	b.n	80033a8 <InitHandsCoords+0x28>
	for(z=0; z<3; z++)
 800368a:	1dbb      	adds	r3, r7, #6
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	1dbb      	adds	r3, r7, #6
 8003690:	3201      	adds	r2, #1
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	1dbb      	adds	r3, r7, #6
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d800      	bhi.n	800369e <InitHandsCoords+0x31e>
 800369c:	e680      	b.n	80033a0 <InitHandsCoords+0x20>
		}
	}
}
 800369e:	46c0      	nop			; (mov r8, r8)
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b003      	add	sp, #12
 80036a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036a8:	54442d18 	.word	0x54442d18
 80036ac:	400921fb 	.word	0x400921fb
 80036b0:	404e0000 	.word	0x404e0000
 80036b4:	405e0000 	.word	0x405e0000
 80036b8:	200002fc 	.word	0x200002fc

080036bc <ChangeColor>:

void ChangeColor(UG_COLOR s_pri, UG_COLOR s_sec, UG_COLOR m_pri, UG_COLOR m_sec, UG_COLOR h_pri, UG_COLOR h_sec, UG_COLOR t_dig, UG_COLOR d_dig)
{
 80036bc:	b5b0      	push	{r4, r5, r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	0005      	movs	r5, r0
 80036c4:	000c      	movs	r4, r1
 80036c6:	0010      	movs	r0, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	1dbb      	adds	r3, r7, #6
 80036cc:	1c2a      	adds	r2, r5, #0
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c22      	adds	r2, r4, #0
 80036d4:	801a      	strh	r2, [r3, #0]
 80036d6:	1cbb      	adds	r3, r7, #2
 80036d8:	1c02      	adds	r2, r0, #0
 80036da:	801a      	strh	r2, [r3, #0]
 80036dc:	003b      	movs	r3, r7
 80036de:	1c0a      	adds	r2, r1, #0
 80036e0:	801a      	strh	r2, [r3, #0]
	color.s_pri = s_pri;
 80036e2:	4b14      	ldr	r3, [pc, #80]	; (8003734 <ChangeColor+0x78>)
 80036e4:	1dba      	adds	r2, r7, #6
 80036e6:	8812      	ldrh	r2, [r2, #0]
 80036e8:	801a      	strh	r2, [r3, #0]
	color.s_sec = s_sec;
 80036ea:	4b12      	ldr	r3, [pc, #72]	; (8003734 <ChangeColor+0x78>)
 80036ec:	1d3a      	adds	r2, r7, #4
 80036ee:	8812      	ldrh	r2, [r2, #0]
 80036f0:	805a      	strh	r2, [r3, #2]
	color.m_pri = m_pri;
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <ChangeColor+0x78>)
 80036f4:	1cba      	adds	r2, r7, #2
 80036f6:	8812      	ldrh	r2, [r2, #0]
 80036f8:	809a      	strh	r2, [r3, #4]
	color.m_sec = m_sec;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <ChangeColor+0x78>)
 80036fc:	003a      	movs	r2, r7
 80036fe:	8812      	ldrh	r2, [r2, #0]
 8003700:	80da      	strh	r2, [r3, #6]
	color.h_pri = h_pri;
 8003702:	4a0c      	ldr	r2, [pc, #48]	; (8003734 <ChangeColor+0x78>)
 8003704:	2318      	movs	r3, #24
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	8113      	strh	r3, [r2, #8]
	color.h_sec = h_sec;
 800370c:	4b09      	ldr	r3, [pc, #36]	; (8003734 <ChangeColor+0x78>)
 800370e:	221c      	movs	r2, #28
 8003710:	18ba      	adds	r2, r7, r2
 8003712:	8812      	ldrh	r2, [r2, #0]
 8003714:	815a      	strh	r2, [r3, #10]
	color.t_dig = t_dig;
 8003716:	4b07      	ldr	r3, [pc, #28]	; (8003734 <ChangeColor+0x78>)
 8003718:	2220      	movs	r2, #32
 800371a:	18ba      	adds	r2, r7, r2
 800371c:	8812      	ldrh	r2, [r2, #0]
 800371e:	819a      	strh	r2, [r3, #12]
	color.d_dig = d_dig;
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <ChangeColor+0x78>)
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	18ba      	adds	r2, r7, r2
 8003726:	8812      	ldrh	r2, [r2, #0]
 8003728:	81da      	strh	r2, [r3, #14]
}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	46bd      	mov	sp, r7
 800372e:	b002      	add	sp, #8
 8003730:	bdb0      	pop	{r4, r5, r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	20000698 	.word	0x20000698

08003738 <SetColor>:

void SetColor()
{
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b085      	sub	sp, #20
 800373c:	af04      	add	r7, sp, #16
	switch (mode)
 800373e:	4b5e      	ldr	r3, [pc, #376]	; (80038b8 <SetColor+0x180>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b0a      	cmp	r3, #10
 8003744:	d900      	bls.n	8003748 <SetColor+0x10>
 8003746:	e0b3      	b.n	80038b0 <SetColor+0x178>
 8003748:	009a      	lsls	r2, r3, #2
 800374a:	4b5c      	ldr	r3, [pc, #368]	; (80038bc <SetColor+0x184>)
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	469f      	mov	pc, r3
	{
									   //sec_pri |sec_sec |min_pri |min_sec |hour_pri|hour_sec|time_dig|date_dig
		case regular:        ChangeColor(C_WHITE, C_BLUE,  C_WHITE, C_WHITE, C_WHITE, C_BLUE,  C_WHITE, C_WHITE); break;
 8003752:	495b      	ldr	r1, [pc, #364]	; (80038c0 <SetColor+0x188>)
 8003754:	4a5a      	ldr	r2, [pc, #360]	; (80038c0 <SetColor+0x188>)
 8003756:	485a      	ldr	r0, [pc, #360]	; (80038c0 <SetColor+0x188>)
 8003758:	4b59      	ldr	r3, [pc, #356]	; (80038c0 <SetColor+0x188>)
 800375a:	9303      	str	r3, [sp, #12]
 800375c:	4b58      	ldr	r3, [pc, #352]	; (80038c0 <SetColor+0x188>)
 800375e:	9302      	str	r3, [sp, #8]
 8003760:	231f      	movs	r3, #31
 8003762:	9301      	str	r3, [sp, #4]
 8003764:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <SetColor+0x188>)
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	000b      	movs	r3, r1
 800376a:	211f      	movs	r1, #31
 800376c:	f7ff ffa6 	bl	80036bc <ChangeColor>
 8003770:	e09e      	b.n	80038b0 <SetColor+0x178>
		case reg_bat_low:    ChangeColor(C_WHITE, C_ORANGE,C_WHITE, C_WHITE, C_WHITE, C_ORANGE,C_WHITE, C_WHITE); break;
 8003772:	4c53      	ldr	r4, [pc, #332]	; (80038c0 <SetColor+0x188>)
 8003774:	4a52      	ldr	r2, [pc, #328]	; (80038c0 <SetColor+0x188>)
 8003776:	4953      	ldr	r1, [pc, #332]	; (80038c4 <SetColor+0x18c>)
 8003778:	4851      	ldr	r0, [pc, #324]	; (80038c0 <SetColor+0x188>)
 800377a:	4b51      	ldr	r3, [pc, #324]	; (80038c0 <SetColor+0x188>)
 800377c:	9303      	str	r3, [sp, #12]
 800377e:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <SetColor+0x188>)
 8003780:	9302      	str	r3, [sp, #8]
 8003782:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <SetColor+0x18c>)
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	4b4e      	ldr	r3, [pc, #312]	; (80038c0 <SetColor+0x188>)
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	0023      	movs	r3, r4
 800378c:	f7ff ff96 	bl	80036bc <ChangeColor>
 8003790:	e08e      	b.n	80038b0 <SetColor+0x178>
		case reg_discharged: ChangeColor(C_WHITE, C_RED,   C_WHITE, C_WHITE, C_WHITE, C_RED,   C_WHITE, C_WHITE); break;
 8003792:	4c4b      	ldr	r4, [pc, #300]	; (80038c0 <SetColor+0x188>)
 8003794:	4a4a      	ldr	r2, [pc, #296]	; (80038c0 <SetColor+0x188>)
 8003796:	23f8      	movs	r3, #248	; 0xf8
 8003798:	0219      	lsls	r1, r3, #8
 800379a:	4849      	ldr	r0, [pc, #292]	; (80038c0 <SetColor+0x188>)
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <SetColor+0x188>)
 800379e:	9303      	str	r3, [sp, #12]
 80037a0:	4b47      	ldr	r3, [pc, #284]	; (80038c0 <SetColor+0x188>)
 80037a2:	9302      	str	r3, [sp, #8]
 80037a4:	23f8      	movs	r3, #248	; 0xf8
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	9301      	str	r3, [sp, #4]
 80037aa:	4b45      	ldr	r3, [pc, #276]	; (80038c0 <SetColor+0x188>)
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	0023      	movs	r3, r4
 80037b0:	f7ff ff84 	bl	80036bc <ChangeColor>
 80037b4:	e07c      	b.n	80038b0 <SetColor+0x178>
		case reg_charging:   ChangeColor(C_WHITE, C_YELLOW,C_WHITE, C_WHITE, C_WHITE, C_YELLOW,C_WHITE, C_WHITE); break;
 80037b6:	4c42      	ldr	r4, [pc, #264]	; (80038c0 <SetColor+0x188>)
 80037b8:	4a41      	ldr	r2, [pc, #260]	; (80038c0 <SetColor+0x188>)
 80037ba:	4943      	ldr	r1, [pc, #268]	; (80038c8 <SetColor+0x190>)
 80037bc:	4840      	ldr	r0, [pc, #256]	; (80038c0 <SetColor+0x188>)
 80037be:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <SetColor+0x188>)
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <SetColor+0x188>)
 80037c4:	9302      	str	r3, [sp, #8]
 80037c6:	4b40      	ldr	r3, [pc, #256]	; (80038c8 <SetColor+0x190>)
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	4b3d      	ldr	r3, [pc, #244]	; (80038c0 <SetColor+0x188>)
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	0023      	movs	r3, r4
 80037d0:	f7ff ff74 	bl	80036bc <ChangeColor>
 80037d4:	e06c      	b.n	80038b0 <SetColor+0x178>
		case reg_bat_full:   ChangeColor(C_WHITE, C_GREEN, C_WHITE, C_WHITE, C_WHITE, C_GREEN, C_WHITE, C_WHITE); break;
 80037d6:	4c3a      	ldr	r4, [pc, #232]	; (80038c0 <SetColor+0x188>)
 80037d8:	4a39      	ldr	r2, [pc, #228]	; (80038c0 <SetColor+0x188>)
 80037da:	23fc      	movs	r3, #252	; 0xfc
 80037dc:	00d9      	lsls	r1, r3, #3
 80037de:	4838      	ldr	r0, [pc, #224]	; (80038c0 <SetColor+0x188>)
 80037e0:	4b37      	ldr	r3, [pc, #220]	; (80038c0 <SetColor+0x188>)
 80037e2:	9303      	str	r3, [sp, #12]
 80037e4:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <SetColor+0x188>)
 80037e6:	9302      	str	r3, [sp, #8]
 80037e8:	23fc      	movs	r3, #252	; 0xfc
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <SetColor+0x188>)
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	0023      	movs	r3, r4
 80037f4:	f7ff ff62 	bl	80036bc <ChangeColor>
 80037f8:	e05a      	b.n	80038b0 <SetColor+0x178>
		case set_hour:       ChangeColor(C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_WHITE, C_WHITE, C_WHITE, C_BLACK); break;
 80037fa:	2300      	movs	r3, #0
 80037fc:	9303      	str	r3, [sp, #12]
 80037fe:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <SetColor+0x188>)
 8003800:	9302      	str	r3, [sp, #8]
 8003802:	4b2f      	ldr	r3, [pc, #188]	; (80038c0 <SetColor+0x188>)
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	4b2e      	ldr	r3, [pc, #184]	; (80038c0 <SetColor+0x188>)
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	2300      	movs	r3, #0
 800380c:	2200      	movs	r2, #0
 800380e:	2100      	movs	r1, #0
 8003810:	2000      	movs	r0, #0
 8003812:	f7ff ff53 	bl	80036bc <ChangeColor>
 8003816:	e04b      	b.n	80038b0 <SetColor+0x178>
		case set_minute:     ChangeColor(C_BLACK, C_BLACK, C_WHITE, C_WHITE, C_BLACK, C_BLACK, C_WHITE, C_BLACK); break;
 8003818:	4929      	ldr	r1, [pc, #164]	; (80038c0 <SetColor+0x188>)
 800381a:	4a29      	ldr	r2, [pc, #164]	; (80038c0 <SetColor+0x188>)
 800381c:	2300      	movs	r3, #0
 800381e:	9303      	str	r3, [sp, #12]
 8003820:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <SetColor+0x188>)
 8003822:	9302      	str	r3, [sp, #8]
 8003824:	2300      	movs	r3, #0
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	000b      	movs	r3, r1
 800382e:	2100      	movs	r1, #0
 8003830:	2000      	movs	r0, #0
 8003832:	f7ff ff43 	bl	80036bc <ChangeColor>
 8003836:	e03b      	b.n	80038b0 <SetColor+0x178>
		case set_second:     ChangeColor(C_WHITE, C_WHITE, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_WHITE, C_BLACK); break;
 8003838:	4921      	ldr	r1, [pc, #132]	; (80038c0 <SetColor+0x188>)
 800383a:	4821      	ldr	r0, [pc, #132]	; (80038c0 <SetColor+0x188>)
 800383c:	2300      	movs	r3, #0
 800383e:	9303      	str	r3, [sp, #12]
 8003840:	4b1f      	ldr	r3, [pc, #124]	; (80038c0 <SetColor+0x188>)
 8003842:	9302      	str	r3, [sp, #8]
 8003844:	2300      	movs	r3, #0
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	2200      	movs	r2, #0
 8003850:	f7ff ff34 	bl	80036bc <ChangeColor>
 8003854:	e02c      	b.n	80038b0 <SetColor+0x178>
		case set_day:        ChangeColor(C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_WHITE); break;
 8003856:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <SetColor+0x188>)
 8003858:	9303      	str	r3, [sp, #12]
 800385a:	2300      	movs	r3, #0
 800385c:	9302      	str	r3, [sp, #8]
 800385e:	2300      	movs	r3, #0
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2300      	movs	r3, #0
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2300      	movs	r3, #0
 8003868:	2200      	movs	r2, #0
 800386a:	2100      	movs	r1, #0
 800386c:	2000      	movs	r0, #0
 800386e:	f7ff ff25 	bl	80036bc <ChangeColor>
 8003872:	e01d      	b.n	80038b0 <SetColor+0x178>
		case set_month:      ChangeColor(C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_WHITE); break;
 8003874:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <SetColor+0x188>)
 8003876:	9303      	str	r3, [sp, #12]
 8003878:	2300      	movs	r3, #0
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	2300      	movs	r3, #0
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2300      	movs	r3, #0
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	2200      	movs	r2, #0
 8003888:	2100      	movs	r1, #0
 800388a:	2000      	movs	r0, #0
 800388c:	f7ff ff16 	bl	80036bc <ChangeColor>
 8003890:	e00e      	b.n	80038b0 <SetColor+0x178>
		case set_year:  	 ChangeColor(C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_BLACK, C_WHITE); break;
 8003892:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <SetColor+0x188>)
 8003894:	9303      	str	r3, [sp, #12]
 8003896:	2300      	movs	r3, #0
 8003898:	9302      	str	r3, [sp, #8]
 800389a:	2300      	movs	r3, #0
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2300      	movs	r3, #0
 80038a4:	2200      	movs	r2, #0
 80038a6:	2100      	movs	r1, #0
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7ff ff07 	bl	80036bc <ChangeColor>
 80038ae:	46c0      	nop			; (mov r8, r8)
	}
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b001      	add	sp, #4
 80038b6:	bd90      	pop	{r4, r7, pc}
 80038b8:	200006bd 	.word	0x200006bd
 80038bc:	0800b9a4 	.word	0x0800b9a4
 80038c0:	0000ffff 	.word	0x0000ffff
 80038c4:	0000fd20 	.word	0x0000fd20
 80038c8:	0000ffe0 	.word	0x0000ffe0

080038cc <KeyPressed>:

uint8_t KeyPressed(uint8_t* key)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	uint8_t t = *key;
 80038d4:	210f      	movs	r1, #15
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	7812      	ldrb	r2, [r2, #0]
 80038dc:	701a      	strb	r2, [r3, #0]
	*key = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	701a      	strb	r2, [r3, #0]
	return t;
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	781b      	ldrb	r3, [r3, #0]
}
 80038e8:	0018      	movs	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b004      	add	sp, #16
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <KeysHolded>:
	if (t) *key = 0;
	return t;
}

uint8_t KeysHolded(uint32_t time)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	static uint8_t t;
	t = 0;
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <KeysHolded+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
	if(keyboard.l_hold >= time && keyboard.r_hold >= time)
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <KeysHolded+0x44>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	d80d      	bhi.n	8003924 <KeysHolded+0x34>
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <KeysHolded+0x44>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	429a      	cmp	r2, r3
 8003910:	d808      	bhi.n	8003924 <KeysHolded+0x34>
	{
		keyboard.l_hold = 0;
 8003912:	4b08      	ldr	r3, [pc, #32]	; (8003934 <KeysHolded+0x44>)
 8003914:	2200      	movs	r2, #0
 8003916:	60da      	str	r2, [r3, #12]
		keyboard.r_hold = 0;
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <KeysHolded+0x44>)
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
		t = 1;
 800391e:	4b04      	ldr	r3, [pc, #16]	; (8003930 <KeysHolded+0x40>)
 8003920:	2201      	movs	r2, #1
 8003922:	701a      	strb	r2, [r3, #0]
	}
	return t;
 8003924:	4b02      	ldr	r3, [pc, #8]	; (8003930 <KeysHolded+0x40>)
 8003926:	781b      	ldrb	r3, [r3, #0]
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200006be 	.word	0x200006be
 8003934:	200006a8 	.word	0x200006a8

08003938 <RefreshClock>:

void RefreshClock()
{
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b083      	sub	sp, #12
 800393c:	af02      	add	r7, sp, #8
	static MODE_T mode_old;

	static char dateDisplay[9];
	static char timeDisplay[6];

	change.sec  = (time_old.Seconds == time.Seconds) ? 0 : 1;
 800393e:	4bac      	ldr	r3, [pc, #688]	; (8003bf0 <RefreshClock+0x2b8>)
 8003940:	789a      	ldrb	r2, [r3, #2]
 8003942:	4bac      	ldr	r3, [pc, #688]	; (8003bf4 <RefreshClock+0x2bc>)
 8003944:	789b      	ldrb	r3, [r3, #2]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	4193      	sbcs	r3, r2
 800394c:	b2db      	uxtb	r3, r3
 800394e:	001a      	movs	r2, r3
 8003950:	4ba9      	ldr	r3, [pc, #676]	; (8003bf8 <RefreshClock+0x2c0>)
 8003952:	701a      	strb	r2, [r3, #0]
	change.min  = (time_old.Minutes == time.Minutes) ? 0 : 1;
 8003954:	4ba6      	ldr	r3, [pc, #664]	; (8003bf0 <RefreshClock+0x2b8>)
 8003956:	785a      	ldrb	r2, [r3, #1]
 8003958:	4ba6      	ldr	r3, [pc, #664]	; (8003bf4 <RefreshClock+0x2bc>)
 800395a:	785b      	ldrb	r3, [r3, #1]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	1e5a      	subs	r2, r3, #1
 8003960:	4193      	sbcs	r3, r2
 8003962:	b2db      	uxtb	r3, r3
 8003964:	001a      	movs	r2, r3
 8003966:	4ba4      	ldr	r3, [pc, #656]	; (8003bf8 <RefreshClock+0x2c0>)
 8003968:	705a      	strb	r2, [r3, #1]
	change.hour = (time_old.Hours   == time.Hours)   ? 0 : 1;
 800396a:	4ba1      	ldr	r3, [pc, #644]	; (8003bf0 <RefreshClock+0x2b8>)
 800396c:	781a      	ldrb	r2, [r3, #0]
 800396e:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <RefreshClock+0x2bc>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	1e5a      	subs	r2, r3, #1
 8003976:	4193      	sbcs	r3, r2
 8003978:	b2db      	uxtb	r3, r3
 800397a:	001a      	movs	r2, r3
 800397c:	4b9e      	ldr	r3, [pc, #632]	; (8003bf8 <RefreshClock+0x2c0>)
 800397e:	709a      	strb	r2, [r3, #2]
	change.day  = (date_old.Date    == date.Date)    ? 0 : 1;
 8003980:	4b9e      	ldr	r3, [pc, #632]	; (8003bfc <RefreshClock+0x2c4>)
 8003982:	789a      	ldrb	r2, [r3, #2]
 8003984:	4b9e      	ldr	r3, [pc, #632]	; (8003c00 <RefreshClock+0x2c8>)
 8003986:	789b      	ldrb	r3, [r3, #2]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	1e5a      	subs	r2, r3, #1
 800398c:	4193      	sbcs	r3, r2
 800398e:	b2db      	uxtb	r3, r3
 8003990:	001a      	movs	r2, r3
 8003992:	4b99      	ldr	r3, [pc, #612]	; (8003bf8 <RefreshClock+0x2c0>)
 8003994:	70da      	strb	r2, [r3, #3]
	change.mth  = (date_old.Month   == date.Month)   ? 0 : 1;
 8003996:	4b99      	ldr	r3, [pc, #612]	; (8003bfc <RefreshClock+0x2c4>)
 8003998:	785a      	ldrb	r2, [r3, #1]
 800399a:	4b99      	ldr	r3, [pc, #612]	; (8003c00 <RefreshClock+0x2c8>)
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	1e5a      	subs	r2, r3, #1
 80039a2:	4193      	sbcs	r3, r2
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	001a      	movs	r2, r3
 80039a8:	4b93      	ldr	r3, [pc, #588]	; (8003bf8 <RefreshClock+0x2c0>)
 80039aa:	711a      	strb	r2, [r3, #4]
	change.year = (date_old.Year    == date.Year)    ? 0 : 1;
 80039ac:	4b93      	ldr	r3, [pc, #588]	; (8003bfc <RefreshClock+0x2c4>)
 80039ae:	78da      	ldrb	r2, [r3, #3]
 80039b0:	4b93      	ldr	r3, [pc, #588]	; (8003c00 <RefreshClock+0x2c8>)
 80039b2:	78db      	ldrb	r3, [r3, #3]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	4193      	sbcs	r3, r2
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	001a      	movs	r2, r3
 80039be:	4b8e      	ldr	r3, [pc, #568]	; (8003bf8 <RefreshClock+0x2c0>)
 80039c0:	715a      	strb	r2, [r3, #5]

	if(mode_old != mode)
 80039c2:	4b90      	ldr	r3, [pc, #576]	; (8003c04 <RefreshClock+0x2cc>)
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	4b90      	ldr	r3, [pc, #576]	; (8003c08 <RefreshClock+0x2d0>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d015      	beq.n	80039fa <RefreshClock+0xc2>
	{
		change.sec = 1;
 80039ce:	4b8a      	ldr	r3, [pc, #552]	; (8003bf8 <RefreshClock+0x2c0>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
		change.min = 1;
 80039d4:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <RefreshClock+0x2c0>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	705a      	strb	r2, [r3, #1]
		change.hour = 1;
 80039da:	4b87      	ldr	r3, [pc, #540]	; (8003bf8 <RefreshClock+0x2c0>)
 80039dc:	2201      	movs	r2, #1
 80039de:	709a      	strb	r2, [r3, #2]
		change.day = 1;
 80039e0:	4b85      	ldr	r3, [pc, #532]	; (8003bf8 <RefreshClock+0x2c0>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	70da      	strb	r2, [r3, #3]
		change.mth = 1;
 80039e6:	4b84      	ldr	r3, [pc, #528]	; (8003bf8 <RefreshClock+0x2c0>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	711a      	strb	r2, [r3, #4]
		change.year = 1;
 80039ec:	4b82      	ldr	r3, [pc, #520]	; (8003bf8 <RefreshClock+0x2c0>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	715a      	strb	r2, [r3, #5]
		mode_old = mode;
 80039f2:	4b85      	ldr	r3, [pc, #532]	; (8003c08 <RefreshClock+0x2d0>)
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	4b83      	ldr	r3, [pc, #524]	; (8003c04 <RefreshClock+0x2cc>)
 80039f8:	701a      	strb	r2, [r3, #0]
	}

	if (!(change.sec || change.min || change.hour || change.day || change.mth || change.year))
 80039fa:	4b7f      	ldr	r3, [pc, #508]	; (8003bf8 <RefreshClock+0x2c0>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d114      	bne.n	8003a2c <RefreshClock+0xf4>
 8003a02:	4b7d      	ldr	r3, [pc, #500]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a04:	785b      	ldrb	r3, [r3, #1]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d110      	bne.n	8003a2c <RefreshClock+0xf4>
 8003a0a:	4b7b      	ldr	r3, [pc, #492]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a0c:	789b      	ldrb	r3, [r3, #2]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10c      	bne.n	8003a2c <RefreshClock+0xf4>
 8003a12:	4b79      	ldr	r3, [pc, #484]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a14:	78db      	ldrb	r3, [r3, #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d108      	bne.n	8003a2c <RefreshClock+0xf4>
 8003a1a:	4b77      	ldr	r3, [pc, #476]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a1c:	791b      	ldrb	r3, [r3, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <RefreshClock+0xf4>
 8003a22:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a24:	795b      	ldrb	r3, [r3, #5]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d100      	bne.n	8003a2c <RefreshClock+0xf4>
 8003a2a:	e0dd      	b.n	8003be8 <RefreshClock+0x2b0>
	{
		return;
	}

	hourPos = ((time.Hours%12)*5) + (time.Minutes/12);
 8003a2c:	4b71      	ldr	r3, [pc, #452]	; (8003bf4 <RefreshClock+0x2bc>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	210c      	movs	r1, #12
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7fc fbf8 	bl	8000228 <__aeabi_uidivmod>
 8003a38:	000b      	movs	r3, r1
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	1c1a      	adds	r2, r3, #0
 8003a3e:	0092      	lsls	r2, r2, #2
 8003a40:	18d3      	adds	r3, r2, r3
 8003a42:	b2dc      	uxtb	r4, r3
 8003a44:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <RefreshClock+0x2bc>)
 8003a46:	785b      	ldrb	r3, [r3, #1]
 8003a48:	210c      	movs	r1, #12
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f7fc fb66 	bl	800011c <__udivsi3>
 8003a50:	0003      	movs	r3, r0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	18e3      	adds	r3, r4, r3
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <RefreshClock+0x2d4>)
 8003a5a:	701a      	strb	r2, [r3, #0]

	//fast reload - only one watch hand
	if (change.sec)
 8003a5c:	4b66      	ldr	r3, [pc, #408]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00b      	beq.n	8003a7c <RefreshClock+0x144>
	{
		SetHandDisplay(watchHand[SEC], time.Seconds, 1, color.s_pri, color.s_sec);
 8003a64:	4b63      	ldr	r3, [pc, #396]	; (8003bf4 <RefreshClock+0x2bc>)
 8003a66:	7899      	ldrb	r1, [r3, #2]
 8003a68:	4b69      	ldr	r3, [pc, #420]	; (8003c10 <RefreshClock+0x2d8>)
 8003a6a:	881a      	ldrh	r2, [r3, #0]
 8003a6c:	4b68      	ldr	r3, [pc, #416]	; (8003c10 <RefreshClock+0x2d8>)
 8003a6e:	885b      	ldrh	r3, [r3, #2]
 8003a70:	4868      	ldr	r0, [pc, #416]	; (8003c14 <RefreshClock+0x2dc>)
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	0013      	movs	r3, r2
 8003a76:	2201      	movs	r2, #1
 8003a78:	f7ff fbe5 	bl	8003246 <SetHandDisplay>
	}
	if (change.min)
 8003a7c:	4b5e      	ldr	r3, [pc, #376]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <RefreshClock+0x164>
	{
		SetHandDisplay(watchHand[MIN], time.Minutes, 1, color.m_pri, color.m_sec);
 8003a84:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <RefreshClock+0x2bc>)
 8003a86:	7859      	ldrb	r1, [r3, #1]
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <RefreshClock+0x2d8>)
 8003a8a:	889a      	ldrh	r2, [r3, #4]
 8003a8c:	4b60      	ldr	r3, [pc, #384]	; (8003c10 <RefreshClock+0x2d8>)
 8003a8e:	88db      	ldrh	r3, [r3, #6]
 8003a90:	4861      	ldr	r0, [pc, #388]	; (8003c18 <RefreshClock+0x2e0>)
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	0013      	movs	r3, r2
 8003a96:	2201      	movs	r2, #1
 8003a98:	f7ff fbd5 	bl	8003246 <SetHandDisplay>
	}
	if (change.hour)
 8003a9c:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <RefreshClock+0x2c0>)
 8003a9e:	789b      	ldrb	r3, [r3, #2]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <RefreshClock+0x184>
	{
		SetHandDisplay(watchHand[HOUR], hourPos, 1, color.h_pri, color.h_sec);
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <RefreshClock+0x2d4>)
 8003aa6:	7819      	ldrb	r1, [r3, #0]
 8003aa8:	4b59      	ldr	r3, [pc, #356]	; (8003c10 <RefreshClock+0x2d8>)
 8003aaa:	891a      	ldrh	r2, [r3, #8]
 8003aac:	4b58      	ldr	r3, [pc, #352]	; (8003c10 <RefreshClock+0x2d8>)
 8003aae:	895b      	ldrh	r3, [r3, #10]
 8003ab0:	485a      	ldr	r0, [pc, #360]	; (8003c1c <RefreshClock+0x2e4>)
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	0013      	movs	r3, r2
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f7ff fbc5 	bl	8003246 <SetHandDisplay>
	}

	if (change.min || change.hour)
 8003abc:	4b4e      	ldr	r3, [pc, #312]	; (8003bf8 <RefreshClock+0x2c0>)
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <RefreshClock+0x194>
 8003ac4:	4b4c      	ldr	r3, [pc, #304]	; (8003bf8 <RefreshClock+0x2c0>)
 8003ac6:	789b      	ldrb	r3, [r3, #2]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d019      	beq.n	8003b00 <RefreshClock+0x1c8>
	{
		sprintf(timeDisplay, "%02d:%02d", time.Hours, time.Minutes);
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <RefreshClock+0x2bc>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	4b48      	ldr	r3, [pc, #288]	; (8003bf4 <RefreshClock+0x2bc>)
 8003ad4:	785b      	ldrb	r3, [r3, #1]
 8003ad6:	4952      	ldr	r1, [pc, #328]	; (8003c20 <RefreshClock+0x2e8>)
 8003ad8:	4852      	ldr	r0, [pc, #328]	; (8003c24 <RefreshClock+0x2ec>)
 8003ada:	f006 fb1d 	bl	800a118 <siprintf>
		LCD_PutStr(89, 95, timeDisplay, FONT_arial_25X28, LCD_ColorOpacity(color.t_dig, 7), C_BLACK);
 8003ade:	4b4c      	ldr	r3, [pc, #304]	; (8003c10 <RefreshClock+0x2d8>)
 8003ae0:	899b      	ldrh	r3, [r3, #12]
 8003ae2:	2107      	movs	r1, #7
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7fe fd77 	bl	80025d8 <LCD_ColorOpacity>
 8003aea:	0003      	movs	r3, r0
 8003aec:	0018      	movs	r0, r3
 8003aee:	4b4e      	ldr	r3, [pc, #312]	; (8003c28 <RefreshClock+0x2f0>)
 8003af0:	4a4c      	ldr	r2, [pc, #304]	; (8003c24 <RefreshClock+0x2ec>)
 8003af2:	2100      	movs	r1, #0
 8003af4:	9101      	str	r1, [sp, #4]
 8003af6:	9000      	str	r0, [sp, #0]
 8003af8:	215f      	movs	r1, #95	; 0x5f
 8003afa:	2059      	movs	r0, #89	; 0x59
 8003afc:	f7fe fff9 	bl	8002af2 <LCD_PutStr>
	}
	if (change.day || change.mth || change.year)
 8003b00:	4b3d      	ldr	r3, [pc, #244]	; (8003bf8 <RefreshClock+0x2c0>)
 8003b02:	78db      	ldrb	r3, [r3, #3]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d107      	bne.n	8003b18 <RefreshClock+0x1e0>
 8003b08:	4b3b      	ldr	r3, [pc, #236]	; (8003bf8 <RefreshClock+0x2c0>)
 8003b0a:	791b      	ldrb	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d103      	bne.n	8003b18 <RefreshClock+0x1e0>
 8003b10:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <RefreshClock+0x2c0>)
 8003b12:	795b      	ldrb	r3, [r3, #5]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01e      	beq.n	8003b56 <RefreshClock+0x21e>
	{
		sprintf(dateDisplay, "%02d.%02d.%02d", date.Date, date.Month, date.Year);
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <RefreshClock+0x2c8>)
 8003b1a:	789b      	ldrb	r3, [r3, #2]
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <RefreshClock+0x2c8>)
 8003b20:	785b      	ldrb	r3, [r3, #1]
 8003b22:	001c      	movs	r4, r3
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <RefreshClock+0x2c8>)
 8003b26:	78db      	ldrb	r3, [r3, #3]
 8003b28:	4940      	ldr	r1, [pc, #256]	; (8003c2c <RefreshClock+0x2f4>)
 8003b2a:	4841      	ldr	r0, [pc, #260]	; (8003c30 <RefreshClock+0x2f8>)
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	0023      	movs	r3, r4
 8003b30:	f006 faf2 	bl	800a118 <siprintf>
		LCD_PutStr(89, 130, dateDisplay, FONT_arial_16X18, LCD_ColorOpacity(color.d_dig, 5), C_BLACK);
 8003b34:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <RefreshClock+0x2d8>)
 8003b36:	89db      	ldrh	r3, [r3, #14]
 8003b38:	2105      	movs	r1, #5
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fe fd4c 	bl	80025d8 <LCD_ColorOpacity>
 8003b40:	0003      	movs	r3, r0
 8003b42:	0018      	movs	r0, r3
 8003b44:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <RefreshClock+0x2fc>)
 8003b46:	4a3a      	ldr	r2, [pc, #232]	; (8003c30 <RefreshClock+0x2f8>)
 8003b48:	2100      	movs	r1, #0
 8003b4a:	9101      	str	r1, [sp, #4]
 8003b4c:	9000      	str	r0, [sp, #0]
 8003b4e:	2182      	movs	r1, #130	; 0x82
 8003b50:	2059      	movs	r0, #89	; 0x59
 8003b52:	f7fe ffce 	bl	8002af2 <LCD_PutStr>
	}

	//slow reload - rest of watch hands
	if (change.sec)
 8003b56:	4b28      	ldr	r3, [pc, #160]	; (8003bf8 <RefreshClock+0x2c0>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <RefreshClock+0x23e>
	{
		SetHandDisplay(watchHand[SEC], time.Seconds, 60, color.s_pri, color.s_sec);
 8003b5e:	4b25      	ldr	r3, [pc, #148]	; (8003bf4 <RefreshClock+0x2bc>)
 8003b60:	7899      	ldrb	r1, [r3, #2]
 8003b62:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <RefreshClock+0x2d8>)
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	4b2a      	ldr	r3, [pc, #168]	; (8003c10 <RefreshClock+0x2d8>)
 8003b68:	885b      	ldrh	r3, [r3, #2]
 8003b6a:	482a      	ldr	r0, [pc, #168]	; (8003c14 <RefreshClock+0x2dc>)
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	0013      	movs	r3, r2
 8003b70:	223c      	movs	r2, #60	; 0x3c
 8003b72:	f7ff fb68 	bl	8003246 <SetHandDisplay>
	}
	if (change.min)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <RefreshClock+0x2c0>)
 8003b78:	785b      	ldrb	r3, [r3, #1]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <RefreshClock+0x25e>
	{
		SetHandDisplay(watchHand[MIN], time.Minutes, 60, color.m_pri, color.m_sec);
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <RefreshClock+0x2bc>)
 8003b80:	7859      	ldrb	r1, [r3, #1]
 8003b82:	4b23      	ldr	r3, [pc, #140]	; (8003c10 <RefreshClock+0x2d8>)
 8003b84:	889a      	ldrh	r2, [r3, #4]
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <RefreshClock+0x2d8>)
 8003b88:	88db      	ldrh	r3, [r3, #6]
 8003b8a:	4823      	ldr	r0, [pc, #140]	; (8003c18 <RefreshClock+0x2e0>)
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	0013      	movs	r3, r2
 8003b90:	223c      	movs	r2, #60	; 0x3c
 8003b92:	f7ff fb58 	bl	8003246 <SetHandDisplay>
	}
	if (change.hour)
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <RefreshClock+0x2c0>)
 8003b98:	789b      	ldrb	r3, [r3, #2]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00b      	beq.n	8003bb6 <RefreshClock+0x27e>
	{
		SetHandDisplay(watchHand[HOUR], hourPos, 60, color.h_pri, color.h_sec);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <RefreshClock+0x2d4>)
 8003ba0:	7819      	ldrb	r1, [r3, #0]
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <RefreshClock+0x2d8>)
 8003ba4:	891a      	ldrh	r2, [r3, #8]
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <RefreshClock+0x2d8>)
 8003ba8:	895b      	ldrh	r3, [r3, #10]
 8003baa:	481c      	ldr	r0, [pc, #112]	; (8003c1c <RefreshClock+0x2e4>)
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	0013      	movs	r3, r2
 8003bb0:	223c      	movs	r2, #60	; 0x3c
 8003bb2:	f7ff fb48 	bl	8003246 <SetHandDisplay>
	}

	time_old.Seconds = time.Seconds;
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <RefreshClock+0x2bc>)
 8003bb8:	789a      	ldrb	r2, [r3, #2]
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <RefreshClock+0x2b8>)
 8003bbc:	709a      	strb	r2, [r3, #2]
	time_old.Minutes = time.Minutes;
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <RefreshClock+0x2bc>)
 8003bc0:	785a      	ldrb	r2, [r3, #1]
 8003bc2:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <RefreshClock+0x2b8>)
 8003bc4:	705a      	strb	r2, [r3, #1]
	time_old.Hours = time.Hours;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <RefreshClock+0x2bc>)
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <RefreshClock+0x2b8>)
 8003bcc:	701a      	strb	r2, [r3, #0]
	date_old.Date = date.Date;
 8003bce:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <RefreshClock+0x2c8>)
 8003bd0:	789a      	ldrb	r2, [r3, #2]
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <RefreshClock+0x2c4>)
 8003bd4:	709a      	strb	r2, [r3, #2]
	date_old.Month = date.Month;
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <RefreshClock+0x2c8>)
 8003bd8:	785a      	ldrb	r2, [r3, #1]
 8003bda:	4b08      	ldr	r3, [pc, #32]	; (8003bfc <RefreshClock+0x2c4>)
 8003bdc:	705a      	strb	r2, [r3, #1]
	date_old.Year = date.Year;
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <RefreshClock+0x2c8>)
 8003be0:	78da      	ldrb	r2, [r3, #3]
 8003be2:	4b06      	ldr	r3, [pc, #24]	; (8003bfc <RefreshClock+0x2c4>)
 8003be4:	70da      	strb	r2, [r3, #3]

	return;
 8003be6:	e000      	b.n	8003bea <RefreshClock+0x2b2>
		return;
 8003be8:	46c0      	nop			; (mov r8, r8)
}
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b001      	add	sp, #4
 8003bee:	bd90      	pop	{r4, r7, pc}
 8003bf0:	200006c0 	.word	0x200006c0
 8003bf4:	20000680 	.word	0x20000680
 8003bf8:	200006d4 	.word	0x200006d4
 8003bfc:	200006dc 	.word	0x200006dc
 8003c00:	20000694 	.word	0x20000694
 8003c04:	200006e0 	.word	0x200006e0
 8003c08:	200006bd 	.word	0x200006bd
 8003c0c:	200006e1 	.word	0x200006e1
 8003c10:	20000698 	.word	0x20000698
 8003c14:	20000554 	.word	0x20000554
 8003c18:	20000428 	.word	0x20000428
 8003c1c:	200002fc 	.word	0x200002fc
 8003c20:	0800b8bc 	.word	0x0800b8bc
 8003c24:	200006e4 	.word	0x200006e4
 8003c28:	0800d594 	.word	0x0800d594
 8003c2c:	0800b8c8 	.word	0x0800b8c8
 8003c30:	200006ec 	.word	0x200006ec
 8003c34:	0800ba0c 	.word	0x0800ba0c

08003c38 <SetTimeDate>:

void SetTimeDate()
{
 8003c38:	b590      	push	{r4, r7, lr}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af02      	add	r7, sp, #8
		day,
		month,
		year
	} num = hour;

	if (KeysHolded(100))
 8003c3e:	2064      	movs	r0, #100	; 0x64
 8003c40:	f7ff fe56 	bl	80038f0 <KeysHolded>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d002      	beq.n	8003c4e <SetTimeDate+0x16>
	{
		setTimeFlag = 1;
 8003c48:	4b66      	ldr	r3, [pc, #408]	; (8003de4 <SetTimeDate+0x1ac>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	701a      	strb	r2, [r3, #0]
	}

	if (!setTimeFlag)
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <SetTimeDate+0x1ac>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <SetTimeDate+0x28>
	{
		mode_old = mode;
 8003c56:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <SetTimeDate+0x1b0>)
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	4b64      	ldr	r3, [pc, #400]	; (8003dec <SetTimeDate+0x1b4>)
 8003c5c:	701a      	strb	r2, [r3, #0]
		return;
 8003c5e:	e0bd      	b.n	8003ddc <SetTimeDate+0x1a4>
	}

	switch(num)
 8003c60:	4b63      	ldr	r3, [pc, #396]	; (8003df0 <SetTimeDate+0x1b8>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b05      	cmp	r3, #5
 8003c66:	d82e      	bhi.n	8003cc6 <SetTimeDate+0x8e>
 8003c68:	009a      	lsls	r2, r3, #2
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <SetTimeDate+0x1bc>)
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	469f      	mov	pc, r3
	{
		case hour:  curr_p = &time.Hours;   mod = 24; break;
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <SetTimeDate+0x1c0>)
 8003c74:	4a61      	ldr	r2, [pc, #388]	; (8003dfc <SetTimeDate+0x1c4>)
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <SetTimeDate+0x1c8>)
 8003c7a:	2218      	movs	r2, #24
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e025      	b.n	8003ccc <SetTimeDate+0x94>
		case min:   curr_p = &time.Minutes; mod = 60; break;
 8003c80:	4b5d      	ldr	r3, [pc, #372]	; (8003df8 <SetTimeDate+0x1c0>)
 8003c82:	4a60      	ldr	r2, [pc, #384]	; (8003e04 <SetTimeDate+0x1cc>)
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <SetTimeDate+0x1c8>)
 8003c88:	223c      	movs	r2, #60	; 0x3c
 8003c8a:	701a      	strb	r2, [r3, #0]
 8003c8c:	e01e      	b.n	8003ccc <SetTimeDate+0x94>
		case sec:   curr_p = &time.Seconds; mod = 60; break;
 8003c8e:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <SetTimeDate+0x1c0>)
 8003c90:	4a5d      	ldr	r2, [pc, #372]	; (8003e08 <SetTimeDate+0x1d0>)
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	4b5a      	ldr	r3, [pc, #360]	; (8003e00 <SetTimeDate+0x1c8>)
 8003c96:	223c      	movs	r2, #60	; 0x3c
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	e017      	b.n	8003ccc <SetTimeDate+0x94>
		case day:   curr_p = &date.Date;    mod = 31; break;
 8003c9c:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <SetTimeDate+0x1c0>)
 8003c9e:	4a5b      	ldr	r2, [pc, #364]	; (8003e0c <SetTimeDate+0x1d4>)
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	4b57      	ldr	r3, [pc, #348]	; (8003e00 <SetTimeDate+0x1c8>)
 8003ca4:	221f      	movs	r2, #31
 8003ca6:	701a      	strb	r2, [r3, #0]
 8003ca8:	e010      	b.n	8003ccc <SetTimeDate+0x94>
		case month: curr_p = &date.Month;   mod = 12; break;
 8003caa:	4b53      	ldr	r3, [pc, #332]	; (8003df8 <SetTimeDate+0x1c0>)
 8003cac:	4a58      	ldr	r2, [pc, #352]	; (8003e10 <SetTimeDate+0x1d8>)
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <SetTimeDate+0x1c8>)
 8003cb2:	220c      	movs	r2, #12
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e009      	b.n	8003ccc <SetTimeDate+0x94>
		case year:  curr_p = &date.Year;	mod = 99; break;
 8003cb8:	4b4f      	ldr	r3, [pc, #316]	; (8003df8 <SetTimeDate+0x1c0>)
 8003cba:	4a56      	ldr	r2, [pc, #344]	; (8003e14 <SetTimeDate+0x1dc>)
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	4b50      	ldr	r3, [pc, #320]	; (8003e00 <SetTimeDate+0x1c8>)
 8003cc0:	2263      	movs	r2, #99	; 0x63
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e002      	b.n	8003ccc <SetTimeDate+0x94>
		default: curr_p = NULL;
 8003cc6:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <SetTimeDate+0x1c0>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
	}

	if(*curr_p == 0)
 8003ccc:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <SetTimeDate+0x1c0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <SetTimeDate+0xa8>
	{
		*curr_p = mod;
 8003cd6:	4b48      	ldr	r3, [pc, #288]	; (8003df8 <SetTimeDate+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <SetTimeDate+0x1c8>)
 8003cdc:	7812      	ldrb	r2, [r2, #0]
 8003cde:	701a      	strb	r2, [r3, #0]
	}
	*curr_p = (*curr_p + KeyPressed(&keyboard.l_press) - KeyPressed(&keyboard.r_press)) % mod;
 8003ce0:	4b45      	ldr	r3, [pc, #276]	; (8003df8 <SetTimeDate+0x1c0>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	001c      	movs	r4, r3
 8003ce8:	4b4b      	ldr	r3, [pc, #300]	; (8003e18 <SetTimeDate+0x1e0>)
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7ff fdee 	bl	80038cc <KeyPressed>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	18e4      	adds	r4, r4, r3
 8003cf4:	4b49      	ldr	r3, [pc, #292]	; (8003e1c <SetTimeDate+0x1e4>)
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7ff fde8 	bl	80038cc <KeyPressed>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	1ae2      	subs	r2, r4, r3
 8003d00:	4b3f      	ldr	r3, [pc, #252]	; (8003e00 <SetTimeDate+0x1c8>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	0019      	movs	r1, r3
 8003d06:	0010      	movs	r0, r2
 8003d08:	f7fc fb78 	bl	80003fc <__aeabi_idivmod>
 8003d0c:	000b      	movs	r3, r1
 8003d0e:	001a      	movs	r2, r3
 8003d10:	4b39      	ldr	r3, [pc, #228]	; (8003df8 <SetTimeDate+0x1c0>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003d18:	4938      	ldr	r1, [pc, #224]	; (8003dfc <SetTimeDate+0x1c4>)
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <SetTimeDate+0x1e8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f004 fd6a 	bl	80087f8 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003d24:	493f      	ldr	r1, [pc, #252]	; (8003e24 <SetTimeDate+0x1ec>)
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <SetTimeDate+0x1e8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f004 fe84 	bl	8008a38 <HAL_RTC_SetDate>

	if (!KeysHolded(50))
 8003d30:	2032      	movs	r0, #50	; 0x32
 8003d32:	f7ff fddd 	bl	80038f0 <KeysHolded>
 8003d36:	1e03      	subs	r3, r0, #0
 8003d38:	d106      	bne.n	8003d48 <SetTimeDate+0x110>
	{
		mode = set_hour + num;
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <SetTimeDate+0x1b8>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3305      	adds	r3, #5
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b29      	ldr	r3, [pc, #164]	; (8003de8 <SetTimeDate+0x1b0>)
 8003d44:	701a      	strb	r2, [r3, #0]
		return;
 8003d46:	e049      	b.n	8003ddc <SetTimeDate+0x1a4>
	}
	UG_DrawLine(89, 150, 151, 150, C_BLACK);
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2396      	movs	r3, #150	; 0x96
 8003d4e:	2297      	movs	r2, #151	; 0x97
 8003d50:	2196      	movs	r1, #150	; 0x96
 8003d52:	2059      	movs	r0, #89	; 0x59
 8003d54:	f000 fcb4 	bl	80046c0 <UG_DrawLine>
	if (num == year)
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <SetTimeDate+0x1b8>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10a      	bne.n	8003d76 <SetTimeDate+0x13e>
	{
		num = 0;
 8003d60:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <SetTimeDate+0x1b8>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	701a      	strb	r2, [r3, #0]
		setTimeFlag = 0;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <SetTimeDate+0x1ac>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
		mode = mode_old;
 8003d6c:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <SetTimeDate+0x1b4>)
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <SetTimeDate+0x1b0>)
 8003d72:	701a      	strb	r2, [r3, #0]
		return;
 8003d74:	e032      	b.n	8003ddc <SetTimeDate+0x1a4>
	}
	else
	{
		num++;
 8003d76:	4b1e      	ldr	r3, [pc, #120]	; (8003df0 <SetTimeDate+0x1b8>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <SetTimeDate+0x1b8>)
 8003d80:	701a      	strb	r2, [r3, #0]
		mode = set_hour + num;
 8003d82:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <SetTimeDate+0x1b8>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	3305      	adds	r3, #5
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <SetTimeDate+0x1b0>)
 8003d8c:	701a      	strb	r2, [r3, #0]
		if (mode == set_day)
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <SetTimeDate+0x1b0>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d108      	bne.n	8003da8 <SetTimeDate+0x170>
		{
			UG_DrawLine(89, 150, 107, 150, C_WHITE);
 8003d96:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <SetTimeDate+0x1f0>)
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2396      	movs	r3, #150	; 0x96
 8003d9c:	226b      	movs	r2, #107	; 0x6b
 8003d9e:	2196      	movs	r1, #150	; 0x96
 8003da0:	2059      	movs	r0, #89	; 0x59
 8003da2:	f000 fc8d 	bl	80046c0 <UG_DrawLine>
		}
		else if (mode == set_year)
		{
			UG_DrawLine(131, 150, 151, 150, C_WHITE);
		}
		return;
 8003da6:	e018      	b.n	8003dda <SetTimeDate+0x1a2>
		else if (mode == set_month)
 8003da8:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <SetTimeDate+0x1b0>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b09      	cmp	r3, #9
 8003dae:	d108      	bne.n	8003dc2 <SetTimeDate+0x18a>
			UG_DrawLine(111, 150, 129, 150, C_WHITE);
 8003db0:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <SetTimeDate+0x1f0>)
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2396      	movs	r3, #150	; 0x96
 8003db6:	2281      	movs	r2, #129	; 0x81
 8003db8:	2196      	movs	r1, #150	; 0x96
 8003dba:	206f      	movs	r0, #111	; 0x6f
 8003dbc:	f000 fc80 	bl	80046c0 <UG_DrawLine>
		return;
 8003dc0:	e00b      	b.n	8003dda <SetTimeDate+0x1a2>
		else if (mode == set_year)
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <SetTimeDate+0x1b0>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b0a      	cmp	r3, #10
 8003dc8:	d107      	bne.n	8003dda <SetTimeDate+0x1a2>
			UG_DrawLine(131, 150, 151, 150, C_WHITE);
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <SetTimeDate+0x1f0>)
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	2396      	movs	r3, #150	; 0x96
 8003dd0:	2297      	movs	r2, #151	; 0x97
 8003dd2:	2196      	movs	r1, #150	; 0x96
 8003dd4:	2083      	movs	r0, #131	; 0x83
 8003dd6:	f000 fc73 	bl	80046c0 <UG_DrawLine>
		return;
 8003dda:	46c0      	nop			; (mov r8, r8)
	}
}
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b001      	add	sp, #4
 8003de0:	bd90      	pop	{r4, r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	200006f5 	.word	0x200006f5
 8003de8:	200006bd 	.word	0x200006bd
 8003dec:	200006f6 	.word	0x200006f6
 8003df0:	200006f7 	.word	0x200006f7
 8003df4:	0800b9d0 	.word	0x0800b9d0
 8003df8:	200006f8 	.word	0x200006f8
 8003dfc:	20000680 	.word	0x20000680
 8003e00:	200006fc 	.word	0x200006fc
 8003e04:	20000681 	.word	0x20000681
 8003e08:	20000682 	.word	0x20000682
 8003e0c:	20000696 	.word	0x20000696
 8003e10:	20000695 	.word	0x20000695
 8003e14:	20000697 	.word	0x20000697
 8003e18:	200006b0 	.word	0x200006b0
 8003e1c:	200006a8 	.word	0x200006a8
 8003e20:	2000016c 	.word	0x2000016c
 8003e24:	20000694 	.word	0x20000694
 8003e28:	0000ffff 	.word	0x0000ffff

08003e2c <CheckRegularState>:

void CheckRegularState()
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
	static uint8_t isCharging;

	if (mode > reg_bat_full)
 8003e30:	4b25      	ldr	r3, [pc, #148]	; (8003ec8 <CheckRegularState+0x9c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d843      	bhi.n	8003ec0 <CheckRegularState+0x94>
		return;
	isCharging = HAL_GPIO_ReadPin(BAT_CH_GPIO_Port, BAT_CH_Pin);
 8003e38:	23a0      	movs	r3, #160	; 0xa0
 8003e3a:	05db      	lsls	r3, r3, #23
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	0018      	movs	r0, r3
 8003e40:	f003 fd30 	bl	80078a4 <HAL_GPIO_ReadPin>
 8003e44:	0003      	movs	r3, r0
 8003e46:	001a      	movs	r2, r3
 8003e48:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <CheckRegularState+0xa0>)
 8003e4a:	701a      	strb	r2, [r3, #0]

	if(isCharging == BATTERY_IS_CHARGING && measBat >= BATTERY_LIMIT_GREEN)
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <CheckRegularState+0xa0>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <CheckRegularState+0x3c>
 8003e54:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <CheckRegularState+0xa4>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	23fa      	movs	r3, #250	; 0xfa
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d303      	bcc.n	8003e68 <CheckRegularState+0x3c>
	{
		mode = reg_bat_full;
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <CheckRegularState+0x9c>)
 8003e62:	2204      	movs	r2, #4
 8003e64:	701a      	strb	r2, [r3, #0]
 8003e66:	e02c      	b.n	8003ec2 <CheckRegularState+0x96>
	}
	else if(isCharging == BATTERY_IS_CHARGING && measBat <  BATTERY_LIMIT_GREEN)
 8003e68:	4b18      	ldr	r3, [pc, #96]	; (8003ecc <CheckRegularState+0xa0>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d109      	bne.n	8003e84 <CheckRegularState+0x58>
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <CheckRegularState+0xa4>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	23fa      	movs	r3, #250	; 0xfa
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d203      	bcs.n	8003e84 <CheckRegularState+0x58>
	{
		mode = reg_charging;
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <CheckRegularState+0x9c>)
 8003e7e:	2203      	movs	r2, #3
 8003e80:	701a      	strb	r2, [r3, #0]
 8003e82:	e01e      	b.n	8003ec2 <CheckRegularState+0x96>
	}
	else if(isCharging != BATTERY_IS_CHARGING && measBat <  BATTERY_LIMIT_RED)
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <CheckRegularState+0xa0>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d008      	beq.n	8003e9e <CheckRegularState+0x72>
 8003e8c:	4b10      	ldr	r3, [pc, #64]	; (8003ed0 <CheckRegularState+0xa4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a10      	ldr	r2, [pc, #64]	; (8003ed4 <CheckRegularState+0xa8>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d803      	bhi.n	8003e9e <CheckRegularState+0x72>
	{
		mode = reg_discharged;
 8003e96:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <CheckRegularState+0x9c>)
 8003e98:	2202      	movs	r2, #2
 8003e9a:	701a      	strb	r2, [r3, #0]
 8003e9c:	e011      	b.n	8003ec2 <CheckRegularState+0x96>
	}
	else if(isCharging != BATTERY_IS_CHARGING && measBat <  BATTERY_LIMIT_ORANGE)
 8003e9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <CheckRegularState+0xa0>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d008      	beq.n	8003eb8 <CheckRegularState+0x8c>
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <CheckRegularState+0xa4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <CheckRegularState+0xac>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d803      	bhi.n	8003eb8 <CheckRegularState+0x8c>
	{
		mode = reg_bat_low;
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <CheckRegularState+0x9c>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
 8003eb6:	e004      	b.n	8003ec2 <CheckRegularState+0x96>
	}
	else
	{
		mode = regular;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <CheckRegularState+0x9c>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e000      	b.n	8003ec2 <CheckRegularState+0x96>
		return;
 8003ec0:	46c0      	nop			; (mov r8, r8)
	}
}
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	200006bd 	.word	0x200006bd
 8003ecc:	200006fd 	.word	0x200006fd
 8003ed0:	200006b8 	.word	0x200006b8
 8003ed4:	00000e73 	.word	0x00000e73
 8003ed8:	00000ea5 	.word	0x00000ea5

08003edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ee0:	b672      	cpsid	i
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ee4:	e7fe      	b.n	8003ee4 <Error_Handler+0x8>
	...

08003ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_MspInit+0x34>)
 8003eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_MspInit+0x34>)
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <HAL_MspInit+0x34>)
 8003efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <HAL_MspInit+0x34>)
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	0549      	lsls	r1, r1, #21
 8003f02:	430a      	orrs	r2, r1
 8003f04:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	2100      	movs	r1, #0
 8003f0a:	2004      	movs	r0, #4
 8003f0c:	f003 f95c 	bl	80071c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003f10:	2004      	movs	r0, #4
 8003f12:	f003 f96e 	bl	80071f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000

08003f20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f20:	b590      	push	{r4, r7, lr}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	240c      	movs	r4, #12
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	2314      	movs	r3, #20
 8003f30:	001a      	movs	r2, r3
 8003f32:	2100      	movs	r1, #0
 8003f34:	f005 fff4 	bl	8009f20 <memset>
  if(hadc->Instance==ADC1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a14      	ldr	r2, [pc, #80]	; (8003f90 <HAL_ADC_MspInit+0x70>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d122      	bne.n	8003f88 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f42:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_ADC_MspInit+0x74>)
 8003f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_ADC_MspInit+0x74>)
 8003f48:	2180      	movs	r1, #128	; 0x80
 8003f4a:	0089      	lsls	r1, r1, #2
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f50:	4b10      	ldr	r3, [pc, #64]	; (8003f94 <HAL_ADC_MspInit+0x74>)
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	4b0f      	ldr	r3, [pc, #60]	; (8003f94 <HAL_ADC_MspInit+0x74>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f5c:	4b0d      	ldr	r3, [pc, #52]	; (8003f94 <HAL_ADC_MspInit+0x74>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	2201      	movs	r2, #1
 8003f62:	4013      	ands	r3, r2
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = A_BAT_Pin;
 8003f68:	193b      	adds	r3, r7, r4
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f6e:	193b      	adds	r3, r7, r4
 8003f70:	2203      	movs	r2, #3
 8003f72:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f74:	193b      	adds	r3, r7, r4
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(A_BAT_GPIO_Port, &GPIO_InitStruct);
 8003f7a:	193a      	adds	r2, r7, r4
 8003f7c:	23a0      	movs	r3, #160	; 0xa0
 8003f7e:	05db      	lsls	r3, r3, #23
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f003 fb18 	bl	80075b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f88:	46c0      	nop			; (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b009      	add	sp, #36	; 0x24
 8003f8e:	bd90      	pop	{r4, r7, pc}
 8003f90:	40012400 	.word	0x40012400
 8003f94:	40021000 	.word	0x40021000

08003f98 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a06      	ldr	r2, [pc, #24]	; (8003fc0 <HAL_RTC_MspInit+0x28>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d106      	bne.n	8003fb8 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_RTC_MspInit+0x2c>)
 8003fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fae:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RTC_MspInit+0x2c>)
 8003fb0:	2180      	movs	r1, #128	; 0x80
 8003fb2:	02c9      	lsls	r1, r1, #11
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003fb8:	46c0      	nop			; (mov r8, r8)
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40002800 	.word	0x40002800
 8003fc4:	40021000 	.word	0x40021000

08003fc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	240c      	movs	r4, #12
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	2314      	movs	r3, #20
 8003fd8:	001a      	movs	r2, r3
 8003fda:	2100      	movs	r1, #0
 8003fdc:	f005 ffa0 	bl	8009f20 <memset>
  if(hspi->Instance==SPI1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a43      	ldr	r2, [pc, #268]	; (80040f4 <HAL_SPI_MspInit+0x12c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d000      	beq.n	8003fec <HAL_SPI_MspInit+0x24>
 8003fea:	e07f      	b.n	80040ec <HAL_SPI_MspInit+0x124>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003fec:	4b42      	ldr	r3, [pc, #264]	; (80040f8 <HAL_SPI_MspInit+0x130>)
 8003fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ff0:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_SPI_MspInit+0x130>)
 8003ff2:	2180      	movs	r1, #128	; 0x80
 8003ff4:	0149      	lsls	r1, r1, #5
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ffa:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <HAL_SPI_MspInit+0x130>)
 8003ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	; (80040f8 <HAL_SPI_MspInit+0x130>)
 8004000:	2101      	movs	r1, #1
 8004002:	430a      	orrs	r2, r1
 8004004:	62da      	str	r2, [r3, #44]	; 0x2c
 8004006:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <HAL_SPI_MspInit+0x130>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	2201      	movs	r2, #1
 800400c:	4013      	ands	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 8004012:	0021      	movs	r1, r4
 8004014:	187b      	adds	r3, r7, r1
 8004016:	22a0      	movs	r2, #160	; 0xa0
 8004018:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401a:	187b      	adds	r3, r7, r1
 800401c:	2202      	movs	r2, #2
 800401e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004020:	187b      	adds	r3, r7, r1
 8004022:	2200      	movs	r2, #0
 8004024:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004026:	187b      	adds	r3, r7, r1
 8004028:	2203      	movs	r2, #3
 800402a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800402c:	187b      	adds	r3, r7, r1
 800402e:	2200      	movs	r2, #0
 8004030:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004032:	187a      	adds	r2, r7, r1
 8004034:	23a0      	movs	r3, #160	; 0xa0
 8004036:	05db      	lsls	r3, r3, #23
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f003 fabc 	bl	80075b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004040:	4b2e      	ldr	r3, [pc, #184]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004042:	4a2f      	ldr	r2, [pc, #188]	; (8004100 <HAL_SPI_MspInit+0x138>)
 8004044:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004046:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004048:	2201      	movs	r2, #1
 800404a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800404c:	4b2b      	ldr	r3, [pc, #172]	; (80040fc <HAL_SPI_MspInit+0x134>)
 800404e:	2210      	movs	r2, #16
 8004050:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004052:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004054:	2200      	movs	r2, #0
 8004056:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004058:	4b28      	ldr	r3, [pc, #160]	; (80040fc <HAL_SPI_MspInit+0x134>)
 800405a:	2280      	movs	r2, #128	; 0x80
 800405c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800405e:	4b27      	ldr	r3, [pc, #156]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004060:	2280      	movs	r2, #128	; 0x80
 8004062:	0052      	lsls	r2, r2, #1
 8004064:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	00d2      	lsls	r2, r2, #3
 800406c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800406e:	4b23      	ldr	r3, [pc, #140]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004070:	2200      	movs	r2, #0
 8004072:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004074:	4b21      	ldr	r3, [pc, #132]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004076:	2200      	movs	r2, #0
 8004078:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_SPI_MspInit+0x134>)
 800407c:	0018      	movs	r0, r3
 800407e:	f003 f8d5 	bl	800722c <HAL_DMA_Init>
 8004082:	1e03      	subs	r3, r0, #0
 8004084:	d001      	beq.n	800408a <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8004086:	f7ff ff29 	bl	8003edc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1b      	ldr	r2, [pc, #108]	; (80040fc <HAL_SPI_MspInit+0x134>)
 800408e:	649a      	str	r2, [r3, #72]	; 0x48
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_SPI_MspInit+0x134>)
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 8004098:	4a1b      	ldr	r2, [pc, #108]	; (8004108 <HAL_SPI_MspInit+0x140>)
 800409a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800409c:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 800409e:	2201      	movs	r2, #1
 80040a0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80040a2:	4b18      	ldr	r3, [pc, #96]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040ae:	4b15      	ldr	r3, [pc, #84]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040b0:	2280      	movs	r2, #128	; 0x80
 80040b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040b4:	4b13      	ldr	r3, [pc, #76]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040b6:	2280      	movs	r2, #128	; 0x80
 80040b8:	0052      	lsls	r2, r2, #1
 80040ba:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80040bc:	4b11      	ldr	r3, [pc, #68]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	0112      	lsls	r2, r2, #4
 80040c2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040ca:	4b0e      	ldr	r3, [pc, #56]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040d2:	0018      	movs	r0, r3
 80040d4:	f003 f8aa 	bl	800722c <HAL_DMA_Init>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d001      	beq.n	80040e0 <HAL_SPI_MspInit+0x118>
    {
      Error_Handler();
 80040dc:	f7ff fefe 	bl	8003edc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a08      	ldr	r2, [pc, #32]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80040e6:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_SPI_MspInit+0x13c>)
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	b009      	add	sp, #36	; 0x24
 80040f2:	bd90      	pop	{r4, r7, pc}
 80040f4:	40013000 	.word	0x40013000
 80040f8:	40021000 	.word	0x40021000
 80040fc:	200001e8 	.word	0x200001e8
 8004100:	40020030 	.word	0x40020030
 8004104:	20000230 	.word	0x20000230
 8004108:	4002001c 	.word	0x4002001c

0800410c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b089      	sub	sp, #36	; 0x24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	240c      	movs	r4, #12
 8004116:	193b      	adds	r3, r7, r4
 8004118:	0018      	movs	r0, r3
 800411a:	2314      	movs	r3, #20
 800411c:	001a      	movs	r2, r3
 800411e:	2100      	movs	r1, #0
 8004120:	f005 fefe 	bl	8009f20 <memset>
  if(huart->Instance==USART1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_UART_MspInit+0x80>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d12a      	bne.n	8004184 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800412e:	4b18      	ldr	r3, [pc, #96]	; (8004190 <HAL_UART_MspInit+0x84>)
 8004130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <HAL_UART_MspInit+0x84>)
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	01c9      	lsls	r1, r1, #7
 8004138:	430a      	orrs	r2, r1
 800413a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413c:	4b14      	ldr	r3, [pc, #80]	; (8004190 <HAL_UART_MspInit+0x84>)
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4b13      	ldr	r3, [pc, #76]	; (8004190 <HAL_UART_MspInit+0x84>)
 8004142:	2101      	movs	r1, #1
 8004144:	430a      	orrs	r2, r1
 8004146:	62da      	str	r2, [r3, #44]	; 0x2c
 8004148:	4b11      	ldr	r3, [pc, #68]	; (8004190 <HAL_UART_MspInit+0x84>)
 800414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414c:	2201      	movs	r2, #1
 800414e:	4013      	ands	r3, r2
 8004150:	60bb      	str	r3, [r7, #8]
 8004152:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004154:	193b      	adds	r3, r7, r4
 8004156:	22c0      	movs	r2, #192	; 0xc0
 8004158:	00d2      	lsls	r2, r2, #3
 800415a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	0021      	movs	r1, r4
 800415e:	187b      	adds	r3, r7, r1
 8004160:	2202      	movs	r2, #2
 8004162:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	187b      	adds	r3, r7, r1
 8004166:	2200      	movs	r2, #0
 8004168:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2203      	movs	r2, #3
 800416e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004170:	187b      	adds	r3, r7, r1
 8004172:	2204      	movs	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004176:	187a      	adds	r2, r7, r1
 8004178:	23a0      	movs	r3, #160	; 0xa0
 800417a:	05db      	lsls	r3, r3, #23
 800417c:	0011      	movs	r1, r2
 800417e:	0018      	movs	r0, r3
 8004180:	f003 fa1a 	bl	80075b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b009      	add	sp, #36	; 0x24
 800418a:	bd90      	pop	{r4, r7, pc}
 800418c:	40013800 	.word	0x40013800
 8004190:	40021000 	.word	0x40021000

08004194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004198:	e7fe      	b.n	8004198 <NMI_Handler+0x4>

0800419a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800419e:	e7fe      	b.n	800419e <HardFault_Handler+0x4>

080041a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t l_key_pressed, r_key_pressed;
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041b8:	f002 fafe 	bl	80067b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(uwTick%10 == 0){
 80041bc:	4b2f      	ldr	r3, [pc, #188]	; (800427c <SysTick_Handler+0xc8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	210a      	movs	r1, #10
 80041c2:	0018      	movs	r0, r3
 80041c4:	f7fc f830 	bl	8000228 <__aeabi_uidivmod>
 80041c8:	1e0b      	subs	r3, r1, #0
 80041ca:	d153      	bne.n	8004274 <SysTick_Handler+0xc0>
	  if (!HAL_GPIO_ReadPin(SW1_GPIO_Port, SW1_Pin)){
 80041cc:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <SysTick_Handler+0xcc>)
 80041ce:	2108      	movs	r1, #8
 80041d0:	0018      	movs	r0, r3
 80041d2:	f003 fb67 	bl	80078a4 <HAL_GPIO_ReadPin>
 80041d6:	1e03      	subs	r3, r0, #0
 80041d8:	d10e      	bne.n	80041f8 <SysTick_Handler+0x44>
		  r_key_pressed = 1;
 80041da:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <SysTick_Handler+0xd0>)
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
		  if (keyboard.r_hold <= 1000){
 80041e0:	4b29      	ldr	r3, [pc, #164]	; (8004288 <SysTick_Handler+0xd4>)
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	23fa      	movs	r3, #250	; 0xfa
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d812      	bhi.n	8004212 <SysTick_Handler+0x5e>
			  keyboard.r_hold++;
 80041ec:	4b26      	ldr	r3, [pc, #152]	; (8004288 <SysTick_Handler+0xd4>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	4b25      	ldr	r3, [pc, #148]	; (8004288 <SysTick_Handler+0xd4>)
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	e00c      	b.n	8004212 <SysTick_Handler+0x5e>
		  }
	  }
	  else {
		  keyboard.r_hold = 0;
 80041f8:	4b23      	ldr	r3, [pc, #140]	; (8004288 <SysTick_Handler+0xd4>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	605a      	str	r2, [r3, #4]
		  if(r_key_pressed){
 80041fe:	4b21      	ldr	r3, [pc, #132]	; (8004284 <SysTick_Handler+0xd0>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d005      	beq.n	8004212 <SysTick_Handler+0x5e>
			  r_key_pressed = 0;
 8004206:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <SysTick_Handler+0xd0>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
			  keyboard.r_press = 1;
 800420c:	4b1e      	ldr	r3, [pc, #120]	; (8004288 <SysTick_Handler+0xd4>)
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
		  }

	  }
	  if (!HAL_GPIO_ReadPin(SW2_GPIO_Port, SW2_Pin)){
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	23a0      	movs	r3, #160	; 0xa0
 8004218:	05db      	lsls	r3, r3, #23
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f003 fb41 	bl	80078a4 <HAL_GPIO_ReadPin>
 8004222:	1e03      	subs	r3, r0, #0
 8004224:	d10e      	bne.n	8004244 <SysTick_Handler+0x90>
		  l_key_pressed = 1;
 8004226:	4b19      	ldr	r3, [pc, #100]	; (800428c <SysTick_Handler+0xd8>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
		  if (keyboard.l_hold <= 1000){
 800422c:	4b16      	ldr	r3, [pc, #88]	; (8004288 <SysTick_Handler+0xd4>)
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	23fa      	movs	r3, #250	; 0xfa
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	429a      	cmp	r2, r3
 8004236:	d812      	bhi.n	800425e <SysTick_Handler+0xaa>
			  keyboard.l_hold++;
 8004238:	4b13      	ldr	r3, [pc, #76]	; (8004288 <SysTick_Handler+0xd4>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	1c5a      	adds	r2, r3, #1
 800423e:	4b12      	ldr	r3, [pc, #72]	; (8004288 <SysTick_Handler+0xd4>)
 8004240:	60da      	str	r2, [r3, #12]
 8004242:	e00c      	b.n	800425e <SysTick_Handler+0xaa>
		  }
	  }
	  else {
		  keyboard.l_hold = 0;
 8004244:	4b10      	ldr	r3, [pc, #64]	; (8004288 <SysTick_Handler+0xd4>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
		  if(l_key_pressed){
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <SysTick_Handler+0xd8>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <SysTick_Handler+0xaa>
			  l_key_pressed = 0;
 8004252:	4b0e      	ldr	r3, [pc, #56]	; (800428c <SysTick_Handler+0xd8>)
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
			  keyboard.l_press = 1;
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <SysTick_Handler+0xd4>)
 800425a:	2201      	movs	r2, #1
 800425c:	721a      	strb	r2, [r3, #8]
		  }
	  }
	  if(uwTick % BATTERY_MEAS_DELAY == 0){
 800425e:	4b07      	ldr	r3, [pc, #28]	; (800427c <SysTick_Handler+0xc8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	490b      	ldr	r1, [pc, #44]	; (8004290 <SysTick_Handler+0xdc>)
 8004264:	0018      	movs	r0, r3
 8004266:	f7fb ffdf 	bl	8000228 <__aeabi_uidivmod>
 800426a:	1e0b      	subs	r3, r1, #0
 800426c:	d102      	bne.n	8004274 <SysTick_Handler+0xc0>
	  	  measRequest = 1;
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <SysTick_Handler+0xe0>)
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
	  }
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8004274:	46c0      	nop			; (mov r8, r8)
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	20000720 	.word	0x20000720
 8004280:	50000400 	.word	0x50000400
 8004284:	200006fe 	.word	0x200006fe
 8004288:	200006a8 	.word	0x200006a8
 800428c:	200006ff 	.word	0x200006ff
 8004290:	00002710 	.word	0x00002710
 8004294:	200006bc 	.word	0x200006bc

08004298 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800429c:	46c0      	nop			; (mov r8, r8)
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80042aa:	0018      	movs	r0, r3
 80042ac:	f003 f89c 	bl	80073e8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <DMA1_Channel2_3_IRQHandler+0x20>)
 80042b2:	0018      	movs	r0, r3
 80042b4:	f003 f898 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	20000230 	.word	0x20000230
 80042c4:	200001e8 	.word	0x200001e8

080042c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <_sbrk+0x5c>)
 80042d2:	4b15      	ldr	r3, [pc, #84]	; (8004328 <_sbrk+0x60>)
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042dc:	4b13      	ldr	r3, [pc, #76]	; (800432c <_sbrk+0x64>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042e4:	4b11      	ldr	r3, [pc, #68]	; (800432c <_sbrk+0x64>)
 80042e6:	4a12      	ldr	r2, [pc, #72]	; (8004330 <_sbrk+0x68>)
 80042e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <_sbrk+0x64>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	18d3      	adds	r3, r2, r3
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d207      	bcs.n	8004308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042f8:	f005 fde8 	bl	8009ecc <__errno>
 80042fc:	0003      	movs	r3, r0
 80042fe:	220c      	movs	r2, #12
 8004300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004302:	2301      	movs	r3, #1
 8004304:	425b      	negs	r3, r3
 8004306:	e009      	b.n	800431c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <_sbrk+0x64>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800430e:	4b07      	ldr	r3, [pc, #28]	; (800432c <_sbrk+0x64>)
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	18d2      	adds	r2, r2, r3
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <_sbrk+0x64>)
 8004318:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800431a:	68fb      	ldr	r3, [r7, #12]
}
 800431c:	0018      	movs	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	b006      	add	sp, #24
 8004322:	bd80      	pop	{r7, pc}
 8004324:	20002000 	.word	0x20002000
 8004328:	00000400 	.word	0x00000400
 800432c:	20000700 	.word	0x20000700
 8004330:	20000738 	.word	0x20000738

08004334 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004338:	46c0      	nop			; (mov r8, r8)
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
	...

08004340 <Reset_Handler>:
 8004340:	480d      	ldr	r0, [pc, #52]	; (8004378 <LoopForever+0x2>)
 8004342:	4685      	mov	sp, r0
 8004344:	480d      	ldr	r0, [pc, #52]	; (800437c <LoopForever+0x6>)
 8004346:	490e      	ldr	r1, [pc, #56]	; (8004380 <LoopForever+0xa>)
 8004348:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <LoopForever+0xe>)
 800434a:	2300      	movs	r3, #0
 800434c:	e002      	b.n	8004354 <LoopCopyDataInit>

0800434e <CopyDataInit>:
 800434e:	58d4      	ldr	r4, [r2, r3]
 8004350:	50c4      	str	r4, [r0, r3]
 8004352:	3304      	adds	r3, #4

08004354 <LoopCopyDataInit>:
 8004354:	18c4      	adds	r4, r0, r3
 8004356:	428c      	cmp	r4, r1
 8004358:	d3f9      	bcc.n	800434e <CopyDataInit>
 800435a:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <LoopForever+0x12>)
 800435c:	4c0b      	ldr	r4, [pc, #44]	; (800438c <LoopForever+0x16>)
 800435e:	2300      	movs	r3, #0
 8004360:	e001      	b.n	8004366 <LoopFillZerobss>

08004362 <FillZerobss>:
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	3204      	adds	r2, #4

08004366 <LoopFillZerobss>:
 8004366:	42a2      	cmp	r2, r4
 8004368:	d3fb      	bcc.n	8004362 <FillZerobss>
 800436a:	f7ff ffe3 	bl	8004334 <SystemInit>
 800436e:	f005 fdb3 	bl	8009ed8 <__libc_init_array>
 8004372:	f7fe fc7b 	bl	8002c6c <main>

08004376 <LoopForever>:
 8004376:	e7fe      	b.n	8004376 <LoopForever>
 8004378:	20002000 	.word	0x20002000
 800437c:	20000000 	.word	0x20000000
 8004380:	20000080 	.word	0x20000080
 8004384:	0800e5b0 	.word	0x0800e5b0
 8004388:	20000080 	.word	0x20000080
 800438c:	20000734 	.word	0x20000734

08004390 <ADC1_COMP_IRQHandler>:
 8004390:	e7fe      	b.n	8004390 <ADC1_COMP_IRQHandler>

08004392 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	607a      	str	r2, [r7, #4]
 80043a0:	781a      	ldrb	r2, [r3, #0]
 80043a2:	210e      	movs	r1, #14
 80043a4:	187b      	adds	r3, r7, r1
 80043a6:	801a      	strh	r2, [r3, #0]
  return ((d<<8) | *p);
 80043a8:	187b      	adds	r3, r7, r1
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	b21a      	sxth	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b21b      	sxth	r3, r3
 80043b6:	4313      	orrs	r3, r2
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	b29b      	uxth	r3, r3
}
 80043bc:	0018      	movs	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	b004      	add	sp, #16
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2204      	movs	r2, #4
 80043d8:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2204      	movs	r2, #4
 80043de:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2200      	movs	r2, #0
 80043e6:	5e9b      	ldrsh	r3, [r3, r2]
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	211c      	movs	r1, #28
 80043ee:	5e5b      	ldrsh	r3, [r3, r1]
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	b21a      	sxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2202      	movs	r2, #2
 8004406:	5e9b      	ldrsh	r3, [r3, r2]
 8004408:	b29a      	uxth	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	211c      	movs	r1, #28
 800440e:	5e5b      	ldrsh	r3, [r3, r1]
 8004410:	b29b      	uxth	r3, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29b      	uxth	r3, r3
 800441a:	b21a      	sxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	5e9a      	ldrsh	r2, [r3, r2]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2222      	movs	r2, #34	; 0x22
 800442e:	5e9a      	ldrsh	r2, [r3, r2]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2249      	movs	r2, #73	; 0x49
 8004438:	2101      	movs	r1, #1
 800443a:	5499      	strb	r1, [r3, r2]
   g->char_v_space = 1;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	224a      	movs	r2, #74	; 0x4a
 8004440:	2101      	movs	r1, #1
 8004442:	5499      	strb	r1, [r3, r2]
   g->font=NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	222f      	movs	r2, #47	; 0x2f
 8004454:	2100      	movs	r1, #0
 8004456:	5499      	strb	r1, [r3, r2]
   g->currentFont.char_width = 0;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	222e      	movs	r2, #46	; 0x2e
 800445c:	2100      	movs	r1, #0
 800445e:	5499      	strb	r1, [r3, r2]
   g->currentFont.number_of_chars = 0;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2250      	movs	r2, #80	; 0x50
 8004488:	491e      	ldr	r1, [pc, #120]	; (8004504 <UG_Init+0x140>)
 800448a:	5299      	strh	r1, [r3, r2]
   g->fore_color = C_WHITE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	224c      	movs	r2, #76	; 0x4c
 8004490:	2101      	movs	r1, #1
 8004492:	4249      	negs	r1, r1
 8004494:	5299      	strh	r1, [r3, r2]
   g->back_color = C_BLACK;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	224e      	movs	r2, #78	; 0x4e
 800449a:	2100      	movs	r1, #0
 800449c:	5299      	strh	r1, [r3, r2]
   g->next_window = NULL;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80044b0:	230f      	movs	r3, #15
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2200      	movs	r2, #0
 80044b6:	701a      	strb	r2, [r3, #0]
 80044b8:	e017      	b.n	80044ea <UG_Init+0x126>
   {
      g->driver[i].driver = NULL;
 80044ba:	210f      	movs	r1, #15
 80044bc:	187b      	adds	r3, r7, r1
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	330a      	adds	r3, #10
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	18d3      	adds	r3, r2, r3
 80044c8:	3304      	adds	r3, #4
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]
      g->driver[i].state = 0;
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	330a      	adds	r3, #10
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	18d3      	adds	r3, r2, r3
 80044da:	3308      	adds	r3, #8
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	781a      	ldrb	r2, [r3, #0]
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	3201      	adds	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	230f      	movs	r3, #15
 80044ec:	18fb      	adds	r3, r7, r3
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d9e2      	bls.n	80044ba <UG_Init+0xf6>
   }

   gui = g;
 80044f4:	4b04      	ldr	r3, [pc, #16]	; (8004508 <UG_Init+0x144>)
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
   return 1;
 80044fa:	2301      	movs	r3, #1
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}
 8004504:	00005c5d 	.word	0x00005c5d
 8004508:	20000704 	.word	0x20000704

0800450c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <UG_FontSelect+0x18>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000704 	.word	0x20000704

08004528 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af02      	add	r7, sp, #8
 800452e:	0002      	movs	r2, r0
 8004530:	1dbb      	adds	r3, r7, #6
 8004532:	801a      	strh	r2, [r3, #0]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8004534:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <UG_FillScreen+0x48>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	5e9b      	ldrsh	r3, [r3, r2]
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29b      	uxth	r3, r3
 8004544:	b21a      	sxth	r2, r3
 8004546:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <UG_FillScreen+0x48>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2102      	movs	r1, #2
 800454e:	5e5b      	ldrsh	r3, [r3, r1]
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	b219      	sxth	r1, r3
 8004558:	1dbb      	adds	r3, r7, #6
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	000b      	movs	r3, r1
 8004560:	2100      	movs	r1, #0
 8004562:	2000      	movs	r0, #0
 8004564:	f000 f806 	bl	8004574 <UG_FillFrame>
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000704 	.word	0x20000704

08004574 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8004574:	b5b0      	push	{r4, r5, r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af02      	add	r7, sp, #8
 800457a:	0005      	movs	r5, r0
 800457c:	000c      	movs	r4, r1
 800457e:	0010      	movs	r0, r2
 8004580:	0019      	movs	r1, r3
 8004582:	1dbb      	adds	r3, r7, #6
 8004584:	1c2a      	adds	r2, r5, #0
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	1c22      	adds	r2, r4, #0
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	1cbb      	adds	r3, r7, #2
 8004590:	1c02      	adds	r2, r0, #0
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	003b      	movs	r3, r7
 8004596:	1c0a      	adds	r2, r1, #0
 8004598:	801a      	strh	r2, [r3, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800459a:	1cba      	adds	r2, r7, #2
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	2100      	movs	r1, #0
 80045a0:	5e52      	ldrsh	r2, [r2, r1]
 80045a2:	2100      	movs	r1, #0
 80045a4:	5e5b      	ldrsh	r3, [r3, r1]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	da0c      	bge.n	80045c4 <UG_FillFrame+0x50>
     swap(x1,x2);
 80045aa:	210a      	movs	r1, #10
 80045ac:	187b      	adds	r3, r7, r1
 80045ae:	1dba      	adds	r2, r7, #6
 80045b0:	8812      	ldrh	r2, [r2, #0]
 80045b2:	801a      	strh	r2, [r3, #0]
 80045b4:	1dbb      	adds	r3, r7, #6
 80045b6:	1cba      	adds	r2, r7, #2
 80045b8:	8812      	ldrh	r2, [r2, #0]
 80045ba:	801a      	strh	r2, [r3, #0]
 80045bc:	1cbb      	adds	r3, r7, #2
 80045be:	187a      	adds	r2, r7, r1
 80045c0:	8812      	ldrh	r2, [r2, #0]
 80045c2:	801a      	strh	r2, [r3, #0]
   if ( y2 < y1 )
 80045c4:	003a      	movs	r2, r7
 80045c6:	1d3b      	adds	r3, r7, #4
 80045c8:	2100      	movs	r1, #0
 80045ca:	5e52      	ldrsh	r2, [r2, r1]
 80045cc:	2100      	movs	r1, #0
 80045ce:	5e5b      	ldrsh	r3, [r3, r1]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	da0c      	bge.n	80045ee <UG_FillFrame+0x7a>
     swap(y1,y2);
 80045d4:	2108      	movs	r1, #8
 80045d6:	187b      	adds	r3, r7, r1
 80045d8:	1d3a      	adds	r2, r7, #4
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	801a      	strh	r2, [r3, #0]
 80045de:	1d3b      	adds	r3, r7, #4
 80045e0:	003a      	movs	r2, r7
 80045e2:	8812      	ldrh	r2, [r2, #0]
 80045e4:	801a      	strh	r2, [r3, #0]
 80045e6:	003b      	movs	r3, r7
 80045e8:	187a      	adds	r2, r7, r1
 80045ea:	8812      	ldrh	r2, [r2, #0]
 80045ec:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80045ee:	4b33      	ldr	r3, [pc, #204]	; (80046bc <UG_FillFrame+0x148>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2260      	movs	r2, #96	; 0x60
 80045f4:	5c9b      	ldrb	r3, [r3, r2]
 80045f6:	001a      	movs	r2, r3
 80045f8:	2302      	movs	r3, #2
 80045fa:	4013      	ands	r3, r2
 80045fc:	d017      	beq.n	800462e <UG_FillFrame+0xba>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80045fe:	4b2f      	ldr	r3, [pc, #188]	; (80046bc <UG_FillFrame+0x148>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004604:	001d      	movs	r5, r3
 8004606:	003b      	movs	r3, r7
 8004608:	2400      	movs	r4, #0
 800460a:	5f1c      	ldrsh	r4, [r3, r4]
 800460c:	1cbb      	adds	r3, r7, #2
 800460e:	2200      	movs	r2, #0
 8004610:	5e9a      	ldrsh	r2, [r3, r2]
 8004612:	1d3b      	adds	r3, r7, #4
 8004614:	2100      	movs	r1, #0
 8004616:	5e59      	ldrsh	r1, [r3, r1]
 8004618:	1dbb      	adds	r3, r7, #6
 800461a:	2000      	movs	r0, #0
 800461c:	5e18      	ldrsh	r0, [r3, r0]
 800461e:	2320      	movs	r3, #32
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	0023      	movs	r3, r4
 8004628:	47a8      	blx	r5
 800462a:	1e03      	subs	r3, r0, #0
 800462c:	d041      	beq.n	80046b2 <UG_FillFrame+0x13e>
   }

   for( m=y1; m<=y2; m++ )
 800462e:	230c      	movs	r3, #12
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	1d3a      	adds	r2, r7, #4
 8004634:	8812      	ldrh	r2, [r2, #0]
 8004636:	801a      	strh	r2, [r3, #0]
 8004638:	e031      	b.n	800469e <UG_FillFrame+0x12a>
   {
      for( n=x1; n<=x2; n++ )
 800463a:	230e      	movs	r3, #14
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	1dba      	adds	r2, r7, #6
 8004640:	8812      	ldrh	r2, [r2, #0]
 8004642:	801a      	strh	r2, [r3, #0]
 8004644:	e019      	b.n	800467a <UG_FillFrame+0x106>
      {
         gui->device->pset(n,m,c);
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <UG_FillFrame+0x148>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685c      	ldr	r4, [r3, #4]
 800464e:	2320      	movs	r3, #32
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	230c      	movs	r3, #12
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2100      	movs	r1, #0
 800465a:	5e59      	ldrsh	r1, [r3, r1]
 800465c:	250e      	movs	r5, #14
 800465e:	197b      	adds	r3, r7, r5
 8004660:	2000      	movs	r0, #0
 8004662:	5e1b      	ldrsh	r3, [r3, r0]
 8004664:	0018      	movs	r0, r3
 8004666:	47a0      	blx	r4
      for( n=x1; n<=x2; n++ )
 8004668:	0029      	movs	r1, r5
 800466a:	187b      	adds	r3, r7, r1
 800466c:	2200      	movs	r2, #0
 800466e:	5e9b      	ldrsh	r3, [r3, r2]
 8004670:	b29b      	uxth	r3, r3
 8004672:	3301      	adds	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	187b      	adds	r3, r7, r1
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	230e      	movs	r3, #14
 800467c:	18fa      	adds	r2, r7, r3
 800467e:	1cbb      	adds	r3, r7, #2
 8004680:	2100      	movs	r1, #0
 8004682:	5e52      	ldrsh	r2, [r2, r1]
 8004684:	2100      	movs	r1, #0
 8004686:	5e5b      	ldrsh	r3, [r3, r1]
 8004688:	429a      	cmp	r2, r3
 800468a:	dddc      	ble.n	8004646 <UG_FillFrame+0xd2>
   for( m=y1; m<=y2; m++ )
 800468c:	210c      	movs	r1, #12
 800468e:	187b      	adds	r3, r7, r1
 8004690:	2200      	movs	r2, #0
 8004692:	5e9b      	ldrsh	r3, [r3, r2]
 8004694:	b29b      	uxth	r3, r3
 8004696:	3301      	adds	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	187b      	adds	r3, r7, r1
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	230c      	movs	r3, #12
 80046a0:	18fa      	adds	r2, r7, r3
 80046a2:	003b      	movs	r3, r7
 80046a4:	2100      	movs	r1, #0
 80046a6:	5e52      	ldrsh	r2, [r2, r1]
 80046a8:	2100      	movs	r1, #0
 80046aa:	5e5b      	ldrsh	r3, [r3, r1]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	ddc4      	ble.n	800463a <UG_FillFrame+0xc6>
 80046b0:	e000      	b.n	80046b4 <UG_FillFrame+0x140>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80046b2:	46c0      	nop			; (mov r8, r8)
      }
   }
}
 80046b4:	46bd      	mov	sp, r7
 80046b6:	b004      	add	sp, #16
 80046b8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	20000704 	.word	0x20000704

080046c0 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80046c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c2:	b08b      	sub	sp, #44	; 0x2c
 80046c4:	af02      	add	r7, sp, #8
 80046c6:	0005      	movs	r5, r0
 80046c8:	000c      	movs	r4, r1
 80046ca:	0010      	movs	r0, r2
 80046cc:	0019      	movs	r1, r3
 80046ce:	1dbb      	adds	r3, r7, #6
 80046d0:	1c2a      	adds	r2, r5, #0
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	1d3b      	adds	r3, r7, #4
 80046d6:	1c22      	adds	r2, r4, #0
 80046d8:	801a      	strh	r2, [r3, #0]
 80046da:	1cbb      	adds	r3, r7, #2
 80046dc:	1c02      	adds	r2, r0, #0
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	003b      	movs	r3, r7
 80046e2:	1c0a      	adds	r2, r1, #0
 80046e4:	801a      	strh	r2, [r3, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80046e6:	4ba6      	ldr	r3, [pc, #664]	; (8004980 <UG_DrawLine+0x2c0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2258      	movs	r2, #88	; 0x58
 80046ec:	5c9b      	ldrb	r3, [r3, r2]
 80046ee:	001a      	movs	r2, r3
 80046f0:	2302      	movs	r3, #2
 80046f2:	4013      	ands	r3, r2
 80046f4:	d01a      	beq.n	800472c <UG_DrawLine+0x6c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80046f6:	4ba2      	ldr	r3, [pc, #648]	; (8004980 <UG_DrawLine+0x2c0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	001d      	movs	r5, r3
 80046fe:	003b      	movs	r3, r7
 8004700:	2400      	movs	r4, #0
 8004702:	5f1c      	ldrsh	r4, [r3, r4]
 8004704:	1cbb      	adds	r3, r7, #2
 8004706:	2200      	movs	r2, #0
 8004708:	5e9a      	ldrsh	r2, [r3, r2]
 800470a:	1d3b      	adds	r3, r7, #4
 800470c:	2100      	movs	r1, #0
 800470e:	5e59      	ldrsh	r1, [r3, r1]
 8004710:	1dbb      	adds	r3, r7, #6
 8004712:	2000      	movs	r0, #0
 8004714:	5e18      	ldrsh	r0, [r3, r0]
 8004716:	2330      	movs	r3, #48	; 0x30
 8004718:	2608      	movs	r6, #8
 800471a:	199b      	adds	r3, r3, r6
 800471c:	19db      	adds	r3, r3, r7
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	0023      	movs	r3, r4
 8004724:	47a8      	blx	r5
 8004726:	1e03      	subs	r3, r0, #0
 8004728:	d100      	bne.n	800472c <UG_DrawLine+0x6c>
 800472a:	e125      	b.n	8004978 <UG_DrawLine+0x2b8>
   }

   dx = x2 - x1;
 800472c:	1cbb      	adds	r3, r7, #2
 800472e:	881a      	ldrh	r2, [r3, #0]
 8004730:	1dbb      	adds	r3, r7, #6
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	b29a      	uxth	r2, r3
 8004738:	2114      	movs	r1, #20
 800473a:	187b      	adds	r3, r7, r1
 800473c:	801a      	strh	r2, [r3, #0]
   dy = y2 - y1;
 800473e:	003b      	movs	r3, r7
 8004740:	881a      	ldrh	r2, [r3, #0]
 8004742:	1d3b      	adds	r3, r7, #4
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	b29a      	uxth	r2, r3
 800474a:	2012      	movs	r0, #18
 800474c:	183b      	adds	r3, r7, r0
 800474e:	801a      	strh	r2, [r3, #0]
   dxabs = (dx>0)?dx:-dx;
 8004750:	187b      	adds	r3, r7, r1
 8004752:	2200      	movs	r2, #0
 8004754:	5e9b      	ldrsh	r3, [r3, r2]
 8004756:	17da      	asrs	r2, r3, #31
 8004758:	189b      	adds	r3, r3, r2
 800475a:	4053      	eors	r3, r2
 800475c:	b29a      	uxth	r2, r3
 800475e:	2310      	movs	r3, #16
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	801a      	strh	r2, [r3, #0]
   dyabs = (dy>0)?dy:-dy;
 8004764:	183b      	adds	r3, r7, r0
 8004766:	2200      	movs	r2, #0
 8004768:	5e9b      	ldrsh	r3, [r3, r2]
 800476a:	17da      	asrs	r2, r3, #31
 800476c:	189b      	adds	r3, r3, r2
 800476e:	4053      	eors	r3, r2
 8004770:	b29a      	uxth	r2, r3
 8004772:	230e      	movs	r3, #14
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	801a      	strh	r2, [r3, #0]
   sgndx = (dx>0)?1:-1;
 8004778:	187b      	adds	r3, r7, r1
 800477a:	2200      	movs	r2, #0
 800477c:	5e9b      	ldrsh	r3, [r3, r2]
 800477e:	2b00      	cmp	r3, #0
 8004780:	dd01      	ble.n	8004786 <UG_DrawLine+0xc6>
 8004782:	2201      	movs	r2, #1
 8004784:	e001      	b.n	800478a <UG_DrawLine+0xca>
 8004786:	2301      	movs	r3, #1
 8004788:	425a      	negs	r2, r3
 800478a:	230c      	movs	r3, #12
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	801a      	strh	r2, [r3, #0]
   sgndy = (dy>0)?1:-1;
 8004790:	2312      	movs	r3, #18
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	2200      	movs	r2, #0
 8004796:	5e9b      	ldrsh	r3, [r3, r2]
 8004798:	2b00      	cmp	r3, #0
 800479a:	dd01      	ble.n	80047a0 <UG_DrawLine+0xe0>
 800479c:	2201      	movs	r2, #1
 800479e:	e001      	b.n	80047a4 <UG_DrawLine+0xe4>
 80047a0:	2301      	movs	r3, #1
 80047a2:	425a      	negs	r2, r3
 80047a4:	230a      	movs	r3, #10
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	801a      	strh	r2, [r3, #0]
   x = dyabs >> 1;
 80047aa:	231c      	movs	r3, #28
 80047ac:	18fb      	adds	r3, r7, r3
 80047ae:	250e      	movs	r5, #14
 80047b0:	197a      	adds	r2, r7, r5
 80047b2:	2100      	movs	r1, #0
 80047b4:	5e52      	ldrsh	r2, [r2, r1]
 80047b6:	1052      	asrs	r2, r2, #1
 80047b8:	801a      	strh	r2, [r3, #0]
   y = dxabs >> 1;
 80047ba:	231a      	movs	r3, #26
 80047bc:	18fb      	adds	r3, r7, r3
 80047be:	2610      	movs	r6, #16
 80047c0:	19ba      	adds	r2, r7, r6
 80047c2:	2100      	movs	r1, #0
 80047c4:	5e52      	ldrsh	r2, [r2, r1]
 80047c6:	1052      	asrs	r2, r2, #1
 80047c8:	801a      	strh	r2, [r3, #0]
   drawx = x1;
 80047ca:	2018      	movs	r0, #24
 80047cc:	183b      	adds	r3, r7, r0
 80047ce:	1dba      	adds	r2, r7, #6
 80047d0:	8812      	ldrh	r2, [r2, #0]
 80047d2:	801a      	strh	r2, [r3, #0]
   drawy = y1;
 80047d4:	2116      	movs	r1, #22
 80047d6:	187b      	adds	r3, r7, r1
 80047d8:	1d3a      	adds	r2, r7, #4
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	801a      	strh	r2, [r3, #0]

   gui->device->pset(drawx, drawy,c);
 80047de:	4b68      	ldr	r3, [pc, #416]	; (8004980 <UG_DrawLine+0x2c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685c      	ldr	r4, [r3, #4]
 80047e6:	2330      	movs	r3, #48	; 0x30
 80047e8:	2208      	movs	r2, #8
 80047ea:	189b      	adds	r3, r3, r2
 80047ec:	19db      	adds	r3, r3, r7
 80047ee:	881a      	ldrh	r2, [r3, #0]
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	2100      	movs	r1, #0
 80047f4:	5e59      	ldrsh	r1, [r3, r1]
 80047f6:	183b      	adds	r3, r7, r0
 80047f8:	2000      	movs	r0, #0
 80047fa:	5e1b      	ldrsh	r3, [r3, r0]
 80047fc:	0018      	movs	r0, r3
 80047fe:	47a0      	blx	r4

   if( dxabs >= dyabs )
 8004800:	19ba      	adds	r2, r7, r6
 8004802:	197b      	adds	r3, r7, r5
 8004804:	2100      	movs	r1, #0
 8004806:	5e52      	ldrsh	r2, [r2, r1]
 8004808:	2100      	movs	r1, #0
 800480a:	5e5b      	ldrsh	r3, [r3, r1]
 800480c:	429a      	cmp	r2, r3
 800480e:	db59      	blt.n	80048c4 <UG_DrawLine+0x204>
   {
      for( n=0; n<dxabs; n++ )
 8004810:	231e      	movs	r3, #30
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	2200      	movs	r2, #0
 8004816:	801a      	strh	r2, [r3, #0]
 8004818:	e049      	b.n	80048ae <UG_DrawLine+0x1ee>
      {
         y += dyabs;
 800481a:	211a      	movs	r1, #26
 800481c:	187b      	adds	r3, r7, r1
 800481e:	881a      	ldrh	r2, [r3, #0]
 8004820:	230e      	movs	r3, #14
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	18d3      	adds	r3, r2, r3
 8004828:	b29a      	uxth	r2, r3
 800482a:	187b      	adds	r3, r7, r1
 800482c:	801a      	strh	r2, [r3, #0]
         if( y >= dxabs )
 800482e:	187a      	adds	r2, r7, r1
 8004830:	2010      	movs	r0, #16
 8004832:	183b      	adds	r3, r7, r0
 8004834:	2400      	movs	r4, #0
 8004836:	5f12      	ldrsh	r2, [r2, r4]
 8004838:	2400      	movs	r4, #0
 800483a:	5f1b      	ldrsh	r3, [r3, r4]
 800483c:	429a      	cmp	r2, r3
 800483e:	db11      	blt.n	8004864 <UG_DrawLine+0x1a4>
         {
            y -= dxabs;
 8004840:	187b      	adds	r3, r7, r1
 8004842:	881a      	ldrh	r2, [r3, #0]
 8004844:	183b      	adds	r3, r7, r0
 8004846:	881b      	ldrh	r3, [r3, #0]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	b29a      	uxth	r2, r3
 800484c:	187b      	adds	r3, r7, r1
 800484e:	801a      	strh	r2, [r3, #0]
            drawy += sgndy;
 8004850:	2116      	movs	r1, #22
 8004852:	187b      	adds	r3, r7, r1
 8004854:	881a      	ldrh	r2, [r3, #0]
 8004856:	230a      	movs	r3, #10
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	18d3      	adds	r3, r2, r3
 800485e:	b29a      	uxth	r2, r3
 8004860:	187b      	adds	r3, r7, r1
 8004862:	801a      	strh	r2, [r3, #0]
         }
         drawx += sgndx;
 8004864:	2018      	movs	r0, #24
 8004866:	183b      	adds	r3, r7, r0
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	230c      	movs	r3, #12
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	18d3      	adds	r3, r2, r3
 8004872:	b29a      	uxth	r2, r3
 8004874:	183b      	adds	r3, r7, r0
 8004876:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 8004878:	4b41      	ldr	r3, [pc, #260]	; (8004980 <UG_DrawLine+0x2c0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685c      	ldr	r4, [r3, #4]
 8004880:	2330      	movs	r3, #48	; 0x30
 8004882:	2208      	movs	r2, #8
 8004884:	189b      	adds	r3, r3, r2
 8004886:	19db      	adds	r3, r3, r7
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	2316      	movs	r3, #22
 800488c:	18fb      	adds	r3, r7, r3
 800488e:	2100      	movs	r1, #0
 8004890:	5e59      	ldrsh	r1, [r3, r1]
 8004892:	183b      	adds	r3, r7, r0
 8004894:	2000      	movs	r0, #0
 8004896:	5e1b      	ldrsh	r3, [r3, r0]
 8004898:	0018      	movs	r0, r3
 800489a:	47a0      	blx	r4
      for( n=0; n<dxabs; n++ )
 800489c:	211e      	movs	r1, #30
 800489e:	187b      	adds	r3, r7, r1
 80048a0:	2200      	movs	r2, #0
 80048a2:	5e9b      	ldrsh	r3, [r3, r2]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3301      	adds	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	187b      	adds	r3, r7, r1
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	231e      	movs	r3, #30
 80048b0:	18fa      	adds	r2, r7, r3
 80048b2:	2310      	movs	r3, #16
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	2100      	movs	r1, #0
 80048b8:	5e52      	ldrsh	r2, [r2, r1]
 80048ba:	2100      	movs	r1, #0
 80048bc:	5e5b      	ldrsh	r3, [r3, r1]
 80048be:	429a      	cmp	r2, r3
 80048c0:	dbab      	blt.n	800481a <UG_DrawLine+0x15a>
 80048c2:	e05a      	b.n	800497a <UG_DrawLine+0x2ba>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80048c4:	231e      	movs	r3, #30
 80048c6:	18fb      	adds	r3, r7, r3
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	e049      	b.n	8004962 <UG_DrawLine+0x2a2>
      {
         x += dxabs;
 80048ce:	211c      	movs	r1, #28
 80048d0:	187b      	adds	r3, r7, r1
 80048d2:	881a      	ldrh	r2, [r3, #0]
 80048d4:	2310      	movs	r3, #16
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	18d3      	adds	r3, r2, r3
 80048dc:	b29a      	uxth	r2, r3
 80048de:	187b      	adds	r3, r7, r1
 80048e0:	801a      	strh	r2, [r3, #0]
         if( x >= dyabs )
 80048e2:	187a      	adds	r2, r7, r1
 80048e4:	200e      	movs	r0, #14
 80048e6:	183b      	adds	r3, r7, r0
 80048e8:	2400      	movs	r4, #0
 80048ea:	5f12      	ldrsh	r2, [r2, r4]
 80048ec:	2400      	movs	r4, #0
 80048ee:	5f1b      	ldrsh	r3, [r3, r4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	db11      	blt.n	8004918 <UG_DrawLine+0x258>
         {
            x -= dyabs;
 80048f4:	187b      	adds	r3, r7, r1
 80048f6:	881a      	ldrh	r2, [r3, #0]
 80048f8:	183b      	adds	r3, r7, r0
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	b29a      	uxth	r2, r3
 8004900:	187b      	adds	r3, r7, r1
 8004902:	801a      	strh	r2, [r3, #0]
            drawx += sgndx;
 8004904:	2118      	movs	r1, #24
 8004906:	187b      	adds	r3, r7, r1
 8004908:	881a      	ldrh	r2, [r3, #0]
 800490a:	230c      	movs	r3, #12
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	18d3      	adds	r3, r2, r3
 8004912:	b29a      	uxth	r2, r3
 8004914:	187b      	adds	r3, r7, r1
 8004916:	801a      	strh	r2, [r3, #0]
         }
         drawy += sgndy;
 8004918:	2116      	movs	r1, #22
 800491a:	187b      	adds	r3, r7, r1
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	230a      	movs	r3, #10
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	18d3      	adds	r3, r2, r3
 8004926:	b29a      	uxth	r2, r3
 8004928:	187b      	adds	r3, r7, r1
 800492a:	801a      	strh	r2, [r3, #0]
         gui->device->pset(drawx, drawy,c);
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <UG_DrawLine+0x2c0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685c      	ldr	r4, [r3, #4]
 8004934:	2330      	movs	r3, #48	; 0x30
 8004936:	2208      	movs	r2, #8
 8004938:	189b      	adds	r3, r3, r2
 800493a:	19db      	adds	r3, r3, r7
 800493c:	881a      	ldrh	r2, [r3, #0]
 800493e:	187b      	adds	r3, r7, r1
 8004940:	2100      	movs	r1, #0
 8004942:	5e59      	ldrsh	r1, [r3, r1]
 8004944:	2318      	movs	r3, #24
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	2000      	movs	r0, #0
 800494a:	5e1b      	ldrsh	r3, [r3, r0]
 800494c:	0018      	movs	r0, r3
 800494e:	47a0      	blx	r4
      for( n=0; n<dyabs; n++ )
 8004950:	211e      	movs	r1, #30
 8004952:	187b      	adds	r3, r7, r1
 8004954:	2200      	movs	r2, #0
 8004956:	5e9b      	ldrsh	r3, [r3, r2]
 8004958:	b29b      	uxth	r3, r3
 800495a:	3301      	adds	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	187b      	adds	r3, r7, r1
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	231e      	movs	r3, #30
 8004964:	18fa      	adds	r2, r7, r3
 8004966:	230e      	movs	r3, #14
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2100      	movs	r1, #0
 800496c:	5e52      	ldrsh	r2, [r2, r1]
 800496e:	2100      	movs	r1, #0
 8004970:	5e5b      	ldrsh	r3, [r3, r1]
 8004972:	429a      	cmp	r2, r3
 8004974:	dbab      	blt.n	80048ce <UG_DrawLine+0x20e>
 8004976:	e000      	b.n	800497a <UG_DrawLine+0x2ba>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004978:	46c0      	nop			; (mov r8, r8)
      }
   }  
}
 800497a:	46bd      	mov	sp, r7
 800497c:	b009      	add	sp, #36	; 0x24
 800497e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004980:	20000704 	.word	0x20000704

08004984 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004986:	b087      	sub	sp, #28
 8004988:	af02      	add	r7, sp, #8
 800498a:	603a      	str	r2, [r7, #0]
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	1c02      	adds	r2, r0, #0
 8004990:	801a      	strh	r2, [r3, #0]
 8004992:	1d3b      	adds	r3, r7, #4
 8004994:	1c0a      	adds	r2, r1, #0
 8004996:	801a      	strh	r2, [r3, #0]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8004998:	230e      	movs	r3, #14
 800499a:	18fb      	adds	r3, r7, r3
 800499c:	1dba      	adds	r2, r7, #6
 800499e:	8812      	ldrh	r2, [r2, #0]
 80049a0:	801a      	strh	r2, [r3, #0]
   yp=y;
 80049a2:	230c      	movs	r3, #12
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	1d3a      	adds	r2, r7, #4
 80049a8:	8812      	ldrh	r2, [r2, #0]
 80049aa:	801a      	strh	r2, [r3, #0]

   _UG_FontSelect(gui->font);
 80049ac:	4b54      	ldr	r3, [pc, #336]	; (8004b00 <UG_PutString+0x17c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 faf0 	bl	8004f98 <_UG_FontSelect>
   while ( *str != 0 )
 80049b8:	e084      	b.n	8004ac4 <UG_PutString+0x140>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80049ba:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <UG_PutString+0x17c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	222d      	movs	r2, #45	; 0x2d
 80049c0:	5c9b      	ldrb	r3, [r3, r2]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d108      	bne.n	80049d8 <UG_PutString+0x54>
         chr = _UG_DecodeUTF8(&str);
 80049c6:	230a      	movs	r3, #10
 80049c8:	18fc      	adds	r4, r7, r3
 80049ca:	003b      	movs	r3, r7
 80049cc:	0018      	movs	r0, r3
 80049ce:	f000 f8e5 	bl	8004b9c <_UG_DecodeUTF8>
 80049d2:	0003      	movs	r3, r0
 80049d4:	8023      	strh	r3, [r4, #0]
 80049d6:	e006      	b.n	80049e6 <UG_PutString+0x62>
      }
      else{
         chr = *str++;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	603a      	str	r2, [r7, #0]
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	230a      	movs	r3, #10
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	801a      	strh	r2, [r3, #0]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 80049e6:	230a      	movs	r3, #10
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	2b0a      	cmp	r3, #10
 80049ee:	d107      	bne.n	8004a00 <UG_PutString+0x7c>
      {
         xp = gui->device->x_dim;
 80049f0:	4b43      	ldr	r3, [pc, #268]	; (8004b00 <UG_PutString+0x17c>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	230e      	movs	r3, #14
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	8812      	ldrh	r2, [r2, #0]
 80049fc:	801a      	strh	r2, [r3, #0]
         continue;
 80049fe:	e061      	b.n	8004ac4 <UG_PutString+0x140>
      }
      cw = _UG_GetCharData(chr,NULL);
 8004a00:	2508      	movs	r5, #8
 8004a02:	197c      	adds	r4, r7, r5
 8004a04:	230a      	movs	r3, #10
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 f973 	bl	8004cf8 <_UG_GetCharData>
 8004a12:	0003      	movs	r3, r0
 8004a14:	8023      	strh	r3, [r4, #0]
      if(cw==-1) continue;
 8004a16:	197b      	adds	r3, r7, r5
 8004a18:	2200      	movs	r2, #0
 8004a1a:	5e9b      	ldrsh	r3, [r3, r2]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	d100      	bne.n	8004a22 <UG_PutString+0x9e>
 8004a20:	e050      	b.n	8004ac4 <UG_PutString+0x140>
      if ( xp + cw > gui->device->x_dim - 1 )
 8004a22:	4b37      	ldr	r3, [pc, #220]	; (8004b00 <UG_PutString+0x17c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	5e9b      	ldrsh	r3, [r3, r2]
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	200e      	movs	r0, #14
 8004a30:	183b      	adds	r3, r7, r0
 8004a32:	2200      	movs	r2, #0
 8004a34:	5e9a      	ldrsh	r2, [r3, r2]
 8004a36:	2308      	movs	r3, #8
 8004a38:	18fb      	adds	r3, r7, r3
 8004a3a:	2400      	movs	r4, #0
 8004a3c:	5f1b      	ldrsh	r3, [r3, r4]
 8004a3e:	18d3      	adds	r3, r2, r3
 8004a40:	4299      	cmp	r1, r3
 8004a42:	dc17      	bgt.n	8004a74 <UG_PutString+0xf0>
      {
         xp = x;
 8004a44:	183b      	adds	r3, r7, r0
 8004a46:	1dba      	adds	r2, r7, #6
 8004a48:	8812      	ldrh	r2, [r2, #0]
 8004a4a:	801a      	strh	r2, [r3, #0]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <UG_PutString+0x17c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	222f      	movs	r2, #47	; 0x2f
 8004a52:	5c9b      	ldrb	r3, [r3, r2]
 8004a54:	b21a      	sxth	r2, r3
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <UG_PutString+0x17c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	214a      	movs	r1, #74	; 0x4a
 8004a5c:	565b      	ldrsb	r3, [r3, r1]
 8004a5e:	b21b      	sxth	r3, r3
 8004a60:	18d3      	adds	r3, r2, r3
 8004a62:	b21b      	sxth	r3, r3
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	210c      	movs	r1, #12
 8004a68:	187b      	adds	r3, r7, r1
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	187b      	adds	r3, r7, r1
 8004a72:	801a      	strh	r2, [r3, #0]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <UG_PutString+0x17c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	224c      	movs	r2, #76	; 0x4c
 8004a7a:	5a9d      	ldrh	r5, [r3, r2]
 8004a7c:	4b20      	ldr	r3, [pc, #128]	; (8004b00 <UG_PutString+0x17c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	224e      	movs	r2, #78	; 0x4e
 8004a82:	5a9b      	ldrh	r3, [r3, r2]
 8004a84:	220c      	movs	r2, #12
 8004a86:	18ba      	adds	r2, r7, r2
 8004a88:	2400      	movs	r4, #0
 8004a8a:	5f14      	ldrsh	r4, [r2, r4]
 8004a8c:	260e      	movs	r6, #14
 8004a8e:	19ba      	adds	r2, r7, r6
 8004a90:	2100      	movs	r1, #0
 8004a92:	5e51      	ldrsh	r1, [r2, r1]
 8004a94:	220a      	movs	r2, #10
 8004a96:	18ba      	adds	r2, r7, r2
 8004a98:	8810      	ldrh	r0, [r2, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	002b      	movs	r3, r5
 8004a9e:	0022      	movs	r2, r4
 8004aa0:	f000 fafe 	bl	80050a0 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8004aa4:	4b16      	ldr	r3, [pc, #88]	; (8004b00 <UG_PutString+0x17c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2249      	movs	r2, #73	; 0x49
 8004aaa:	569b      	ldrsb	r3, [r3, r2]
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	2308      	movs	r3, #8
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	18d3      	adds	r3, r2, r3
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	19bb      	adds	r3, r7, r6
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	19bb      	adds	r3, r7, r6
 8004ac2:	801a      	strh	r2, [r3, #0]
   while ( *str != 0 )
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d000      	beq.n	8004ace <UG_PutString+0x14a>
 8004acc:	e775      	b.n	80049ba <UG_PutString+0x36>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <UG_PutString+0x17c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2268      	movs	r2, #104	; 0x68
 8004ad4:	5c9b      	ldrb	r3, [r3, r2]
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	2302      	movs	r3, #2
 8004ada:	4013      	ands	r3, r2
 8004adc:	d00c      	beq.n	8004af8 <UG_PutString+0x174>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <UG_PutString+0x17c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae4:	001c      	movs	r4, r3
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	425b      	negs	r3, r3
 8004aea:	2201      	movs	r2, #1
 8004aec:	4252      	negs	r2, r2
 8004aee:	2101      	movs	r1, #1
 8004af0:	4249      	negs	r1, r1
 8004af2:	2001      	movs	r0, #1
 8004af4:	4240      	negs	r0, r0
 8004af6:	47a0      	blx	r4
}
 8004af8:	46c0      	nop			; (mov r8, r8)
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b005      	add	sp, #20
 8004afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b00:	20000704 	.word	0x20000704

08004b04 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	1dbb      	adds	r3, r7, #6
 8004b0e:	801a      	strh	r2, [r3, #0]
   gui->fore_color = c;
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <UG_SetForecolor+0x20>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	1dba      	adds	r2, r7, #6
 8004b16:	214c      	movs	r1, #76	; 0x4c
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	525a      	strh	r2, [r3, r1]
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	20000704 	.word	0x20000704

08004b28 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	0002      	movs	r2, r0
 8004b30:	1dbb      	adds	r3, r7, #6
 8004b32:	801a      	strh	r2, [r3, #0]
   gui->back_color = c;
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <UG_SetBackcolor+0x20>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	1dba      	adds	r2, r7, #6
 8004b3a:	214e      	movs	r1, #78	; 0x4e
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	525a      	strh	r2, [r3, r1]
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20000704 	.word	0x20000704

08004b4c <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	0002      	movs	r2, r0
 8004b54:	1dbb      	adds	r3, r7, #6
 8004b56:	801a      	strh	r2, [r3, #0]
   gui->char_h_space = s;
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <UG_FontSetHSpace+0x24>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	1dba      	adds	r2, r7, #6
 8004b5e:	8812      	ldrh	r2, [r2, #0]
 8004b60:	b251      	sxtb	r1, r2
 8004b62:	2249      	movs	r2, #73	; 0x49
 8004b64:	5499      	strb	r1, [r3, r2]
}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b002      	add	sp, #8
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	20000704 	.word	0x20000704

08004b74 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	0002      	movs	r2, r0
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	801a      	strh	r2, [r3, #0]
   gui->char_v_space = s;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <UG_FontSetVSpace+0x24>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	1dba      	adds	r2, r7, #6
 8004b86:	8812      	ldrh	r2, [r2, #0]
 8004b88:	b251      	sxtb	r1, r2
 8004b8a:	224a      	movs	r2, #74	; 0x4a
 8004b8c:	5499      	strb	r1, [r3, r2]
}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b002      	add	sp, #8
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	20000704 	.word	0x20000704

08004b9c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  char c=**str;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	210f      	movs	r1, #15
 8004baa:	187b      	adds	r3, r7, r1
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	701a      	strb	r2, [r3, #0]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 8004bb0:	187b      	adds	r3, r7, r1
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b25b      	sxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	db08      	blt.n	8004bcc <_UG_DecodeUTF8+0x30>
  {
    *str = *str+1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	601a      	str	r2, [r3, #0]
    return c;
 8004bc4:	187b      	adds	r3, r7, r1
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	e091      	b.n	8004cf0 <_UG_DecodeUTF8+0x154>
  }

  UG_U8 bytes_left=0;
 8004bcc:	230e      	movs	r3, #14
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	701a      	strb	r2, [r3, #0]
  UG_CHAR encoding=0;
 8004bd4:	230c      	movs	r3, #12
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2200      	movs	r2, #0
 8004bda:	801a      	strh	r2, [r3, #0]

  while(**str)
 8004bdc:	e07d      	b.n	8004cda <_UG_DecodeUTF8+0x13e>
  {
    c=**str;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	210f      	movs	r1, #15
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	701a      	strb	r2, [r3, #0]
    *str = *str+1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8004bf4:	220e      	movs	r2, #14
 8004bf6:	18bb      	adds	r3, r7, r2
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d14f      	bne.n	8004c9e <_UG_DecodeUTF8+0x102>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8004bfe:	187b      	adds	r3, r7, r1
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2bdf      	cmp	r3, #223	; 0xdf
 8004c04:	d809      	bhi.n	8004c1a <_UG_DecodeUTF8+0x7e>
      {
        bytes_left = 1;
 8004c06:	18bb      	adds	r3, r7, r2
 8004c08:	2201      	movs	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
        c &= 0x01f;
 8004c0c:	187b      	adds	r3, r7, r1
 8004c0e:	187a      	adds	r2, r7, r1
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	211f      	movs	r1, #31
 8004c14:	400a      	ands	r2, r1
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e03a      	b.n	8004c90 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 8004c1a:	210f      	movs	r1, #15
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	2bef      	cmp	r3, #239	; 0xef
 8004c22:	d80a      	bhi.n	8004c3a <_UG_DecodeUTF8+0x9e>
      {
        bytes_left = 2;
 8004c24:	230e      	movs	r3, #14
 8004c26:	18fb      	adds	r3, r7, r3
 8004c28:	2202      	movs	r2, #2
 8004c2a:	701a      	strb	r2, [r3, #0]
        c &= 15;
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	187a      	adds	r2, r7, r1
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	210f      	movs	r1, #15
 8004c34:	400a      	ands	r2, r1
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e02a      	b.n	8004c90 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 8004c3a:	210f      	movs	r1, #15
 8004c3c:	187b      	adds	r3, r7, r1
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2bf7      	cmp	r3, #247	; 0xf7
 8004c42:	d80a      	bhi.n	8004c5a <_UG_DecodeUTF8+0xbe>
      {
        bytes_left = 3;
 8004c44:	230e      	movs	r3, #14
 8004c46:	18fb      	adds	r3, r7, r3
 8004c48:	2203      	movs	r2, #3
 8004c4a:	701a      	strb	r2, [r3, #0]
        c &= 7;
 8004c4c:	187b      	adds	r3, r7, r1
 8004c4e:	187a      	adds	r2, r7, r1
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	2107      	movs	r1, #7
 8004c54:	400a      	ands	r2, r1
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e01a      	b.n	8004c90 <_UG_DecodeUTF8+0xf4>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 8004c5a:	210f      	movs	r1, #15
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2bfb      	cmp	r3, #251	; 0xfb
 8004c62:	d80a      	bhi.n	8004c7a <_UG_DecodeUTF8+0xde>
      {
        bytes_left = 4;
 8004c64:	230e      	movs	r3, #14
 8004c66:	18fb      	adds	r3, r7, r3
 8004c68:	2204      	movs	r2, #4
 8004c6a:	701a      	strb	r2, [r3, #0]
        c &= 3;
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	187a      	adds	r2, r7, r1
 8004c70:	7812      	ldrb	r2, [r2, #0]
 8004c72:	2103      	movs	r1, #3
 8004c74:	400a      	ands	r2, r1
 8004c76:	701a      	strb	r2, [r3, #0]
 8004c78:	e00a      	b.n	8004c90 <_UG_DecodeUTF8+0xf4>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 8004c7a:	230e      	movs	r3, #14
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2205      	movs	r2, #5
 8004c80:	701a      	strb	r2, [r3, #0]
        c &= 1;
 8004c82:	220f      	movs	r2, #15
 8004c84:	18bb      	adds	r3, r7, r2
 8004c86:	18ba      	adds	r2, r7, r2
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	701a      	strb	r2, [r3, #0]
      }
      encoding = c;
 8004c90:	230c      	movs	r3, #12
 8004c92:	18fb      	adds	r3, r7, r3
 8004c94:	220f      	movs	r2, #15
 8004c96:	18ba      	adds	r2, r7, r2
 8004c98:	7812      	ldrb	r2, [r2, #0]
 8004c9a:	801a      	strh	r2, [r3, #0]
 8004c9c:	e01d      	b.n	8004cda <_UG_DecodeUTF8+0x13e>
    }
    else
    {
      encoding<<=6;
 8004c9e:	210c      	movs	r1, #12
 8004ca0:	187b      	adds	r3, r7, r1
 8004ca2:	187a      	adds	r2, r7, r1
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	0192      	lsls	r2, r2, #6
 8004ca8:	801a      	strh	r2, [r3, #0]
      encoding |= (c & 0x3F);
 8004caa:	230f      	movs	r3, #15
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	223f      	movs	r2, #63	; 0x3f
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	b21a      	sxth	r2, r3
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	2000      	movs	r0, #0
 8004cbc:	5e1b      	ldrsh	r3, [r3, r0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	b21a      	sxth	r2, r3
 8004cc2:	187b      	adds	r3, r7, r1
 8004cc4:	801a      	strh	r2, [r3, #0]
      if ( --bytes_left == 0 )
 8004cc6:	210e      	movs	r1, #14
 8004cc8:	187b      	adds	r3, r7, r1
 8004cca:	187a      	adds	r2, r7, r1
 8004ccc:	7812      	ldrb	r2, [r2, #0]
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <_UG_DecodeUTF8+0x14c>
  while(**str)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d000      	beq.n	8004ce6 <_UG_DecodeUTF8+0x14a>
 8004ce4:	e77b      	b.n	8004bde <_UG_DecodeUTF8+0x42>
 8004ce6:	e000      	b.n	8004cea <_UG_DecodeUTF8+0x14e>
        break;
 8004ce8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return encoding;
 8004cea:	230c      	movs	r3, #12
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	881b      	ldrh	r3, [r3, #0]
}
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b004      	add	sp, #16
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8004cf8:	b5b0      	push	{r4, r5, r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	0002      	movs	r2, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	1dbb      	adds	r3, r7, #6
 8004d04:	801a      	strh	r2, [r3, #0]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8004d06:	2316      	movs	r3, #22
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	801a      	strh	r2, [r3, #0]
  UG_U16 skip=0;
 8004d0e:	2314      	movs	r3, #20
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2200      	movs	r2, #0
 8004d14:	801a      	strh	r2, [r3, #0]
  UG_U16 t=0;
 8004d16:	2312      	movs	r3, #18
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	801a      	strh	r2, [r3, #0]
  UG_U8 range=0;
 8004d1e:	2311      	movs	r3, #17
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
  UG_U8 found=0;
 8004d26:	2310      	movs	r3, #16
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 8004d2e:	4b94      	ldr	r3, [pc, #592]	; (8004f80 <_UG_GetCharData+0x288>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d34:	4b93      	ldr	r3, [pc, #588]	; (8004f84 <_UG_GetCharData+0x28c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d110      	bne.n	8004d5e <_UG_GetCharData+0x66>
 8004d3c:	4b92      	ldr	r3, [pc, #584]	; (8004f88 <_UG_GetCharData+0x290>)
 8004d3e:	881b      	ldrh	r3, [r3, #0]
 8004d40:	1dba      	adds	r2, r7, #6
 8004d42:	8812      	ldrh	r2, [r2, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d10a      	bne.n	8004d5e <_UG_GetCharData+0x66>
    if(p){
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <_UG_GetCharData+0x5e>
      *p=last_p;                                                    // Load char bitmap address
 8004d4e:	4b8f      	ldr	r3, [pc, #572]	; (8004f8c <_UG_GetCharData+0x294>)
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8004d56:	4b8e      	ldr	r3, [pc, #568]	; (8004f90 <_UG_GetCharData+0x298>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	5e9b      	ldrsh	r3, [r3, r2]
 8004d5c:	e10b      	b.n	8004f76 <_UG_GetCharData+0x27e>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 8004d5e:	4b88      	ldr	r3, [pc, #544]	; (8004f80 <_UG_GetCharData+0x288>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	222d      	movs	r2, #45	; 0x2d
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d038      	beq.n	8004ddc <_UG_GetCharData+0xe4>
    switch ( encoding )
 8004d6a:	1dbb      	adds	r3, r7, #6
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	2bfc      	cmp	r3, #252	; 0xfc
 8004d70:	dd00      	ble.n	8004d74 <_UG_GetCharData+0x7c>
 8004d72:	e0b4      	b.n	8004ede <_UG_GetCharData+0x1e6>
 8004d74:	2bd6      	cmp	r3, #214	; 0xd6
 8004d76:	da08      	bge.n	8004d8a <_UG_GetCharData+0x92>
 8004d78:	2bc4      	cmp	r3, #196	; 0xc4
 8004d7a:	d023      	beq.n	8004dc4 <_UG_GetCharData+0xcc>
 8004d7c:	dd00      	ble.n	8004d80 <_UG_GetCharData+0x88>
 8004d7e:	e0ae      	b.n	8004ede <_UG_GetCharData+0x1e6>
 8004d80:	2bb0      	cmp	r3, #176	; 0xb0
 8004d82:	d027      	beq.n	8004dd4 <_UG_GetCharData+0xdc>
 8004d84:	2bb5      	cmp	r3, #181	; 0xb5
 8004d86:	d021      	beq.n	8004dcc <_UG_GetCharData+0xd4>
 8004d88:	e029      	b.n	8004dde <_UG_GetCharData+0xe6>
 8004d8a:	3bd6      	subs	r3, #214	; 0xd6
 8004d8c:	2b26      	cmp	r3, #38	; 0x26
 8004d8e:	d900      	bls.n	8004d92 <_UG_GetCharData+0x9a>
 8004d90:	e0a5      	b.n	8004ede <_UG_GetCharData+0x1e6>
 8004d92:	009a      	lsls	r2, r3, #2
 8004d94:	4b7f      	ldr	r3, [pc, #508]	; (8004f94 <_UG_GetCharData+0x29c>)
 8004d96:	18d3      	adds	r3, r2, r3
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	469f      	mov	pc, r3
    {
       case 0xF6: encoding = 0x94; break; // ö
 8004d9c:	1dbb      	adds	r3, r7, #6
 8004d9e:	2294      	movs	r2, #148	; 0x94
 8004da0:	801a      	strh	r2, [r3, #0]
 8004da2:	e01c      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xD6: encoding = 0x99; break; // Ö
 8004da4:	1dbb      	adds	r3, r7, #6
 8004da6:	2299      	movs	r2, #153	; 0x99
 8004da8:	801a      	strh	r2, [r3, #0]
 8004daa:	e018      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xFC: encoding = 0x81; break; // ü
 8004dac:	1dbb      	adds	r3, r7, #6
 8004dae:	2281      	movs	r2, #129	; 0x81
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	e014      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xDC: encoding = 0x9A; break; // Ü
 8004db4:	1dbb      	adds	r3, r7, #6
 8004db6:	229a      	movs	r2, #154	; 0x9a
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	e010      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xE4: encoding = 0x84; break; // ä
 8004dbc:	1dbb      	adds	r3, r7, #6
 8004dbe:	2284      	movs	r2, #132	; 0x84
 8004dc0:	801a      	strh	r2, [r3, #0]
 8004dc2:	e00c      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xC4: encoding = 0x8E; break; // Ä
 8004dc4:	1dbb      	adds	r3, r7, #6
 8004dc6:	228e      	movs	r2, #142	; 0x8e
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	e008      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xB5: encoding = 0xE6; break; // µ
 8004dcc:	1dbb      	adds	r3, r7, #6
 8004dce:	22e6      	movs	r2, #230	; 0xe6
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	e004      	b.n	8004dde <_UG_GetCharData+0xe6>
       case 0xB0: encoding = 0xF8; break; // °
 8004dd4:	1dbb      	adds	r3, r7, #6
 8004dd6:	22f8      	movs	r2, #248	; 0xf8
 8004dd8:	801a      	strh	r2, [r3, #0]
 8004dda:	e000      	b.n	8004dde <_UG_GetCharData+0xe6>
    }
  }
 8004ddc:	46c0      	nop			; (mov r8, r8)

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004dde:	e07e      	b.n	8004ede <_UG_GetCharData+0x1e6>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8004de0:	4b67      	ldr	r3, [pc, #412]	; (8004f80 <_UG_GetCharData+0x288>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	2212      	movs	r2, #18
 8004de8:	18ba      	adds	r2, r7, r2
 8004dea:	8812      	ldrh	r2, [r2, #0]
 8004dec:	0052      	lsls	r2, r2, #1
 8004dee:	189b      	adds	r3, r3, r2
 8004df0:	250e      	movs	r5, #14
 8004df2:	197c      	adds	r4, r7, r5
 8004df4:	0018      	movs	r0, r3
 8004df6:	f7ff facc 	bl	8004392 <ptr_8to16>
 8004dfa:	0003      	movs	r3, r0
 8004dfc:	8023      	strh	r3, [r4, #0]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8004dfe:	002a      	movs	r2, r5
 8004e00:	18bb      	adds	r3, r7, r2
 8004e02:	2100      	movs	r1, #0
 8004e04:	5e5b      	ldrsh	r3, [r3, r1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da0b      	bge.n	8004e22 <_UG_GetCharData+0x12a>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8004e0a:	2316      	movs	r3, #22
 8004e0c:	18fb      	adds	r3, r7, r3
 8004e0e:	18ba      	adds	r2, r7, r2
 8004e10:	8812      	ldrh	r2, [r2, #0]
 8004e12:	0452      	lsls	r2, r2, #17
 8004e14:	0c52      	lsrs	r2, r2, #17
 8004e16:	801a      	strh	r2, [r3, #0]
      range=1;                                                      // Set flag
 8004e18:	2311      	movs	r3, #17
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	701a      	strb	r2, [r3, #0]
 8004e20:	e057      	b.n	8004ed2 <_UG_GetCharData+0x1da>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8004e22:	2311      	movs	r3, #17
 8004e24:	18fb      	adds	r3, r7, r3
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d039      	beq.n	8004ea0 <_UG_GetCharData+0x1a8>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8004e2c:	1dba      	adds	r2, r7, #6
 8004e2e:	2116      	movs	r1, #22
 8004e30:	187b      	adds	r3, r7, r1
 8004e32:	8812      	ldrh	r2, [r2, #0]
 8004e34:	881b      	ldrh	r3, [r3, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d317      	bcc.n	8004e6a <_UG_GetCharData+0x172>
 8004e3a:	1dba      	adds	r2, r7, #6
 8004e3c:	230e      	movs	r3, #14
 8004e3e:	18fb      	adds	r3, r7, r3
 8004e40:	8812      	ldrh	r2, [r2, #0]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d810      	bhi.n	8004e6a <_UG_GetCharData+0x172>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8004e48:	1dba      	adds	r2, r7, #6
 8004e4a:	187b      	adds	r3, r7, r1
 8004e4c:	8812      	ldrh	r2, [r2, #0]
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	b299      	uxth	r1, r3
 8004e54:	2214      	movs	r2, #20
 8004e56:	18bb      	adds	r3, r7, r2
 8004e58:	18ba      	adds	r2, r7, r2
 8004e5a:	8812      	ldrh	r2, [r2, #0]
 8004e5c:	188a      	adds	r2, r1, r2
 8004e5e:	801a      	strh	r2, [r3, #0]
        found=1;
 8004e60:	2310      	movs	r3, #16
 8004e62:	18fb      	adds	r3, r7, r3
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
        break;
 8004e68:	e046      	b.n	8004ef8 <_UG_GetCharData+0x200>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8004e6a:	1dba      	adds	r2, r7, #6
 8004e6c:	2116      	movs	r1, #22
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	8812      	ldrh	r2, [r2, #0]
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d33c      	bcc.n	8004ef2 <_UG_GetCharData+0x1fa>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8004e78:	230e      	movs	r3, #14
 8004e7a:	18fa      	adds	r2, r7, r3
 8004e7c:	187b      	adds	r3, r7, r1
 8004e7e:	8812      	ldrh	r2, [r2, #0]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	2114      	movs	r1, #20
 8004e88:	187b      	adds	r3, r7, r1
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	18d3      	adds	r3, r2, r3
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	187b      	adds	r3, r7, r1
 8004e92:	3201      	adds	r2, #1
 8004e94:	801a      	strh	r2, [r3, #0]
      range=0;
 8004e96:	2311      	movs	r3, #17
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e018      	b.n	8004ed2 <_UG_GetCharData+0x1da>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8004ea0:	1dba      	adds	r2, r7, #6
 8004ea2:	230e      	movs	r3, #14
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	8812      	ldrh	r2, [r2, #0]
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d104      	bne.n	8004eb8 <_UG_GetCharData+0x1c0>
      {
        found=1;
 8004eae:	2310      	movs	r3, #16
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
        break;
 8004eb6:	e01f      	b.n	8004ef8 <_UG_GetCharData+0x200>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8004eb8:	1dba      	adds	r2, r7, #6
 8004eba:	230e      	movs	r3, #14
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	8812      	ldrh	r2, [r2, #0]
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d317      	bcc.n	8004ef6 <_UG_GetCharData+0x1fe>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8004ec6:	2114      	movs	r1, #20
 8004ec8:	187b      	adds	r3, r7, r1
 8004eca:	881a      	ldrh	r2, [r3, #0]
 8004ecc:	187b      	adds	r3, r7, r1
 8004ece:	3201      	adds	r2, #1
 8004ed0:	801a      	strh	r2, [r3, #0]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8004ed2:	2112      	movs	r1, #18
 8004ed4:	187b      	adds	r3, r7, r1
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	187b      	adds	r3, r7, r1
 8004eda:	3201      	adds	r2, #1
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	4b28      	ldr	r3, [pc, #160]	; (8004f80 <_UG_GetCharData+0x288>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004ee4:	2212      	movs	r2, #18
 8004ee6:	18ba      	adds	r2, r7, r2
 8004ee8:	8812      	ldrh	r2, [r2, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d200      	bcs.n	8004ef0 <_UG_GetCharData+0x1f8>
 8004eee:	e777      	b.n	8004de0 <_UG_GetCharData+0xe8>
 8004ef0:	e002      	b.n	8004ef8 <_UG_GetCharData+0x200>
        break;
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	e000      	b.n	8004ef8 <_UG_GetCharData+0x200>
        break;
 8004ef6:	46c0      	nop			; (mov r8, r8)
    }
  }

  if(found)                                                         // If char found
 8004ef8:	2310      	movs	r3, #16
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d037      	beq.n	8004f72 <_UG_GetCharData+0x27a>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8004f02:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <_UG_GetCharData+0x288>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <_UG_GetCharData+0x28c>)
 8004f0a:	601a      	str	r2, [r3, #0]
    last_encoding = encoding;
 8004f0c:	4b1e      	ldr	r3, [pc, #120]	; (8004f88 <_UG_GetCharData+0x290>)
 8004f0e:	1dba      	adds	r2, r7, #6
 8004f10:	8812      	ldrh	r2, [r2, #0]
 8004f12:	801a      	strh	r2, [r3, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <_UG_GetCharData+0x288>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f1a:	2014      	movs	r0, #20
 8004f1c:	183b      	adds	r3, r7, r0
 8004f1e:	8819      	ldrh	r1, [r3, #0]
 8004f20:	4b17      	ldr	r3, [pc, #92]	; (8004f80 <_UG_GetCharData+0x288>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004f26:	434b      	muls	r3, r1
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <_UG_GetCharData+0x294>)
 8004f2c:	601a      	str	r2, [r3, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8004f2e:	4b14      	ldr	r3, [pc, #80]	; (8004f80 <_UG_GetCharData+0x288>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <_UG_GetCharData+0x256>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <_UG_GetCharData+0x288>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3e:	183b      	adds	r3, r7, r0
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	18d3      	adds	r3, r2, r3
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	b21a      	sxth	r2, r3
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <_UG_GetCharData+0x298>)
 8004f4a:	801a      	strh	r2, [r3, #0]
 8004f4c:	e006      	b.n	8004f5c <_UG_GetCharData+0x264>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <_UG_GetCharData+0x288>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	222e      	movs	r2, #46	; 0x2e
 8004f54:	5c9b      	ldrb	r3, [r3, r2]
 8004f56:	b21a      	sxth	r2, r3
 8004f58:	4b0d      	ldr	r3, [pc, #52]	; (8004f90 <_UG_GetCharData+0x298>)
 8004f5a:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <_UG_GetCharData+0x272>
      *p=last_p;                                                    // Load char bitmap address
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <_UG_GetCharData+0x294>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <_UG_GetCharData+0x298>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8004f70:	e001      	b.n	8004f76 <_UG_GetCharData+0x27e>
  }
  return -1;                                                        // -1 = char not found
 8004f72:	2301      	movs	r3, #1
 8004f74:	425b      	negs	r3, r3
}
 8004f76:	0018      	movs	r0, r3
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b006      	add	sp, #24
 8004f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	20000704 	.word	0x20000704
 8004f84:	20000708 	.word	0x20000708
 8004f88:	2000070c 	.word	0x2000070c
 8004f8c:	20000710 	.word	0x20000710
 8004f90:	20000714 	.word	0x20000714
 8004f94:	0800e24c 	.word	0x0800e24c

08004f98 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8004f98:	b590      	push	{r4, r7, lr}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <_UG_FontSelect+0x104>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d073      	beq.n	8005094 <_UG_FontSelect+0xfc>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8004fac:	4b3b      	ldr	r3, [pc, #236]	; (800509c <_UG_FontSelect+0x104>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	4b38      	ldr	r3, [pc, #224]	; (800509c <_UG_FontSelect+0x104>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	217f      	movs	r1, #127	; 0x7f
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	b2d1      	uxtb	r1, r2
 8004fc2:	222c      	movs	r2, #44	; 0x2c
 8004fc4:	5499      	strb	r1, [r3, r2]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	1c5a      	adds	r2, r3, #1
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	b25b      	sxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	da01      	bge.n	8004fd8 <_UG_FontSelect+0x40>
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	e000      	b.n	8004fda <_UG_FontSelect+0x42>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4b30      	ldr	r3, [pc, #192]	; (800509c <_UG_FontSelect+0x104>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	b2d1      	uxtb	r1, r2
 8004fe0:	222d      	movs	r2, #45	; 0x2d
 8004fe2:	5499      	strb	r1, [r3, r2]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <_UG_FontSelect+0x104>)
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	7819      	ldrb	r1, [r3, #0]
 8004ff0:	232e      	movs	r3, #46	; 0x2e
 8004ff2:	54d1      	strb	r1, [r2, r3]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	607a      	str	r2, [r7, #4]
 8004ffa:	4a28      	ldr	r2, [pc, #160]	; (800509c <_UG_FontSelect+0x104>)
 8004ffc:	6812      	ldr	r2, [r2, #0]
 8004ffe:	7819      	ldrb	r1, [r3, #0]
 8005000:	232f      	movs	r3, #47	; 0x2f
 8005002:	54d1      	strb	r1, [r2, r3]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <_UG_FontSelect+0x104>)
 8005006:	681c      	ldr	r4, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	0018      	movs	r0, r3
 800500c:	f7ff f9c1 	bl	8004392 <ptr_8to16>
 8005010:	0003      	movs	r3, r0
 8005012:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3302      	adds	r3, #2
 8005018:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800501a:	4b20      	ldr	r3, [pc, #128]	; (800509c <_UG_FontSelect+0x104>)
 800501c:	681c      	ldr	r4, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	0018      	movs	r0, r3
 8005022:	f7ff f9b6 	bl	8004392 <ptr_8to16>
 8005026:	0003      	movs	r3, r0
 8005028:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	3302      	adds	r3, #2
 800502e:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8005030:	4b1a      	ldr	r3, [pc, #104]	; (800509c <_UG_FontSelect+0x104>)
 8005032:	681c      	ldr	r4, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	0018      	movs	r0, r3
 8005038:	f7ff f9ab 	bl	8004392 <ptr_8to16>
 800503c:	0003      	movs	r3, r0
 800503e:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3302      	adds	r3, #2
 8005044:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	607a      	str	r2, [r7, #4]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00b      	beq.n	800506a <_UG_FontSelect+0xd2>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <_UG_FontSelect+0x104>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <_UG_FontSelect+0x104>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005060:	001a      	movs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	189b      	adds	r3, r3, r2
 8005066:	607b      	str	r3, [r7, #4]
 8005068:	e003      	b.n	8005072 <_UG_FontSelect+0xda>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <_UG_FontSelect+0x104>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <_UG_FontSelect+0x104>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <_UG_FontSelect+0x104>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	001a      	movs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	189b      	adds	r3, r3, r2
 8005088:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800508a:	4b04      	ldr	r3, [pc, #16]	; (800509c <_UG_FontSelect+0x104>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
 8005092:	e000      	b.n	8005096 <_UG_FontSelect+0xfe>
    return;
 8005094:	46c0      	nop			; (mov r8, r8)
}
 8005096:	46bd      	mov	sp, r7
 8005098:	b003      	add	sp, #12
 800509a:	bd90      	pop	{r4, r7, pc}
 800509c:	20000704 	.word	0x20000704

080050a0 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80050a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050a2:	46c6      	mov	lr, r8
 80050a4:	b500      	push	{lr}
 80050a6:	b08c      	sub	sp, #48	; 0x30
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	0005      	movs	r5, r0
 80050ac:	000c      	movs	r4, r1
 80050ae:	0010      	movs	r0, r2
 80050b0:	0019      	movs	r1, r3
 80050b2:	1dbb      	adds	r3, r7, #6
 80050b4:	1c2a      	adds	r2, r5, #0
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	1d3b      	adds	r3, r7, #4
 80050ba:	1c22      	adds	r2, r4, #0
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	1cbb      	adds	r3, r7, #2
 80050c0:	1c02      	adds	r2, r0, #0
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	003b      	movs	r3, r7
 80050c6:	1c0a      	adds	r2, r1, #0
 80050c8:	801a      	strh	r2, [r3, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80050ca:	232e      	movs	r3, #46	; 0x2e
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	2200      	movs	r2, #0
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	232c      	movs	r3, #44	; 0x2c
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	2200      	movs	r2, #0
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	2322      	movs	r3, #34	; 0x22
 80050dc:	18fb      	adds	r3, r7, r3
 80050de:	2200      	movs	r2, #0
 80050e0:	801a      	strh	r2, [r3, #0]
 80050e2:	2320      	movs	r3, #32
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	2200      	movs	r2, #0
 80050e8:	801a      	strh	r2, [r3, #0]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80050ea:	4bb1      	ldr	r3, [pc, #708]	; (80053b0 <_UG_PutChar+0x310>)
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	2317      	movs	r3, #23
 80050f0:	18fb      	adds	r3, r7, r3
 80050f2:	2148      	movs	r1, #72	; 0x48
 80050f4:	5c52      	ldrb	r2, [r2, r1]
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	4bad      	ldr	r3, [pc, #692]	; (80053b0 <_UG_PutChar+0x310>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2268      	movs	r2, #104	; 0x68
 80050fe:	5c9a      	ldrb	r2, [r3, r2]
 8005100:	2316      	movs	r3, #22
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	2102      	movs	r1, #2
 8005106:	400a      	ands	r2, r1
 8005108:	701a      	strb	r2, [r3, #0]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_U16, UG_COLOR) = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800510e:	2514      	movs	r5, #20
 8005110:	197c      	adds	r4, r7, r5
 8005112:	2308      	movs	r3, #8
 8005114:	18fa      	adds	r2, r7, r3
 8005116:	1dbb      	adds	r3, r7, #6
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	0011      	movs	r1, r2
 800511c:	0018      	movs	r0, r3
 800511e:	f7ff fdeb 	bl	8004cf8 <_UG_GetCharData>
 8005122:	0003      	movs	r3, r0
 8005124:	8023      	strh	r3, [r4, #0]
   if(actual_char_width==-1)
 8005126:	197b      	adds	r3, r7, r5
 8005128:	2200      	movs	r2, #0
 800512a:	5e9b      	ldrsh	r3, [r3, r2]
 800512c:	3301      	adds	r3, #1
 800512e:	d102      	bne.n	8005136 <_UG_PutChar+0x96>
        return -1;                                     // Char not presnt in the font
 8005130:	2301      	movs	r3, #1
 8005132:	425b      	negs	r3, r3
 8005134:	e34b      	b.n	80057ce <_UG_PutChar+0x72e>

   bn =  gui->currentFont.char_width;
 8005136:	4b9e      	ldr	r3, [pc, #632]	; (80053b0 <_UG_PutChar+0x310>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	222e      	movs	r2, #46	; 0x2e
 800513c:	5c9a      	ldrb	r2, [r3, r2]
 800513e:	2124      	movs	r1, #36	; 0x24
 8005140:	187b      	adds	r3, r7, r1
 8005142:	801a      	strh	r2, [r3, #0]
   if ( !bn ){
 8005144:	187b      	adds	r3, r7, r1
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <_UG_PutChar+0xb0>
     return 0;
 800514c:	2300      	movs	r3, #0
 800514e:	e33e      	b.n	80057ce <_UG_PutChar+0x72e>
   }
   bn >>= 3;
 8005150:	2124      	movs	r1, #36	; 0x24
 8005152:	187b      	adds	r3, r7, r1
 8005154:	187a      	adds	r2, r7, r1
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	08d2      	lsrs	r2, r2, #3
 800515a:	801a      	strh	r2, [r3, #0]
   if (  gui->currentFont.char_width % 8 ) bn++;
 800515c:	4b94      	ldr	r3, [pc, #592]	; (80053b0 <_UG_PutChar+0x310>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	222e      	movs	r2, #46	; 0x2e
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	2207      	movs	r2, #7
 8005166:	4013      	ands	r3, r2
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d004      	beq.n	8005178 <_UG_PutChar+0xd8>
 800516e:	187b      	adds	r3, r7, r1
 8005170:	881a      	ldrh	r2, [r3, #0]
 8005172:	187b      	adds	r3, r7, r1
 8005174:	3201      	adds	r2, #1
 8005176:	801a      	strh	r2, [r3, #0]

   /* Is hardware acceleration available? */
   if (driver)
 8005178:	2316      	movs	r3, #22
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d024      	beq.n	80051cc <_UG_PutChar+0x12c>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8005182:	4b8b      	ldr	r3, [pc, #556]	; (80053b0 <_UG_PutChar+0x310>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005188:	001d      	movs	r5, r3
 800518a:	1d3b      	adds	r3, r7, #4
 800518c:	881a      	ldrh	r2, [r3, #0]
 800518e:	2314      	movs	r3, #20
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	18d3      	adds	r3, r2, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29b      	uxth	r3, r3
 800519c:	b21c      	sxth	r4, r3
 800519e:	4b84      	ldr	r3, [pc, #528]	; (80053b0 <_UG_PutChar+0x310>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	222f      	movs	r2, #47	; 0x2f
 80051a4:	5c9b      	ldrb	r3, [r3, r2]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	1cbb      	adds	r3, r7, #2
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	18d3      	adds	r3, r2, r3
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	b21a      	sxth	r2, r3
 80051b6:	1cbb      	adds	r3, r7, #2
 80051b8:	2100      	movs	r1, #0
 80051ba:	5e59      	ldrsh	r1, [r3, r1]
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	2000      	movs	r0, #0
 80051c0:	5e18      	ldrsh	r0, [r3, r0]
 80051c2:	0013      	movs	r3, r2
 80051c4:	0022      	movs	r2, r4
 80051c6:	47a8      	blx	r5
 80051c8:	0003      	movs	r3, r0
 80051ca:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80051cc:	4b78      	ldr	r3, [pc, #480]	; (80053b0 <_UG_PutChar+0x310>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	222c      	movs	r2, #44	; 0x2c
 80051d2:	5c9b      	ldrb	r3, [r3, r2]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d000      	beq.n	80051da <_UG_PutChar+0x13a>
 80051d8:	e255      	b.n	8005686 <_UG_PutChar+0x5e6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80051da:	2328      	movs	r3, #40	; 0x28
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	2200      	movs	r2, #0
 80051e0:	801a      	strh	r2, [r3, #0]
 80051e2:	e183      	b.n	80054ec <_UG_PutChar+0x44c>
     {
       c=0;
 80051e4:	231e      	movs	r3, #30
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	2200      	movs	r2, #0
 80051ea:	801a      	strh	r2, [r3, #0]
       for( i=0;i<bn;i++ )
 80051ec:	232a      	movs	r3, #42	; 0x2a
 80051ee:	18fb      	adds	r3, r7, r3
 80051f0:	2200      	movs	r2, #0
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	e16b      	b.n	80054ce <_UG_PutChar+0x42e>
       {
         b = *data++;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	60ba      	str	r2, [r7, #8]
 80051fc:	221d      	movs	r2, #29
 80051fe:	18ba      	adds	r2, r7, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	7013      	strb	r3, [r2, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005204:	2326      	movs	r3, #38	; 0x26
 8005206:	18fb      	adds	r3, r7, r3
 8005208:	2200      	movs	r2, #0
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	e149      	b.n	80054a2 <_UG_PutChar+0x402>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800520e:	231d      	movs	r3, #29
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	4013      	ands	r3, r2
 8005218:	d055      	beq.n	80052c6 <_UG_PutChar+0x226>
           {
             if(driver)
 800521a:	2316      	movs	r3, #22
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d038      	beq.n	8005296 <_UG_PutChar+0x1f6>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8005224:	2220      	movs	r2, #32
 8005226:	18bb      	adds	r3, r7, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d010      	beq.n	8005250 <_UG_PutChar+0x1b0>
 800522e:	2317      	movs	r3, #23
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10b      	bne.n	8005250 <_UG_PutChar+0x1b0>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8005238:	2348      	movs	r3, #72	; 0x48
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	8819      	ldrh	r1, [r3, #0]
 800523e:	0014      	movs	r4, r2
 8005240:	18bb      	adds	r3, r7, r2
 8005242:	881a      	ldrh	r2, [r3, #0]
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	0010      	movs	r0, r2
 8005248:	4798      	blx	r3
                 bpixels=0;
 800524a:	193b      	adds	r3, r7, r4
 800524c:	2200      	movs	r2, #0
 800524e:	801a      	strh	r2, [r3, #0]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8005250:	2322      	movs	r3, #34	; 0x22
 8005252:	18fb      	adds	r3, r7, r3
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d116      	bne.n	8005288 <_UG_PutChar+0x1e8>
 800525a:	2317      	movs	r3, #23
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d011      	beq.n	8005288 <_UG_PutChar+0x1e8>
               {
                 x0=x+c;
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	8819      	ldrh	r1, [r3, #0]
 8005268:	231e      	movs	r3, #30
 800526a:	18fb      	adds	r3, r7, r3
 800526c:	881a      	ldrh	r2, [r3, #0]
 800526e:	232e      	movs	r3, #46	; 0x2e
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	188a      	adds	r2, r1, r2
 8005274:	801a      	strh	r2, [r3, #0]
                 y0=y+j;
 8005276:	1cbb      	adds	r3, r7, #2
 8005278:	8819      	ldrh	r1, [r3, #0]
 800527a:	232c      	movs	r3, #44	; 0x2c
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2228      	movs	r2, #40	; 0x28
 8005280:	18ba      	adds	r2, r7, r2
 8005282:	8812      	ldrh	r2, [r2, #0]
 8005284:	188a      	adds	r2, r1, r2
 8005286:	801a      	strh	r2, [r3, #0]
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8005288:	2122      	movs	r1, #34	; 0x22
 800528a:	187b      	adds	r3, r7, r1
 800528c:	881a      	ldrh	r2, [r3, #0]
 800528e:	187b      	adds	r3, r7, r1
 8005290:	3201      	adds	r2, #1
 8005292:	801a      	strh	r2, [r3, #0]
 8005294:	e0f0      	b.n	8005478 <_UG_PutChar+0x3d8>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8005296:	4b46      	ldr	r3, [pc, #280]	; (80053b0 <_UG_PutChar+0x310>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	1d3a      	adds	r2, r7, #4
 80052a0:	8811      	ldrh	r1, [r2, #0]
 80052a2:	221e      	movs	r2, #30
 80052a4:	18ba      	adds	r2, r7, r2
 80052a6:	8812      	ldrh	r2, [r2, #0]
 80052a8:	188a      	adds	r2, r1, r2
 80052aa:	b292      	uxth	r2, r2
 80052ac:	b210      	sxth	r0, r2
 80052ae:	1cba      	adds	r2, r7, #2
 80052b0:	8811      	ldrh	r1, [r2, #0]
 80052b2:	2228      	movs	r2, #40	; 0x28
 80052b4:	18ba      	adds	r2, r7, r2
 80052b6:	8812      	ldrh	r2, [r2, #0]
 80052b8:	188a      	adds	r2, r1, r2
 80052ba:	b292      	uxth	r2, r2
 80052bc:	b211      	sxth	r1, r2
 80052be:	003a      	movs	r2, r7
 80052c0:	8812      	ldrh	r2, [r2, #0]
 80052c2:	4798      	blx	r3
 80052c4:	e0d8      	b.n	8005478 <_UG_PutChar+0x3d8>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 80052c6:	2316      	movs	r3, #22
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d100      	bne.n	80052d2 <_UG_PutChar+0x232>
 80052d0:	e0b4      	b.n	800543c <_UG_PutChar+0x39c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80052d2:	2222      	movs	r2, #34	; 0x22
 80052d4:	18bb      	adds	r3, r7, r2
 80052d6:	881b      	ldrh	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d100      	bne.n	80052de <_UG_PutChar+0x23e>
 80052dc:	e0a7      	b.n	800542e <_UG_PutChar+0x38e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80052de:	2317      	movs	r3, #23
 80052e0:	18fb      	adds	r3, r7, r3
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d000      	beq.n	80052ea <_UG_PutChar+0x24a>
 80052e8:	e09b      	b.n	8005422 <_UG_PutChar+0x382>
                 {
                   push_pixels(fpixels,fc);
 80052ea:	003b      	movs	r3, r7
 80052ec:	8819      	ldrh	r1, [r3, #0]
 80052ee:	0014      	movs	r4, r2
 80052f0:	18bb      	adds	r3, r7, r2
 80052f2:	881a      	ldrh	r2, [r3, #0]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	0010      	movs	r0, r2
 80052f8:	4798      	blx	r3
                   fpixels=0;
 80052fa:	193b      	adds	r3, r7, r4
 80052fc:	2200      	movs	r2, #0
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e095      	b.n	800542e <_UG_PutChar+0x38e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	2314      	movs	r3, #20
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	18d3      	adds	r3, r2, r3
 800530e:	b299      	uxth	r1, r3
 8005310:	200e      	movs	r0, #14
 8005312:	183b      	adds	r3, r7, r0
 8005314:	242e      	movs	r4, #46	; 0x2e
 8005316:	193a      	adds	r2, r7, r4
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	1a8a      	subs	r2, r1, r2
 800531c:	801a      	strh	r2, [r3, #0]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 800531e:	193b      	adds	r3, r7, r4
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	2100      	movs	r1, #0
 8005326:	5e5b      	ldrsh	r3, [r3, r1]
 8005328:	429a      	cmp	r2, r3
 800532a:	d006      	beq.n	800533a <_UG_PutChar+0x29a>
 800532c:	2322      	movs	r3, #34	; 0x22
 800532e:	18fa      	adds	r2, r7, r3
 8005330:	183b      	adds	r3, r7, r0
 8005332:	8812      	ldrh	r2, [r2, #0]
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	429a      	cmp	r2, r3
 8005338:	d23c      	bcs.n	80053b4 <_UG_PutChar+0x314>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <_UG_PutChar+0x310>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005340:	4698      	mov	r8, r3
 8005342:	222e      	movs	r2, #46	; 0x2e
 8005344:	18bb      	adds	r3, r7, r2
 8005346:	2400      	movs	r4, #0
 8005348:	5f1c      	ldrsh	r4, [r3, r4]
 800534a:	232c      	movs	r3, #44	; 0x2c
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2000      	movs	r0, #0
 8005350:	5e1d      	ldrsh	r5, [r3, r0]
 8005352:	18ba      	adds	r2, r7, r2
 8005354:	200e      	movs	r0, #14
 8005356:	183b      	adds	r3, r7, r0
 8005358:	8812      	ldrh	r2, [r2, #0]
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	18d3      	adds	r3, r2, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29b      	uxth	r3, r3
 8005364:	b21e      	sxth	r6, r3
 8005366:	2322      	movs	r3, #34	; 0x22
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	881a      	ldrh	r2, [r3, #0]
 800536c:	2014      	movs	r0, #20
 800536e:	183b      	adds	r3, r7, r0
 8005370:	2000      	movs	r0, #0
 8005372:	5e1b      	ldrsh	r3, [r3, r0]
 8005374:	0019      	movs	r1, r3
 8005376:	0010      	movs	r0, r2
 8005378:	f7fa ff5a 	bl	8000230 <__divsi3>
 800537c:	0003      	movs	r3, r0
 800537e:	b29a      	uxth	r2, r3
 8005380:	212c      	movs	r1, #44	; 0x2c
 8005382:	187b      	adds	r3, r7, r1
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	18d3      	adds	r3, r2, r3
 8005388:	b29b      	uxth	r3, r3
 800538a:	b21b      	sxth	r3, r3
 800538c:	0032      	movs	r2, r6
 800538e:	0029      	movs	r1, r5
 8005390:	0020      	movs	r0, r4
 8005392:	47c0      	blx	r8
 8005394:	0003      	movs	r3, r0
 8005396:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8005398:	003b      	movs	r3, r7
 800539a:	8819      	ldrh	r1, [r3, #0]
 800539c:	2422      	movs	r4, #34	; 0x22
 800539e:	193b      	adds	r3, r7, r4
 80053a0:	881a      	ldrh	r2, [r3, #0]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	0010      	movs	r0, r2
 80053a6:	4798      	blx	r3
                       fpixels=0;
 80053a8:	193b      	adds	r3, r7, r4
 80053aa:	2200      	movs	r2, #0
 80053ac:	801a      	strh	r2, [r3, #0]
 80053ae:	e038      	b.n	8005422 <_UG_PutChar+0x382>
 80053b0:	20000704 	.word	0x20000704
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80053b4:	4bbc      	ldr	r3, [pc, #752]	; (80056a8 <_UG_PutChar+0x608>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ba:	001c      	movs	r4, r3
 80053bc:	262e      	movs	r6, #46	; 0x2e
 80053be:	19bb      	adds	r3, r7, r6
 80053c0:	2000      	movs	r0, #0
 80053c2:	5e18      	ldrsh	r0, [r3, r0]
 80053c4:	252c      	movs	r5, #44	; 0x2c
 80053c6:	197b      	adds	r3, r7, r5
 80053c8:	2200      	movs	r2, #0
 80053ca:	5e9a      	ldrsh	r2, [r3, r2]
 80053cc:	4694      	mov	ip, r2
 80053ce:	19ba      	adds	r2, r7, r6
 80053d0:	230e      	movs	r3, #14
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	8812      	ldrh	r2, [r2, #0]
 80053d6:	881b      	ldrh	r3, [r3, #0]
 80053d8:	18d3      	adds	r3, r2, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	b21a      	sxth	r2, r3
 80053e2:	197b      	adds	r3, r7, r5
 80053e4:	2100      	movs	r1, #0
 80053e6:	5e5b      	ldrsh	r3, [r3, r1]
 80053e8:	4661      	mov	r1, ip
 80053ea:	47a0      	blx	r4
 80053ec:	0003      	movs	r3, r0
 80053ee:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80053f0:	003b      	movs	r3, r7
 80053f2:	8819      	ldrh	r1, [r3, #0]
 80053f4:	2422      	movs	r4, #34	; 0x22
 80053f6:	193b      	adds	r3, r7, r4
 80053f8:	881a      	ldrh	r2, [r3, #0]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	0010      	movs	r0, r2
 80053fe:	4798      	blx	r3
                       fpixels -= width;
 8005400:	193b      	adds	r3, r7, r4
 8005402:	1939      	adds	r1, r7, r4
 8005404:	220e      	movs	r2, #14
 8005406:	18ba      	adds	r2, r7, r2
 8005408:	8809      	ldrh	r1, [r1, #0]
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	1a8a      	subs	r2, r1, r2
 800540e:	801a      	strh	r2, [r3, #0]
                       x0=x;
 8005410:	19bb      	adds	r3, r7, r6
 8005412:	1d3a      	adds	r2, r7, #4
 8005414:	8812      	ldrh	r2, [r2, #0]
 8005416:	801a      	strh	r2, [r3, #0]
                       y0++;
 8005418:	197b      	adds	r3, r7, r5
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	197b      	adds	r3, r7, r5
 800541e:	3201      	adds	r2, #1
 8005420:	801a      	strh	r2, [r3, #0]
                   while(fpixels)
 8005422:	2322      	movs	r3, #34	; 0x22
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d000      	beq.n	800542e <_UG_PutChar+0x38e>
 800542c:	e769      	b.n	8005302 <_UG_PutChar+0x262>
                     }
                   }
                 }
               }
               bpixels++;
 800542e:	2120      	movs	r1, #32
 8005430:	187b      	adds	r3, r7, r1
 8005432:	881a      	ldrh	r2, [r3, #0]
 8005434:	187b      	adds	r3, r7, r1
 8005436:	3201      	adds	r2, #1
 8005438:	801a      	strh	r2, [r3, #0]
 800543a:	e01d      	b.n	8005478 <_UG_PutChar+0x3d8>
             }
             else if(!trans)                           // Not accelerated output
 800543c:	2317      	movs	r3, #23
 800543e:	18fb      	adds	r3, r7, r3
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d118      	bne.n	8005478 <_UG_PutChar+0x3d8>
             {
               gui->device->pset(x+c,y+j,bc);
 8005446:	4b98      	ldr	r3, [pc, #608]	; (80056a8 <_UG_PutChar+0x608>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685c      	ldr	r4, [r3, #4]
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	881a      	ldrh	r2, [r3, #0]
 8005452:	231e      	movs	r3, #30
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	881b      	ldrh	r3, [r3, #0]
 8005458:	18d3      	adds	r3, r2, r3
 800545a:	b29b      	uxth	r3, r3
 800545c:	b218      	sxth	r0, r3
 800545e:	1cbb      	adds	r3, r7, #2
 8005460:	881a      	ldrh	r2, [r3, #0]
 8005462:	2328      	movs	r3, #40	; 0x28
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	881b      	ldrh	r3, [r3, #0]
 8005468:	18d3      	adds	r3, r2, r3
 800546a:	b29b      	uxth	r3, r3
 800546c:	b219      	sxth	r1, r3
 800546e:	2348      	movs	r3, #72	; 0x48
 8005470:	18fb      	adds	r3, r7, r3
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	001a      	movs	r2, r3
 8005476:	47a0      	blx	r4
             }
           }
           b >>= 1;
 8005478:	221d      	movs	r2, #29
 800547a:	18bb      	adds	r3, r7, r2
 800547c:	18ba      	adds	r2, r7, r2
 800547e:	7812      	ldrb	r2, [r2, #0]
 8005480:	0852      	lsrs	r2, r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
           c++;
 8005484:	211e      	movs	r1, #30
 8005486:	187b      	adds	r3, r7, r1
 8005488:	2200      	movs	r2, #0
 800548a:	5e9b      	ldrsh	r3, [r3, r2]
 800548c:	b29b      	uxth	r3, r3
 800548e:	3301      	adds	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	187b      	adds	r3, r7, r1
 8005494:	801a      	strh	r2, [r3, #0]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8005496:	2126      	movs	r1, #38	; 0x26
 8005498:	187b      	adds	r3, r7, r1
 800549a:	881a      	ldrh	r2, [r3, #0]
 800549c:	187b      	adds	r3, r7, r1
 800549e:	3201      	adds	r2, #1
 80054a0:	801a      	strh	r2, [r3, #0]
 80054a2:	2326      	movs	r3, #38	; 0x26
 80054a4:	18fb      	adds	r3, r7, r3
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	2b07      	cmp	r3, #7
 80054aa:	d80a      	bhi.n	80054c2 <_UG_PutChar+0x422>
 80054ac:	231e      	movs	r3, #30
 80054ae:	18fa      	adds	r2, r7, r3
 80054b0:	2314      	movs	r3, #20
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2100      	movs	r1, #0
 80054b6:	5e52      	ldrsh	r2, [r2, r1]
 80054b8:	2100      	movs	r1, #0
 80054ba:	5e5b      	ldrsh	r3, [r3, r1]
 80054bc:	429a      	cmp	r2, r3
 80054be:	da00      	bge.n	80054c2 <_UG_PutChar+0x422>
 80054c0:	e6a5      	b.n	800520e <_UG_PutChar+0x16e>
       for( i=0;i<bn;i++ )
 80054c2:	212a      	movs	r1, #42	; 0x2a
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	187b      	adds	r3, r7, r1
 80054ca:	3201      	adds	r2, #1
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	232a      	movs	r3, #42	; 0x2a
 80054d0:	18fa      	adds	r2, r7, r3
 80054d2:	2324      	movs	r3, #36	; 0x24
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	8812      	ldrh	r2, [r2, #0]
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d200      	bcs.n	80054e0 <_UG_PutChar+0x440>
 80054de:	e68a      	b.n	80051f6 <_UG_PutChar+0x156>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80054e0:	2128      	movs	r1, #40	; 0x28
 80054e2:	187b      	adds	r3, r7, r1
 80054e4:	881a      	ldrh	r2, [r3, #0]
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	3201      	adds	r2, #1
 80054ea:	801a      	strh	r2, [r3, #0]
 80054ec:	4b6e      	ldr	r3, [pc, #440]	; (80056a8 <_UG_PutChar+0x608>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	222f      	movs	r2, #47	; 0x2f
 80054f2:	5c9b      	ldrb	r3, [r3, r2]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2228      	movs	r2, #40	; 0x28
 80054f8:	18ba      	adds	r2, r7, r2
 80054fa:	8812      	ldrh	r2, [r2, #0]
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d200      	bcs.n	8005502 <_UG_PutChar+0x462>
 8005500:	e670      	b.n	80051e4 <_UG_PutChar+0x144>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8005502:	2316      	movs	r3, #22
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d100      	bne.n	800550e <_UG_PutChar+0x46e>
 800550c:	e15b      	b.n	80057c6 <_UG_PutChar+0x726>
       if(bpixels && !trans)
 800550e:	2220      	movs	r2, #32
 8005510:	18bb      	adds	r3, r7, r2
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00d      	beq.n	8005534 <_UG_PutChar+0x494>
 8005518:	2317      	movs	r3, #23
 800551a:	18fb      	adds	r3, r7, r3
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d108      	bne.n	8005534 <_UG_PutChar+0x494>
       {
         push_pixels(bpixels,bc);
 8005522:	2348      	movs	r3, #72	; 0x48
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	8819      	ldrh	r1, [r3, #0]
 8005528:	18bb      	adds	r3, r7, r2
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	0010      	movs	r0, r2
 8005530:	4798      	blx	r3
 8005532:	e148      	b.n	80057c6 <_UG_PutChar+0x726>
       }
       else if(fpixels)
 8005534:	2222      	movs	r2, #34	; 0x22
 8005536:	18bb      	adds	r3, r7, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d100      	bne.n	8005540 <_UG_PutChar+0x4a0>
 800553e:	e142      	b.n	80057c6 <_UG_PutChar+0x726>
       {
         if(!trans)
 8005540:	2317      	movs	r3, #23
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d000      	beq.n	800554c <_UG_PutChar+0x4ac>
 800554a:	e095      	b.n	8005678 <_UG_PutChar+0x5d8>
         {
           push_pixels(fpixels,fc);
 800554c:	003b      	movs	r3, r7
 800554e:	8819      	ldrh	r1, [r3, #0]
 8005550:	18bb      	adds	r3, r7, r2
 8005552:	881a      	ldrh	r2, [r3, #0]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	0010      	movs	r0, r2
 8005558:	4798      	blx	r3
 800555a:	e134      	b.n	80057c6 <_UG_PutChar+0x726>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 800555c:	1d3b      	adds	r3, r7, #4
 800555e:	881a      	ldrh	r2, [r3, #0]
 8005560:	2314      	movs	r3, #20
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	18d3      	adds	r3, r2, r3
 8005568:	b299      	uxth	r1, r3
 800556a:	2010      	movs	r0, #16
 800556c:	183b      	adds	r3, r7, r0
 800556e:	242e      	movs	r4, #46	; 0x2e
 8005570:	193a      	adds	r2, r7, r4
 8005572:	8812      	ldrh	r2, [r2, #0]
 8005574:	1a8a      	subs	r2, r1, r2
 8005576:	801a      	strh	r2, [r3, #0]
             if(x0==x || fpixels<width)
 8005578:	193b      	adds	r3, r7, r4
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	1d3b      	adds	r3, r7, #4
 800557e:	2100      	movs	r1, #0
 8005580:	5e5b      	ldrsh	r3, [r3, r1]
 8005582:	429a      	cmp	r2, r3
 8005584:	d006      	beq.n	8005594 <_UG_PutChar+0x4f4>
 8005586:	2322      	movs	r3, #34	; 0x22
 8005588:	18fa      	adds	r2, r7, r3
 800558a:	183b      	adds	r3, r7, r0
 800558c:	8812      	ldrh	r2, [r2, #0]
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d23a      	bcs.n	800560a <_UG_PutChar+0x56a>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8005594:	4b44      	ldr	r3, [pc, #272]	; (80056a8 <_UG_PutChar+0x608>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800559a:	4698      	mov	r8, r3
 800559c:	222e      	movs	r2, #46	; 0x2e
 800559e:	18bb      	adds	r3, r7, r2
 80055a0:	2400      	movs	r4, #0
 80055a2:	5f1c      	ldrsh	r4, [r3, r4]
 80055a4:	232c      	movs	r3, #44	; 0x2c
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	2000      	movs	r0, #0
 80055aa:	5e1d      	ldrsh	r5, [r3, r0]
 80055ac:	18ba      	adds	r2, r7, r2
 80055ae:	2010      	movs	r0, #16
 80055b0:	183b      	adds	r3, r7, r0
 80055b2:	8812      	ldrh	r2, [r2, #0]
 80055b4:	881b      	ldrh	r3, [r3, #0]
 80055b6:	18d3      	adds	r3, r2, r3
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29b      	uxth	r3, r3
 80055be:	b21e      	sxth	r6, r3
 80055c0:	2322      	movs	r3, #34	; 0x22
 80055c2:	18fb      	adds	r3, r7, r3
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	2014      	movs	r0, #20
 80055c8:	183b      	adds	r3, r7, r0
 80055ca:	2000      	movs	r0, #0
 80055cc:	5e1b      	ldrsh	r3, [r3, r0]
 80055ce:	0019      	movs	r1, r3
 80055d0:	0010      	movs	r0, r2
 80055d2:	f7fa fe2d 	bl	8000230 <__divsi3>
 80055d6:	0003      	movs	r3, r0
 80055d8:	b29a      	uxth	r2, r3
 80055da:	212c      	movs	r1, #44	; 0x2c
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	18d3      	adds	r3, r2, r3
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	b21b      	sxth	r3, r3
 80055e6:	0032      	movs	r2, r6
 80055e8:	0029      	movs	r1, r5
 80055ea:	0020      	movs	r0, r4
 80055ec:	47c0      	blx	r8
 80055ee:	0003      	movs	r3, r0
 80055f0:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 80055f2:	003b      	movs	r3, r7
 80055f4:	8819      	ldrh	r1, [r3, #0]
 80055f6:	2422      	movs	r4, #34	; 0x22
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	881a      	ldrh	r2, [r3, #0]
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	0010      	movs	r0, r2
 8005600:	4798      	blx	r3
               fpixels=0;
 8005602:	193b      	adds	r3, r7, r4
 8005604:	2200      	movs	r2, #0
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	e036      	b.n	8005678 <_UG_PutChar+0x5d8>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800560a:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <_UG_PutChar+0x608>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005610:	001c      	movs	r4, r3
 8005612:	262e      	movs	r6, #46	; 0x2e
 8005614:	19bb      	adds	r3, r7, r6
 8005616:	2000      	movs	r0, #0
 8005618:	5e18      	ldrsh	r0, [r3, r0]
 800561a:	252c      	movs	r5, #44	; 0x2c
 800561c:	197b      	adds	r3, r7, r5
 800561e:	2200      	movs	r2, #0
 8005620:	5e9a      	ldrsh	r2, [r3, r2]
 8005622:	4694      	mov	ip, r2
 8005624:	19ba      	adds	r2, r7, r6
 8005626:	2310      	movs	r3, #16
 8005628:	18fb      	adds	r3, r7, r3
 800562a:	8812      	ldrh	r2, [r2, #0]
 800562c:	881b      	ldrh	r3, [r3, #0]
 800562e:	18d3      	adds	r3, r2, r3
 8005630:	b29b      	uxth	r3, r3
 8005632:	3b01      	subs	r3, #1
 8005634:	b29b      	uxth	r3, r3
 8005636:	b21a      	sxth	r2, r3
 8005638:	197b      	adds	r3, r7, r5
 800563a:	2100      	movs	r1, #0
 800563c:	5e5b      	ldrsh	r3, [r3, r1]
 800563e:	4661      	mov	r1, ip
 8005640:	47a0      	blx	r4
 8005642:	0003      	movs	r3, r0
 8005644:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8005646:	003b      	movs	r3, r7
 8005648:	8819      	ldrh	r1, [r3, #0]
 800564a:	2422      	movs	r4, #34	; 0x22
 800564c:	193b      	adds	r3, r7, r4
 800564e:	881a      	ldrh	r2, [r3, #0]
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	0010      	movs	r0, r2
 8005654:	4798      	blx	r3
               fpixels -= width;
 8005656:	193b      	adds	r3, r7, r4
 8005658:	1939      	adds	r1, r7, r4
 800565a:	2210      	movs	r2, #16
 800565c:	18ba      	adds	r2, r7, r2
 800565e:	8809      	ldrh	r1, [r1, #0]
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	1a8a      	subs	r2, r1, r2
 8005664:	801a      	strh	r2, [r3, #0]
               x0=x;
 8005666:	19bb      	adds	r3, r7, r6
 8005668:	1d3a      	adds	r2, r7, #4
 800566a:	8812      	ldrh	r2, [r2, #0]
 800566c:	801a      	strh	r2, [r3, #0]
               y0++;
 800566e:	197b      	adds	r3, r7, r5
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	197b      	adds	r3, r7, r5
 8005674:	3201      	adds	r2, #1
 8005676:	801a      	strh	r2, [r3, #0]
           while(fpixels)
 8005678:	2322      	movs	r3, #34	; 0x22
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d000      	beq.n	8005684 <_UG_PutChar+0x5e4>
 8005682:	e76b      	b.n	800555c <_UG_PutChar+0x4bc>
 8005684:	e09f      	b.n	80057c6 <_UG_PutChar+0x726>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8005686:	4b08      	ldr	r3, [pc, #32]	; (80056a8 <_UG_PutChar+0x608>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	222c      	movs	r2, #44	; 0x2c
 800568c:	5c9b      	ldrb	r3, [r3, r2]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d000      	beq.n	8005694 <_UG_PutChar+0x5f4>
 8005692:	e098      	b.n	80057c6 <_UG_PutChar+0x726>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8005694:	2328      	movs	r3, #40	; 0x28
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2200      	movs	r2, #0
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e088      	b.n	80057b0 <_UG_PutChar+0x710>
     {
       for( i=0;i<actual_char_width;i++ )
 800569e:	232a      	movs	r3, #42	; 0x2a
 80056a0:	18fb      	adds	r3, r7, r3
 80056a2:	2200      	movs	r2, #0
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	e068      	b.n	800577a <_UG_PutChar+0x6da>
 80056a8:	20000704 	.word	0x20000704
       {
         b = *data++;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	1c5a      	adds	r2, r3, #1
 80056b0:	60ba      	str	r2, [r7, #8]
 80056b2:	241d      	movs	r4, #29
 80056b4:	193a      	adds	r2, r7, r4
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	7013      	strb	r3, [r2, #0]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80056ba:	003b      	movs	r3, r7
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	22ff      	movs	r2, #255	; 0xff
 80056c0:	4013      	ands	r3, r2
 80056c2:	193a      	adds	r2, r7, r4
 80056c4:	7812      	ldrb	r2, [r2, #0]
 80056c6:	435a      	muls	r2, r3
 80056c8:	2548      	movs	r5, #72	; 0x48
 80056ca:	197b      	adds	r3, r7, r5
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	21ff      	movs	r1, #255	; 0xff
 80056d0:	400b      	ands	r3, r1
 80056d2:	1939      	adds	r1, r7, r4
 80056d4:	7809      	ldrb	r1, [r1, #0]
 80056d6:	2080      	movs	r0, #128	; 0x80
 80056d8:	0040      	lsls	r0, r0, #1
 80056da:	1a41      	subs	r1, r0, r1
 80056dc:	434b      	muls	r3, r1
 80056de:	18d3      	adds	r3, r2, r3
 80056e0:	121b      	asrs	r3, r3, #8
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	4013      	ands	r3, r2
 80056e8:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80056ea:	003b      	movs	r3, r7
 80056ec:	8819      	ldrh	r1, [r3, #0]
 80056ee:	23ff      	movs	r3, #255	; 0xff
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	400b      	ands	r3, r1
 80056f4:	1939      	adds	r1, r7, r4
 80056f6:	7809      	ldrb	r1, [r1, #0]
 80056f8:	4359      	muls	r1, r3
 80056fa:	197b      	adds	r3, r7, r5
 80056fc:	8818      	ldrh	r0, [r3, #0]
 80056fe:	23ff      	movs	r3, #255	; 0xff
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	4003      	ands	r3, r0
 8005704:	1938      	adds	r0, r7, r4
 8005706:	7800      	ldrb	r0, [r0, #0]
 8005708:	2480      	movs	r4, #128	; 0x80
 800570a:	0064      	lsls	r4, r4, #1
 800570c:	1a20      	subs	r0, r4, r0
 800570e:	4343      	muls	r3, r0
 8005710:	18cb      	adds	r3, r1, r3
 8005712:	121b      	asrs	r3, r3, #8
 8005714:	b21b      	sxth	r3, r3
 8005716:	21ff      	movs	r1, #255	; 0xff
 8005718:	438b      	bics	r3, r1
 800571a:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 800571c:	4313      	orrs	r3, r2
 800571e:	b21a      	sxth	r2, r3
 8005720:	2112      	movs	r1, #18
 8005722:	187b      	adds	r3, r7, r1
 8005724:	801a      	strh	r2, [r3, #0]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8005726:	2316      	movs	r3, #22
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <_UG_PutChar+0x69e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8005730:	187b      	adds	r3, r7, r1
 8005732:	881a      	ldrh	r2, [r3, #0]
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	0011      	movs	r1, r2
 8005738:	2001      	movs	r0, #1
 800573a:	4798      	blx	r3
 800573c:	e017      	b.n	800576e <_UG_PutChar+0x6ce>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <_UG_PutChar+0x73c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	1d3a      	adds	r2, r7, #4
 8005748:	8811      	ldrh	r1, [r2, #0]
 800574a:	222a      	movs	r2, #42	; 0x2a
 800574c:	18ba      	adds	r2, r7, r2
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	188a      	adds	r2, r1, r2
 8005752:	b292      	uxth	r2, r2
 8005754:	b210      	sxth	r0, r2
 8005756:	1cba      	adds	r2, r7, #2
 8005758:	8811      	ldrh	r1, [r2, #0]
 800575a:	2228      	movs	r2, #40	; 0x28
 800575c:	18ba      	adds	r2, r7, r2
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	188a      	adds	r2, r1, r2
 8005762:	b292      	uxth	r2, r2
 8005764:	b211      	sxth	r1, r2
 8005766:	2212      	movs	r2, #18
 8005768:	18ba      	adds	r2, r7, r2
 800576a:	8812      	ldrh	r2, [r2, #0]
 800576c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 800576e:	212a      	movs	r1, #42	; 0x2a
 8005770:	187b      	adds	r3, r7, r1
 8005772:	881a      	ldrh	r2, [r3, #0]
 8005774:	187b      	adds	r3, r7, r1
 8005776:	3201      	adds	r2, #1
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	232a      	movs	r3, #42	; 0x2a
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	2014      	movs	r0, #20
 8005782:	183b      	adds	r3, r7, r0
 8005784:	2100      	movs	r1, #0
 8005786:	5e5b      	ldrsh	r3, [r3, r1]
 8005788:	429a      	cmp	r2, r3
 800578a:	db8f      	blt.n	80056ac <_UG_PutChar+0x60c>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <_UG_PutChar+0x73c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	212e      	movs	r1, #46	; 0x2e
 8005794:	5c5b      	ldrb	r3, [r3, r1]
 8005796:	0019      	movs	r1, r3
 8005798:	183b      	adds	r3, r7, r0
 800579a:	2000      	movs	r0, #0
 800579c:	5e1b      	ldrsh	r3, [r3, r0]
 800579e:	1acb      	subs	r3, r1, r3
 80057a0:	18d3      	adds	r3, r2, r3
 80057a2:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 80057a4:	2128      	movs	r1, #40	; 0x28
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	881a      	ldrh	r2, [r3, #0]
 80057aa:	187b      	adds	r3, r7, r1
 80057ac:	3201      	adds	r2, #1
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	4b0a      	ldr	r3, [pc, #40]	; (80057dc <_UG_PutChar+0x73c>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	222f      	movs	r2, #47	; 0x2f
 80057b6:	5c9b      	ldrb	r3, [r3, r2]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2228      	movs	r2, #40	; 0x28
 80057bc:	18ba      	adds	r2, r7, r2
 80057be:	8812      	ldrh	r2, [r2, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d200      	bcs.n	80057c6 <_UG_PutChar+0x726>
 80057c4:	e76b      	b.n	800569e <_UG_PutChar+0x5fe>
     }
   }
   #endif
   return (actual_char_width);
 80057c6:	2314      	movs	r3, #20
 80057c8:	18fb      	adds	r3, r7, r3
 80057ca:	2200      	movs	r2, #0
 80057cc:	5e9b      	ldrsh	r3, [r3, r2]
}
 80057ce:	0018      	movs	r0, r3
 80057d0:	46bd      	mov	sp, r7
 80057d2:	b00c      	add	sp, #48	; 0x30
 80057d4:	bc80      	pop	{r7}
 80057d6:	46b8      	mov	r8, r7
 80057d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	20000704 	.word	0x20000704

080057e0 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 80057e0:	b590      	push	{r4, r7, lr}
 80057e2:	b089      	sub	sp, #36	; 0x24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 80057e8:	4b77      	ldr	r3, [pc, #476]	; (80059c8 <_UG_ProcessTouchData+0x1e8>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	231a      	movs	r3, #26
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	88d2      	ldrh	r2, [r2, #6]
 80057f2:	801a      	strh	r2, [r3, #0]
   yp = gui->touch.yp;
 80057f4:	4b74      	ldr	r3, [pc, #464]	; (80059c8 <_UG_ProcessTouchData+0x1e8>)
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	2318      	movs	r3, #24
 80057fa:	18fb      	adds	r3, r7, r3
 80057fc:	8912      	ldrh	r2, [r2, #8]
 80057fe:	801a      	strh	r2, [r3, #0]
   tchstate = gui->touch.state;
 8005800:	4b71      	ldr	r3, [pc, #452]	; (80059c8 <_UG_ProcessTouchData+0x1e8>)
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	2317      	movs	r3, #23
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	7912      	ldrb	r2, [r2, #4]
 800580a:	701a      	strb	r2, [r3, #0]

   objcnt = wnd->objcnt;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	2314      	movs	r3, #20
 8005812:	18fb      	adds	r3, r7, r3
 8005814:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8005816:	231e      	movs	r3, #30
 8005818:	18fb      	adds	r3, r7, r3
 800581a:	2200      	movs	r2, #0
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	e0c5      	b.n	80059ac <_UG_ProcessTouchData+0x1cc>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	231e      	movs	r3, #30
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	18d3      	adds	r3, r2, r3
 800582e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005830:	200f      	movs	r0, #15
 8005832:	183b      	adds	r3, r7, r0
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	7812      	ldrb	r2, [r2, #0]
 8005838:	701a      	strb	r2, [r3, #0]
      objtouch = obj->touch_state;
 800583a:	211d      	movs	r1, #29
 800583c:	187b      	adds	r3, r7, r1
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	7852      	ldrb	r2, [r2, #1]
 8005842:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 8005844:	183b      	adds	r3, r7, r0
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d000      	beq.n	8005850 <_UG_ProcessTouchData+0x70>
 800584e:	e0a2      	b.n	8005996 <_UG_ProcessTouchData+0x1b6>
 8005850:	183b      	adds	r3, r7, r0
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2202      	movs	r2, #2
 8005856:	4013      	ands	r3, r2
 8005858:	d100      	bne.n	800585c <_UG_ProcessTouchData+0x7c>
 800585a:	e09c      	b.n	8005996 <_UG_ProcessTouchData+0x1b6>
 800585c:	183b      	adds	r3, r7, r0
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2208      	movs	r2, #8
 8005862:	4013      	ands	r3, r2
 8005864:	d100      	bne.n	8005868 <_UG_ProcessTouchData+0x88>
 8005866:	e096      	b.n	8005996 <_UG_ProcessTouchData+0x1b6>
 8005868:	183b      	adds	r3, r7, r0
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	2240      	movs	r2, #64	; 0x40
 800586e:	4013      	ands	r3, r2
 8005870:	d000      	beq.n	8005874 <_UG_ProcessTouchData+0x94>
 8005872:	e090      	b.n	8005996 <_UG_ProcessTouchData+0x1b6>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 8005874:	2317      	movs	r3, #23
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d05f      	beq.n	800593e <_UG_ProcessTouchData+0x15e>
 800587e:	231a      	movs	r3, #26
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	2200      	movs	r2, #0
 8005884:	5e9b      	ldrsh	r3, [r3, r2]
 8005886:	3301      	adds	r3, #1
 8005888:	d059      	beq.n	800593e <_UG_ProcessTouchData+0x15e>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800588a:	187b      	adds	r3, r7, r1
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2240      	movs	r2, #64	; 0x40
 8005890:	4013      	ands	r3, r2
 8005892:	d10c      	bne.n	80058ae <_UG_ProcessTouchData+0xce>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 8005894:	187b      	adds	r3, r7, r1
 8005896:	0008      	movs	r0, r1
 8005898:	187a      	adds	r2, r7, r1
 800589a:	7812      	ldrb	r2, [r2, #0]
 800589c:	2105      	movs	r1, #5
 800589e:	430a      	orrs	r2, r1
 80058a0:	701a      	strb	r2, [r3, #0]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	183a      	adds	r2, r7, r0
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	2118      	movs	r1, #24
 80058aa:	438a      	bics	r2, r1
 80058ac:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 80058ae:	201d      	movs	r0, #29
 80058b0:	183b      	adds	r3, r7, r0
 80058b2:	183a      	adds	r2, r7, r0
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	2120      	movs	r1, #32
 80058b8:	438a      	bics	r2, r1
 80058ba:	701a      	strb	r2, [r3, #0]
            if ( xp >= obj->a_abs.xs )
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2208      	movs	r2, #8
 80058c0:	5e9b      	ldrsh	r3, [r3, r2]
 80058c2:	211a      	movs	r1, #26
 80058c4:	187a      	adds	r2, r7, r1
 80058c6:	2400      	movs	r4, #0
 80058c8:	5f12      	ldrsh	r2, [r2, r4]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	db2f      	blt.n	800592e <_UG_ProcessTouchData+0x14e>
            {
               if ( xp <= obj->a_abs.xe )
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	220c      	movs	r2, #12
 80058d2:	5e9b      	ldrsh	r3, [r3, r2]
 80058d4:	187a      	adds	r2, r7, r1
 80058d6:	2100      	movs	r1, #0
 80058d8:	5e52      	ldrsh	r2, [r2, r1]
 80058da:	429a      	cmp	r2, r3
 80058dc:	dc27      	bgt.n	800592e <_UG_ProcessTouchData+0x14e>
               {
                  if ( yp >= obj->a_abs.ys )
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	220a      	movs	r2, #10
 80058e2:	5e9b      	ldrsh	r3, [r3, r2]
 80058e4:	2118      	movs	r1, #24
 80058e6:	187a      	adds	r2, r7, r1
 80058e8:	2400      	movs	r4, #0
 80058ea:	5f12      	ldrsh	r2, [r2, r4]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	db1e      	blt.n	800592e <_UG_ProcessTouchData+0x14e>
                  {
                     if ( yp <= obj->a_abs.ye )
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	220e      	movs	r2, #14
 80058f4:	5e9b      	ldrsh	r3, [r3, r2]
 80058f6:	187a      	adds	r2, r7, r1
 80058f8:	2100      	movs	r1, #0
 80058fa:	5e52      	ldrsh	r2, [r2, r1]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	dc16      	bgt.n	800592e <_UG_ProcessTouchData+0x14e>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8005900:	183b      	adds	r3, r7, r0
 8005902:	183a      	adds	r2, r7, r0
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	2120      	movs	r1, #32
 8005908:	430a      	orrs	r2, r1
 800590a:	701a      	strb	r2, [r3, #0]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 800590c:	183b      	adds	r3, r7, r0
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2240      	movs	r2, #64	; 0x40
 8005912:	4013      	ands	r3, r2
 8005914:	d10b      	bne.n	800592e <_UG_ProcessTouchData+0x14e>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8005916:	183b      	adds	r3, r7, r0
 8005918:	183a      	adds	r2, r7, r0
 800591a:	7812      	ldrb	r2, [r2, #0]
 800591c:	2104      	movs	r1, #4
 800591e:	438a      	bics	r2, r1
 8005920:	701a      	strb	r2, [r3, #0]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8005922:	183b      	adds	r3, r7, r0
 8005924:	183a      	adds	r2, r7, r0
 8005926:	7812      	ldrb	r2, [r2, #0]
 8005928:	2102      	movs	r1, #2
 800592a:	430a      	orrs	r2, r1
 800592c:	701a      	strb	r2, [r3, #0]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 800592e:	221d      	movs	r2, #29
 8005930:	18bb      	adds	r3, r7, r2
 8005932:	18ba      	adds	r2, r7, r2
 8005934:	7812      	ldrb	r2, [r2, #0]
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	430a      	orrs	r2, r1
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e02b      	b.n	8005996 <_UG_ProcessTouchData+0x1b6>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 800593e:	211d      	movs	r1, #29
 8005940:	187b      	adds	r3, r7, r1
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2240      	movs	r2, #64	; 0x40
 8005946:	4013      	ands	r3, r2
 8005948:	d025      	beq.n	8005996 <_UG_ProcessTouchData+0x1b6>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 800594a:	187b      	adds	r3, r7, r1
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2220      	movs	r2, #32
 8005950:	4013      	ands	r3, r2
 8005952:	d006      	beq.n	8005962 <_UG_ProcessTouchData+0x182>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8005954:	187b      	adds	r3, r7, r1
 8005956:	187a      	adds	r2, r7, r1
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	2108      	movs	r1, #8
 800595c:	430a      	orrs	r2, r1
 800595e:	701a      	strb	r2, [r3, #0]
 8005960:	e006      	b.n	8005970 <_UG_ProcessTouchData+0x190>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8005962:	221d      	movs	r2, #29
 8005964:	18bb      	adds	r3, r7, r2
 8005966:	18ba      	adds	r2, r7, r2
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	2110      	movs	r1, #16
 800596c:	430a      	orrs	r2, r1
 800596e:	701a      	strb	r2, [r3, #0]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8005970:	211d      	movs	r1, #29
 8005972:	187b      	adds	r3, r7, r1
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	4013      	ands	r3, r2
 800597a:	d005      	beq.n	8005988 <_UG_ProcessTouchData+0x1a8>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 800597c:	187b      	adds	r3, r7, r1
 800597e:	187a      	adds	r2, r7, r1
 8005980:	7812      	ldrb	r2, [r2, #0]
 8005982:	2101      	movs	r1, #1
 8005984:	430a      	orrs	r2, r1
 8005986:	701a      	strb	r2, [r3, #0]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 8005988:	221d      	movs	r2, #29
 800598a:	18bb      	adds	r3, r7, r2
 800598c:	18ba      	adds	r2, r7, r2
 800598e:	7812      	ldrb	r2, [r2, #0]
 8005990:	2146      	movs	r1, #70	; 0x46
 8005992:	438a      	bics	r2, r1
 8005994:	701a      	strb	r2, [r3, #0]
         }
      }
      obj->touch_state = objtouch;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	221d      	movs	r2, #29
 800599a:	18ba      	adds	r2, r7, r2
 800599c:	7812      	ldrb	r2, [r2, #0]
 800599e:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80059a0:	211e      	movs	r1, #30
 80059a2:	187b      	adds	r3, r7, r1
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	187b      	adds	r3, r7, r1
 80059a8:	3201      	adds	r2, #1
 80059aa:	801a      	strh	r2, [r3, #0]
 80059ac:	231e      	movs	r3, #30
 80059ae:	18fa      	adds	r2, r7, r3
 80059b0:	2314      	movs	r3, #20
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	8812      	ldrh	r2, [r2, #0]
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d200      	bcs.n	80059be <_UG_ProcessTouchData+0x1de>
 80059bc:	e730      	b.n	8005820 <_UG_ProcessTouchData+0x40>
   }
}
 80059be:	46c0      	nop			; (mov r8, r8)
 80059c0:	46c0      	nop			; (mov r8, r8)
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b009      	add	sp, #36	; 0x24
 80059c6:	bd90      	pop	{r4, r7, pc}
 80059c8:	20000704 	.word	0x20000704

080059cc <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	781a      	ldrb	r2, [r3, #0]
 80059d8:	2314      	movs	r3, #20
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 80059de:	2316      	movs	r3, #22
 80059e0:	18fb      	adds	r3, r7, r3
 80059e2:	2200      	movs	r2, #0
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e043      	b.n	8005a70 <_UG_UpdateObjects+0xa4>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	2316      	movs	r3, #22
 80059ee:	18fb      	adds	r3, r7, r3
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	015b      	lsls	r3, r3, #5
 80059f4:	18d3      	adds	r3, r2, r3
 80059f6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80059f8:	210f      	movs	r1, #15
 80059fa:	187b      	adds	r3, r7, r1
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8005a02:	230e      	movs	r3, #14
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	7852      	ldrb	r2, [r2, #1]
 8005a0a:	701a      	strb	r2, [r3, #0]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005a0c:	187b      	adds	r3, r7, r1
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2201      	movs	r2, #1
 8005a12:	4013      	ands	r3, r2
 8005a14:	d126      	bne.n	8005a64 <_UG_UpdateObjects+0x98>
 8005a16:	187b      	adds	r3, r7, r1
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d021      	beq.n	8005a64 <_UG_UpdateObjects+0x98>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2220      	movs	r2, #32
 8005a26:	4013      	ands	r3, r2
 8005a28:	d005      	beq.n	8005a36 <_UG_UpdateObjects+0x6a>
         {
            obj->update(wnd,obj);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	0010      	movs	r0, r2
 8005a34:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8005a36:	210f      	movs	r1, #15
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2208      	movs	r2, #8
 8005a3e:	4013      	ands	r3, r2
 8005a40:	d010      	beq.n	8005a64 <_UG_UpdateObjects+0x98>
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	b25b      	sxtb	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	da0b      	bge.n	8005a64 <_UG_UpdateObjects+0x98>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8005a4c:	230e      	movs	r3, #14
 8005a4e:	18fb      	adds	r3, r7, r3
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2241      	movs	r2, #65	; 0x41
 8005a54:	4013      	ands	r3, r2
 8005a56:	d005      	beq.n	8005a64 <_UG_UpdateObjects+0x98>
            {
               obj->update(wnd,obj);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	6939      	ldr	r1, [r7, #16]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	0010      	movs	r0, r2
 8005a62:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8005a64:	2116      	movs	r1, #22
 8005a66:	187b      	adds	r3, r7, r1
 8005a68:	881a      	ldrh	r2, [r3, #0]
 8005a6a:	187b      	adds	r3, r7, r1
 8005a6c:	3201      	adds	r2, #1
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	2316      	movs	r3, #22
 8005a72:	18fa      	adds	r2, r7, r3
 8005a74:	2314      	movs	r3, #20
 8005a76:	18fb      	adds	r3, r7, r3
 8005a78:	8812      	ldrh	r2, [r2, #0]
 8005a7a:	881b      	ldrh	r3, [r3, #0]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3b3      	bcc.n	80059e8 <_UG_UpdateObjects+0x1c>
            }
         }
         #endif
      }
   }
}
 8005a80:	46c0      	nop			; (mov r8, r8)
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	46bd      	mov	sp, r7
 8005a86:	b006      	add	sp, #24
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8005a94:	4b2a      	ldr	r3, [pc, #168]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	2314      	movs	r3, #20
 8005aa6:	18fb      	adds	r3, r7, r3
 8005aa8:	801a      	strh	r2, [r3, #0]
   for(i=0; i<objcnt; i++)
 8005aaa:	2316      	movs	r3, #22
 8005aac:	18fb      	adds	r3, r7, r3
 8005aae:	2200      	movs	r2, #0
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e037      	b.n	8005b24 <_UG_HandleEvents+0x98>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	2316      	movs	r3, #22
 8005aba:	18fb      	adds	r3, r7, r3
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	015b      	lsls	r3, r3, #5
 8005ac0:	18d3      	adds	r3, r2, r3
 8005ac2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8005ac4:	210f      	movs	r1, #15
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	7812      	ldrb	r2, [r2, #0]
 8005acc:	701a      	strb	r2, [r3, #0]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	d11f      	bne.n	8005b18 <_UG_HandleEvents+0x8c>
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2202      	movs	r2, #2
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d01a      	beq.n	8005b18 <_UG_HandleEvents+0x8c>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	7e9b      	ldrb	r3, [r3, #26]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d016      	beq.n	8005b18 <_UG_HandleEvents+0x8c>
         {
            msg.src = obj;
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]
            msg.id = obj->type;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	7e1a      	ldrb	r2, [r3, #24]
 8005af4:	4b12      	ldr	r3, [pc, #72]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005af6:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	7e5a      	ldrb	r2, [r3, #25]
 8005afc:	4b10      	ldr	r3, [pc, #64]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005afe:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	7e9a      	ldrb	r2, [r3, #26]
 8005b04:	4b0e      	ldr	r3, [pc, #56]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005b06:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0c:	4a0c      	ldr	r2, [pc, #48]	; (8005b40 <_UG_HandleEvents+0xb4>)
 8005b0e:	0010      	movs	r0, r2
 8005b10:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2200      	movs	r2, #0
 8005b16:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8005b18:	2116      	movs	r1, #22
 8005b1a:	187b      	adds	r3, r7, r1
 8005b1c:	881a      	ldrh	r2, [r3, #0]
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	3201      	adds	r2, #1
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	2316      	movs	r3, #22
 8005b26:	18fa      	adds	r2, r7, r3
 8005b28:	2314      	movs	r3, #20
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	8812      	ldrh	r2, [r2, #0]
 8005b2e:	881b      	ldrh	r3, [r3, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d3bf      	bcc.n	8005ab4 <_UG_HandleEvents+0x28>
         }
      }
   }
}
 8005b34:	46c0      	nop			; (mov r8, r8)
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	b006      	add	sp, #24
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	20000718 	.word	0x20000718

08005b44 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8005b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b46:	b08f      	sub	sp, #60	; 0x3c
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d100      	bne.n	8005b56 <_UG_PutText+0x12>
 8005b54:	e1b6      	b.n	8005ec4 <_UG_PutText+0x380>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d100      	bne.n	8005b60 <_UG_PutText+0x1c>
 8005b5e:	e1b1      	b.n	8005ec4 <_UG_PutText+0x380>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8005b60:	2122      	movs	r1, #34	; 0x22
 8005b62:	187b      	adds	r3, r7, r1
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	89d2      	ldrh	r2, [r2, #14]
 8005b68:	801a      	strh	r2, [r3, #0]
   UG_S16 ys=txt->a.ys;
 8005b6a:	2020      	movs	r0, #32
 8005b6c:	183b      	adds	r3, r7, r0
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	8952      	ldrh	r2, [r2, #10]
 8005b72:	801a      	strh	r2, [r3, #0]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	3302      	adds	r3, #2
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	241e      	movs	r4, #30
 8005b7e:	193b      	adds	r3, r7, r4
 8005b80:	801a      	strh	r2, [r3, #0]

   if ( (ye - ys) < char_height ){
 8005b82:	187b      	adds	r3, r7, r1
 8005b84:	2200      	movs	r2, #0
 8005b86:	5e9a      	ldrsh	r2, [r3, r2]
 8005b88:	183b      	adds	r3, r7, r0
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5e5b      	ldrsh	r3, [r3, r1]
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	193b      	adds	r3, r7, r4
 8005b92:	2100      	movs	r1, #0
 8005b94:	5e5b      	ldrsh	r3, [r3, r1]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	da00      	bge.n	8005b9c <_UG_PutText+0x58>
 8005b9a:	e195      	b.n	8005ec8 <_UG_PutText+0x384>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8005b9c:	231c      	movs	r3, #28
 8005b9e:	18fb      	adds	r3, r7, r3
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	8912      	ldrh	r2, [r2, #8]
 8005ba4:	801a      	strh	r2, [r3, #0]
   UG_S16 xe=txt->a.xe;
 8005ba6:	231a      	movs	r3, #26
 8005ba8:	18fb      	adds	r3, r7, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	8992      	ldrh	r2, [r2, #12]
 8005bae:	801a      	strh	r2, [r3, #0]
   UG_U8  align=txt->align;
 8005bb0:	2319      	movs	r3, #25
 8005bb2:	18fb      	adds	r3, r7, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	7d12      	ldrb	r2, [r2, #20]
 8005bb8:	701a      	strb	r2, [r3, #0]
   UG_S16 char_h_space=txt->h_space;
 8005bba:	2316      	movs	r3, #22
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	8ad2      	ldrh	r2, [r2, #22]
 8005bc2:	801a      	strh	r2, [r3, #0]
   UG_S16 char_v_space=txt->v_space;
 8005bc4:	2314      	movs	r3, #20
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	8b12      	ldrh	r2, [r2, #24]
 8005bcc:	801a      	strh	r2, [r3, #0]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f7ff f9db 	bl	8004f98 <_UG_FontSelect>

   rc=1;
 8005be2:	232c      	movs	r3, #44	; 0x2c
 8005be4:	18fb      	adds	r3, r7, r3
 8005be6:	2201      	movs	r2, #1
 8005be8:	801a      	strh	r2, [r3, #0]
   c=str;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005bee:	4bbb      	ldr	r3, [pc, #748]	; (8005edc <_UG_PutText+0x398>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	222d      	movs	r2, #45	; 0x2d
 8005bf4:	5c9b      	ldrb	r3, [r3, r2]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d109      	bne.n	8005c0e <_UG_PutText+0xca>
       chr = _UG_DecodeUTF8(&c);
 8005bfa:	2324      	movs	r3, #36	; 0x24
 8005bfc:	18fc      	adds	r4, r7, r3
 8005bfe:	2308      	movs	r3, #8
 8005c00:	18fb      	adds	r3, r7, r3
 8005c02:	0018      	movs	r0, r3
 8005c04:	f7fe ffca 	bl	8004b9c <_UG_DecodeUTF8>
 8005c08:	0003      	movs	r3, r0
 8005c0a:	8023      	strh	r3, [r4, #0]
 8005c0c:	e006      	b.n	8005c1c <_UG_PutText+0xd8>
     }
     else{
       chr = *c++;
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	60ba      	str	r2, [r7, #8]
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	2324      	movs	r3, #36	; 0x24
 8005c18:	18fb      	adds	r3, r7, r3
 8005c1a:	801a      	strh	r2, [r3, #0]
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 8005c1c:	2224      	movs	r2, #36	; 0x24
 8005c1e:	18bb      	adds	r3, r7, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <_UG_PutText+0xf8>
     if ( chr == '\n' ) rc++;
 8005c26:	18bb      	adds	r3, r7, r2
 8005c28:	881b      	ldrh	r3, [r3, #0]
 8005c2a:	2b0a      	cmp	r3, #10
 8005c2c:	d1df      	bne.n	8005bee <_UG_PutText+0xaa>
 8005c2e:	212c      	movs	r1, #44	; 0x2c
 8005c30:	187b      	adds	r3, r7, r1
 8005c32:	881a      	ldrh	r2, [r3, #0]
 8005c34:	187b      	adds	r3, r7, r1
 8005c36:	3201      	adds	r2, #1
 8005c38:	801a      	strh	r2, [r3, #0]
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005c3a:	e7d8      	b.n	8005bee <_UG_PutText+0xaa>
     if(!chr) break;
 8005c3c:	46c0      	nop			; (mov r8, r8)
   }

   yp = 0;
 8005c3e:	2126      	movs	r1, #38	; 0x26
 8005c40:	187b      	adds	r3, r7, r1
 8005c42:	2200      	movs	r2, #0
 8005c44:	801a      	strh	r2, [r3, #0]
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8005c46:	2319      	movs	r3, #25
 8005c48:	18fb      	adds	r3, r7, r3
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2230      	movs	r2, #48	; 0x30
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d02f      	beq.n	8005cb2 <_UG_PutText+0x16e>
   {
      yp = ye - ys + 1;
 8005c52:	2322      	movs	r3, #34	; 0x22
 8005c54:	18fb      	adds	r3, r7, r3
 8005c56:	881a      	ldrh	r2, [r3, #0]
 8005c58:	2320      	movs	r3, #32
 8005c5a:	18fb      	adds	r3, r7, r3
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3301      	adds	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	0008      	movs	r0, r1
 8005c68:	183b      	adds	r3, r7, r0
 8005c6a:	801a      	strh	r2, [r3, #0]
      yp -= char_height*rc;
 8005c6c:	183b      	adds	r3, r7, r0
 8005c6e:	881a      	ldrh	r2, [r3, #0]
 8005c70:	231e      	movs	r3, #30
 8005c72:	18fb      	adds	r3, r7, r3
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	242c      	movs	r4, #44	; 0x2c
 8005c78:	1939      	adds	r1, r7, r4
 8005c7a:	8809      	ldrh	r1, [r1, #0]
 8005c7c:	434b      	muls	r3, r1
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	183b      	adds	r3, r7, r0
 8005c86:	801a      	strh	r2, [r3, #0]
      yp -= char_v_space*(rc-1);
 8005c88:	183b      	adds	r3, r7, r0
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	193b      	adds	r3, r7, r4
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	2114      	movs	r1, #20
 8005c96:	1879      	adds	r1, r7, r1
 8005c98:	8809      	ldrh	r1, [r1, #0]
 8005c9a:	434b      	muls	r3, r1
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	183b      	adds	r3, r7, r0
 8005ca4:	801a      	strh	r2, [r3, #0]
      if ( yp < 0 ){
 8005ca6:	183b      	adds	r3, r7, r0
 8005ca8:	2200      	movs	r2, #0
 8005caa:	5e9b      	ldrsh	r3, [r3, r2]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da00      	bge.n	8005cb2 <_UG_PutText+0x16e>
 8005cb0:	e10c      	b.n	8005ecc <_UG_PutText+0x388>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8005cb2:	2319      	movs	r3, #25
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2210      	movs	r2, #16
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d006      	beq.n	8005ccc <_UG_PutText+0x188>
 8005cbe:	2226      	movs	r2, #38	; 0x26
 8005cc0:	18bb      	adds	r3, r7, r2
 8005cc2:	18ba      	adds	r2, r7, r2
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	5e52      	ldrsh	r2, [r2, r1]
 8005cc8:	1052      	asrs	r2, r2, #1
 8005cca:	801a      	strh	r2, [r3, #0]
   yp += ys;
 8005ccc:	2126      	movs	r1, #38	; 0x26
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	2320      	movs	r3, #32
 8005cd4:	18fb      	adds	r3, r7, r3
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	18d3      	adds	r3, r2, r3
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	187b      	adds	r3, r7, r1
 8005cde:	801a      	strh	r2, [r3, #0]

   while( 1 )
   {
      sl=0;
 8005ce0:	232e      	movs	r3, #46	; 0x2e
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	801a      	strh	r2, [r3, #0]
      c=str;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8005cec:	232a      	movs	r3, #42	; 0x2a
 8005cee:	18fb      	adds	r3, r7, r3
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	801a      	strh	r2, [r3, #0]
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005cf4:	4b79      	ldr	r3, [pc, #484]	; (8005edc <_UG_PutText+0x398>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	222d      	movs	r2, #45	; 0x2d
 8005cfa:	5c9b      	ldrb	r3, [r3, r2]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d109      	bne.n	8005d14 <_UG_PutText+0x1d0>
          chr = _UG_DecodeUTF8(&c);
 8005d00:	2324      	movs	r3, #36	; 0x24
 8005d02:	18fc      	adds	r4, r7, r3
 8005d04:	2308      	movs	r3, #8
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f7fe ff47 	bl	8004b9c <_UG_DecodeUTF8>
 8005d0e:	0003      	movs	r3, r0
 8005d10:	8023      	strh	r3, [r4, #0]
 8005d12:	e006      	b.n	8005d22 <_UG_PutText+0x1de>
        }
        else{
          chr = *c++;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	60ba      	str	r2, [r7, #8]
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	2324      	movs	r3, #36	; 0x24
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	801a      	strh	r2, [r3, #0]
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8005d22:	2224      	movs	r2, #36	; 0x24
 8005d24:	18bb      	adds	r3, r7, r2
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d029      	beq.n	8005d80 <_UG_PutText+0x23c>
 8005d2c:	18bb      	adds	r3, r7, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	2b0a      	cmp	r3, #10
 8005d32:	d025      	beq.n	8005d80 <_UG_PutText+0x23c>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8005d34:	2512      	movs	r5, #18
 8005d36:	197c      	adds	r4, r7, r5
 8005d38:	18bb      	adds	r3, r7, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fe ffda 	bl	8004cf8 <_UG_GetCharData>
 8005d44:	0003      	movs	r3, r0
 8005d46:	8023      	strh	r3, [r4, #0]
         if (w == -1){continue;}
 8005d48:	0029      	movs	r1, r5
 8005d4a:	187b      	adds	r3, r7, r1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	5e9b      	ldrsh	r3, [r3, r2]
 8005d50:	3301      	adds	r3, #1
 8005d52:	d013      	beq.n	8005d7c <_UG_PutText+0x238>
         sl++;
 8005d54:	202e      	movs	r0, #46	; 0x2e
 8005d56:	183b      	adds	r3, r7, r0
 8005d58:	881a      	ldrh	r2, [r3, #0]
 8005d5a:	183b      	adds	r3, r7, r0
 8005d5c:	3201      	adds	r2, #1
 8005d5e:	801a      	strh	r2, [r3, #0]
         wl += w + char_h_space;
 8005d60:	187b      	adds	r3, r7, r1
 8005d62:	881a      	ldrh	r2, [r3, #0]
 8005d64:	2316      	movs	r3, #22
 8005d66:	18fb      	adds	r3, r7, r3
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	18d3      	adds	r3, r2, r3
 8005d6c:	b299      	uxth	r1, r3
 8005d6e:	222a      	movs	r2, #42	; 0x2a
 8005d70:	18bb      	adds	r3, r7, r2
 8005d72:	18ba      	adds	r2, r7, r2
 8005d74:	8812      	ldrh	r2, [r2, #0]
 8005d76:	188a      	adds	r2, r1, r2
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e7bb      	b.n	8005cf4 <_UG_PutText+0x1b0>
         if (w == -1){continue;}
 8005d7c:	46c0      	nop			; (mov r8, r8)
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005d7e:	e7b9      	b.n	8005cf4 <_UG_PutText+0x1b0>
      }
      wl -= char_h_space;
 8005d80:	2316      	movs	r3, #22
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	881a      	ldrh	r2, [r3, #0]
 8005d86:	202a      	movs	r0, #42	; 0x2a
 8005d88:	183b      	adds	r3, r7, r0
 8005d8a:	1839      	adds	r1, r7, r0
 8005d8c:	8809      	ldrh	r1, [r1, #0]
 8005d8e:	1a8a      	subs	r2, r1, r2
 8005d90:	801a      	strh	r2, [r3, #0]

      xp = xe - xs + 1;
 8005d92:	231a      	movs	r3, #26
 8005d94:	18fb      	adds	r3, r7, r3
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	231c      	movs	r3, #28
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	3301      	adds	r3, #1
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	2128      	movs	r1, #40	; 0x28
 8005da8:	187b      	adds	r3, r7, r1
 8005daa:	801a      	strh	r2, [r3, #0]
      xp -= wl;
 8005dac:	187b      	adds	r3, r7, r1
 8005dae:	881a      	ldrh	r2, [r3, #0]
 8005db0:	183b      	adds	r3, r7, r0
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	801a      	strh	r2, [r3, #0]
      if ( xp < 0 ) break;
 8005dbc:	187b      	adds	r3, r7, r1
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	da00      	bge.n	8005dc8 <_UG_PutText+0x284>
 8005dc6:	e083      	b.n	8005ed0 <_UG_PutText+0x38c>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8005dc8:	2319      	movs	r3, #25
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <_UG_PutText+0x298>
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e00c      	b.n	8005df6 <_UG_PutText+0x2b2>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8005ddc:	2319      	movs	r3, #25
 8005dde:	18fb      	adds	r3, r7, r3
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2202      	movs	r2, #2
 8005de4:	4013      	ands	r3, r2
 8005de6:	d006      	beq.n	8005df6 <_UG_PutText+0x2b2>
 8005de8:	2228      	movs	r2, #40	; 0x28
 8005dea:	18bb      	adds	r3, r7, r2
 8005dec:	18ba      	adds	r2, r7, r2
 8005dee:	2100      	movs	r1, #0
 8005df0:	5e52      	ldrsh	r2, [r2, r1]
 8005df2:	1052      	asrs	r2, r2, #1
 8005df4:	801a      	strh	r2, [r3, #0]
      xp += xs;
 8005df6:	2128      	movs	r1, #40	; 0x28
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	231c      	movs	r3, #28
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	18d3      	adds	r3, r2, r3
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	187b      	adds	r3, r7, r1
 8005e08:	801a      	strh	r2, [r3, #0]


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <_UG_PutText+0x398>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	222d      	movs	r2, #45	; 0x2d
 8005e10:	5c9b      	ldrb	r3, [r3, r2]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <_UG_PutText+0x2e6>
           chr = _UG_DecodeUTF8(&str);
 8005e16:	2324      	movs	r3, #36	; 0x24
 8005e18:	18fc      	adds	r4, r7, r3
 8005e1a:	230c      	movs	r3, #12
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7fe febc 	bl	8004b9c <_UG_DecodeUTF8>
 8005e24:	0003      	movs	r3, r0
 8005e26:	8023      	strh	r3, [r4, #0]
 8005e28:	e006      	b.n	8005e38 <_UG_PutText+0x2f4>
         }
         else{
           chr = *str++;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	60fa      	str	r2, [r7, #12]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	2324      	movs	r3, #36	; 0x24
 8005e34:	18fb      	adds	r3, r7, r3
 8005e36:	801a      	strh	r2, [r3, #0]
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8005e38:	2024      	movs	r0, #36	; 0x24
 8005e3a:	183b      	adds	r3, r7, r0
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d048      	beq.n	8005ed4 <_UG_PutText+0x390>
           return;
         }
         else if(chr=='\n'){
 8005e42:	183b      	adds	r3, r7, r0
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	2b0a      	cmp	r3, #10
 8005e48:	d02b      	beq.n	8005ea2 <_UG_PutText+0x35e>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8a1e      	ldrh	r6, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	8a5b      	ldrh	r3, [r3, #18]
 8005e52:	2212      	movs	r2, #18
 8005e54:	18bc      	adds	r4, r7, r2
 8005e56:	2126      	movs	r1, #38	; 0x26
 8005e58:	187a      	adds	r2, r7, r1
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	5e55      	ldrsh	r5, [r2, r1]
 8005e5e:	2128      	movs	r1, #40	; 0x28
 8005e60:	187a      	adds	r2, r7, r1
 8005e62:	2100      	movs	r1, #0
 8005e64:	5e51      	ldrsh	r1, [r2, r1]
 8005e66:	183a      	adds	r2, r7, r0
 8005e68:	8810      	ldrh	r0, [r2, #0]
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	0033      	movs	r3, r6
 8005e6e:	002a      	movs	r2, r5
 8005e70:	f7ff f916 	bl	80050a0 <_UG_PutChar>
 8005e74:	0003      	movs	r3, r0
 8005e76:	8023      	strh	r3, [r4, #0]
         if(w!=-1)
 8005e78:	2212      	movs	r2, #18
 8005e7a:	18bb      	adds	r3, r7, r2
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	5e1b      	ldrsh	r3, [r3, r0]
 8005e80:	3301      	adds	r3, #1
 8005e82:	d0c2      	beq.n	8005e0a <_UG_PutText+0x2c6>
           xp += w + char_h_space;
 8005e84:	18bb      	adds	r3, r7, r2
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	2316      	movs	r3, #22
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	18d3      	adds	r3, r2, r3
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	2128      	movs	r1, #40	; 0x28
 8005e94:	187b      	adds	r3, r7, r1
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	18d3      	adds	r3, r2, r3
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	187b      	adds	r3, r7, r1
 8005e9e:	801a      	strh	r2, [r3, #0]
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8005ea0:	e7b3      	b.n	8005e0a <_UG_PutText+0x2c6>
           break;
 8005ea2:	46c0      	nop			; (mov r8, r8)
      }
      yp += char_height + char_v_space;
 8005ea4:	231e      	movs	r3, #30
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	881a      	ldrh	r2, [r3, #0]
 8005eaa:	2314      	movs	r3, #20
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	18d3      	adds	r3, r2, r3
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	2126      	movs	r1, #38	; 0x26
 8005eb6:	187b      	adds	r3, r7, r1
 8005eb8:	881b      	ldrh	r3, [r3, #0]
 8005eba:	18d3      	adds	r3, r2, r3
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	187b      	adds	r3, r7, r1
 8005ec0:	801a      	strh	r2, [r3, #0]
      sl=0;
 8005ec2:	e70d      	b.n	8005ce0 <_UG_PutText+0x19c>
     return;
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	e006      	b.n	8005ed6 <_UG_PutText+0x392>
     return;
 8005ec8:	46c0      	nop			; (mov r8, r8)
 8005eca:	e004      	b.n	8005ed6 <_UG_PutText+0x392>
        return;
 8005ecc:	46c0      	nop			; (mov r8, r8)
 8005ece:	e002      	b.n	8005ed6 <_UG_PutText+0x392>
      if ( xp < 0 ) break;
 8005ed0:	46c0      	nop			; (mov r8, r8)
 8005ed2:	e000      	b.n	8005ed6 <_UG_PutText+0x392>
           return;
 8005ed4:	46c0      	nop			; (mov r8, r8)
   }
}
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b00d      	add	sp, #52	; 0x34
 8005eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005edc:	20000704 	.word	0x20000704

08005ee0 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8005ee0:	b5b0      	push	{r4, r5, r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	0005      	movs	r5, r0
 8005ee8:	000c      	movs	r4, r1
 8005eea:	0010      	movs	r0, r2
 8005eec:	0019      	movs	r1, r3
 8005eee:	1dbb      	adds	r3, r7, #6
 8005ef0:	1c2a      	adds	r2, r5, #0
 8005ef2:	801a      	strh	r2, [r3, #0]
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	1c22      	adds	r2, r4, #0
 8005ef8:	801a      	strh	r2, [r3, #0]
 8005efa:	1cbb      	adds	r3, r7, #2
 8005efc:	1c02      	adds	r2, r0, #0
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	003b      	movs	r3, r7
 8005f02:	1c0a      	adds	r2, r1, #0
 8005f04:	801a      	strh	r2, [r3, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8005f06:	1cbb      	adds	r3, r7, #2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	b21c      	sxth	r4, r3
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	1c9a      	adds	r2, r3, #2
 8005f14:	61ba      	str	r2, [r7, #24]
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	1d3a      	adds	r2, r7, #4
 8005f1a:	2500      	movs	r5, #0
 8005f1c:	5f55      	ldrsh	r5, [r2, r5]
 8005f1e:	1d3a      	adds	r2, r7, #4
 8005f20:	2100      	movs	r1, #0
 8005f22:	5e51      	ldrsh	r1, [r2, r1]
 8005f24:	1dba      	adds	r2, r7, #6
 8005f26:	2000      	movs	r0, #0
 8005f28:	5e10      	ldrsh	r0, [r2, r0]
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	002b      	movs	r3, r5
 8005f2e:	0022      	movs	r2, r4
 8005f30:	f7fe fbc6 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8005f34:	1d3b      	adds	r3, r7, #4
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	b219      	sxth	r1, r3
 8005f3e:	003b      	movs	r3, r7
 8005f40:	881b      	ldrh	r3, [r3, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	b21d      	sxth	r5, r3
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1c9a      	adds	r2, r3, #2
 8005f4c:	61ba      	str	r2, [r7, #24]
 8005f4e:	881b      	ldrh	r3, [r3, #0]
 8005f50:	1dba      	adds	r2, r7, #6
 8005f52:	2400      	movs	r4, #0
 8005f54:	5f14      	ldrsh	r4, [r2, r4]
 8005f56:	1dba      	adds	r2, r7, #6
 8005f58:	2000      	movs	r0, #0
 8005f5a:	5e10      	ldrsh	r0, [r2, r0]
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	002b      	movs	r3, r5
 8005f60:	0022      	movs	r2, r4
 8005f62:	f7fe fbad 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	61ba      	str	r2, [r7, #24]
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	003a      	movs	r2, r7
 8005f70:	2500      	movs	r5, #0
 8005f72:	5f55      	ldrsh	r5, [r2, r5]
 8005f74:	1cba      	adds	r2, r7, #2
 8005f76:	2400      	movs	r4, #0
 8005f78:	5f14      	ldrsh	r4, [r2, r4]
 8005f7a:	003a      	movs	r2, r7
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	5e51      	ldrsh	r1, [r2, r1]
 8005f80:	1dba      	adds	r2, r7, #6
 8005f82:	2000      	movs	r0, #0
 8005f84:	5e10      	ldrsh	r0, [r2, r0]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	002b      	movs	r3, r5
 8005f8a:	0022      	movs	r2, r4
 8005f8c:	f7fe fb98 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8005f90:	003b      	movs	r3, r7
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	b21d      	sxth	r5, r3
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	61ba      	str	r2, [r7, #24]
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	1cba      	adds	r2, r7, #2
 8005fa4:	2400      	movs	r4, #0
 8005fa6:	5f14      	ldrsh	r4, [r2, r4]
 8005fa8:	1d3a      	adds	r2, r7, #4
 8005faa:	2100      	movs	r1, #0
 8005fac:	5e51      	ldrsh	r1, [r2, r1]
 8005fae:	1cba      	adds	r2, r7, #2
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	5e10      	ldrsh	r0, [r2, r0]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	002b      	movs	r3, r5
 8005fb8:	0022      	movs	r2, r4
 8005fba:	f7fe fb81 	bl	80046c0 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8005fbe:	1dbb      	adds	r3, r7, #6
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	b218      	sxth	r0, r3
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	b219      	sxth	r1, r3
 8005fd2:	1cbb      	adds	r3, r7, #2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	3b02      	subs	r3, #2
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	b21c      	sxth	r4, r3
 8005fdc:	1d3b      	adds	r3, r7, #4
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	b21d      	sxth	r5, r3
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	1c9a      	adds	r2, r3, #2
 8005fea:	61ba      	str	r2, [r7, #24]
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	002b      	movs	r3, r5
 8005ff2:	0022      	movs	r2, r4
 8005ff4:	f7fe fb64 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8005ff8:	1dbb      	adds	r3, r7, #6
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	b218      	sxth	r0, r3
 8006002:	1d3b      	adds	r3, r7, #4
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	3302      	adds	r3, #2
 8006008:	b29b      	uxth	r3, r3
 800600a:	b219      	sxth	r1, r3
 800600c:	1dbb      	adds	r3, r7, #6
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	3301      	adds	r3, #1
 8006012:	b29b      	uxth	r3, r3
 8006014:	b21c      	sxth	r4, r3
 8006016:	003b      	movs	r3, r7
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	3b02      	subs	r3, #2
 800601c:	b29b      	uxth	r3, r3
 800601e:	b21d      	sxth	r5, r3
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1c9a      	adds	r2, r3, #2
 8006024:	61ba      	str	r2, [r7, #24]
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	002b      	movs	r3, r5
 800602c:	0022      	movs	r2, r4
 800602e:	f7fe fb47 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8006032:	1dbb      	adds	r3, r7, #6
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	3301      	adds	r3, #1
 8006038:	b29b      	uxth	r3, r3
 800603a:	b218      	sxth	r0, r3
 800603c:	003b      	movs	r3, r7
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	3b01      	subs	r3, #1
 8006042:	b29b      	uxth	r3, r3
 8006044:	b219      	sxth	r1, r3
 8006046:	1cbb      	adds	r3, r7, #2
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	3b01      	subs	r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	b21c      	sxth	r4, r3
 8006050:	003b      	movs	r3, r7
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	3b01      	subs	r3, #1
 8006056:	b29b      	uxth	r3, r3
 8006058:	b21d      	sxth	r5, r3
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	1c9a      	adds	r2, r3, #2
 800605e:	61ba      	str	r2, [r7, #24]
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	002b      	movs	r3, r5
 8006066:	0022      	movs	r2, r4
 8006068:	f7fe fb2a 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800606c:	1cbb      	adds	r3, r7, #2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	3b01      	subs	r3, #1
 8006072:	b29b      	uxth	r3, r3
 8006074:	b218      	sxth	r0, r3
 8006076:	1d3b      	adds	r3, r7, #4
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	b29b      	uxth	r3, r3
 800607e:	b219      	sxth	r1, r3
 8006080:	1cbb      	adds	r3, r7, #2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	3b01      	subs	r3, #1
 8006086:	b29b      	uxth	r3, r3
 8006088:	b21c      	sxth	r4, r3
 800608a:	003b      	movs	r3, r7
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	3b02      	subs	r3, #2
 8006090:	b29b      	uxth	r3, r3
 8006092:	b21d      	sxth	r5, r3
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	1c9a      	adds	r2, r3, #2
 8006098:	61ba      	str	r2, [r7, #24]
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	002b      	movs	r3, r5
 80060a0:	0022      	movs	r2, r4
 80060a2:	f7fe fb0d 	bl	80046c0 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80060a6:	1dbb      	adds	r3, r7, #6
 80060a8:	881b      	ldrh	r3, [r3, #0]
 80060aa:	3302      	adds	r3, #2
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	b218      	sxth	r0, r3
 80060b0:	1d3b      	adds	r3, r7, #4
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	3302      	adds	r3, #2
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	b219      	sxth	r1, r3
 80060ba:	1cbb      	adds	r3, r7, #2
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	3b03      	subs	r3, #3
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	b21c      	sxth	r4, r3
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	3302      	adds	r3, #2
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	b21d      	sxth	r5, r3
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1c9a      	adds	r2, r3, #2
 80060d2:	61ba      	str	r2, [r7, #24]
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	9300      	str	r3, [sp, #0]
 80060d8:	002b      	movs	r3, r5
 80060da:	0022      	movs	r2, r4
 80060dc:	f7fe faf0 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80060e0:	1dbb      	adds	r3, r7, #6
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	3302      	adds	r3, #2
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	b218      	sxth	r0, r3
 80060ea:	1d3b      	adds	r3, r7, #4
 80060ec:	881b      	ldrh	r3, [r3, #0]
 80060ee:	3303      	adds	r3, #3
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b219      	sxth	r1, r3
 80060f4:	1dbb      	adds	r3, r7, #6
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	3302      	adds	r3, #2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	b21c      	sxth	r4, r3
 80060fe:	003b      	movs	r3, r7
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	3b03      	subs	r3, #3
 8006104:	b29b      	uxth	r3, r3
 8006106:	b21d      	sxth	r5, r3
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	1c9a      	adds	r2, r3, #2
 800610c:	61ba      	str	r2, [r7, #24]
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	002b      	movs	r3, r5
 8006114:	0022      	movs	r2, r4
 8006116:	f7fe fad3 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800611a:	1dbb      	adds	r3, r7, #6
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	3302      	adds	r3, #2
 8006120:	b29b      	uxth	r3, r3
 8006122:	b218      	sxth	r0, r3
 8006124:	003b      	movs	r3, r7
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	3b02      	subs	r3, #2
 800612a:	b29b      	uxth	r3, r3
 800612c:	b219      	sxth	r1, r3
 800612e:	1cbb      	adds	r3, r7, #2
 8006130:	881b      	ldrh	r3, [r3, #0]
 8006132:	3b02      	subs	r3, #2
 8006134:	b29b      	uxth	r3, r3
 8006136:	b21c      	sxth	r4, r3
 8006138:	003b      	movs	r3, r7
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	3b02      	subs	r3, #2
 800613e:	b29b      	uxth	r3, r3
 8006140:	b21d      	sxth	r5, r3
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	1c9a      	adds	r2, r3, #2
 8006146:	61ba      	str	r2, [r7, #24]
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	9300      	str	r3, [sp, #0]
 800614c:	002b      	movs	r3, r5
 800614e:	0022      	movs	r2, r4
 8006150:	f7fe fab6 	bl	80046c0 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8006154:	1cbb      	adds	r3, r7, #2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	3b02      	subs	r3, #2
 800615a:	b29b      	uxth	r3, r3
 800615c:	b218      	sxth	r0, r3
 800615e:	1d3b      	adds	r3, r7, #4
 8006160:	881b      	ldrh	r3, [r3, #0]
 8006162:	3302      	adds	r3, #2
 8006164:	b29b      	uxth	r3, r3
 8006166:	b219      	sxth	r1, r3
 8006168:	1cbb      	adds	r3, r7, #2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	3b02      	subs	r3, #2
 800616e:	b29b      	uxth	r3, r3
 8006170:	b21a      	sxth	r2, r3
 8006172:	003b      	movs	r3, r7
 8006174:	881b      	ldrh	r3, [r3, #0]
 8006176:	3b03      	subs	r3, #3
 8006178:	b29b      	uxth	r3, r3
 800617a:	b21c      	sxth	r4, r3
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	0023      	movs	r3, r4
 8006184:	f7fe fa9c 	bl	80046c0 <UG_DrawLine>
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bdb0      	pop	{r4, r5, r7, pc}

08006190 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	0002      	movs	r2, r0
 8006198:	6039      	str	r1, [r7, #0]
 800619a:	1dfb      	adds	r3, r7, #7
 800619c:	701a      	strb	r2, [r3, #0]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800619e:	1dfb      	adds	r3, r7, #7
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	2b03      	cmp	r3, #3
 80061a4:	d814      	bhi.n	80061d0 <UG_DriverRegister+0x40>

   gui->driver[type].driver = driver;
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <UG_DriverRegister+0x48>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	1dfb      	adds	r3, r7, #7
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	330a      	adds	r3, #10
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	18d3      	adds	r3, r2, r3
 80061b4:	3304      	adds	r3, #4
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	601a      	str	r2, [r3, #0]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80061ba:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <UG_DriverRegister+0x48>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	1dfb      	adds	r3, r7, #7
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	330a      	adds	r3, #10
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	18d3      	adds	r3, r2, r3
 80061c8:	3308      	adds	r3, #8
 80061ca:	2203      	movs	r2, #3
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e000      	b.n	80061d2 <UG_DriverRegister+0x42>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80061d0:	46c0      	nop			; (mov r8, r8)
}
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b002      	add	sp, #8
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20000704 	.word	0x20000704

080061dc <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80061e2:	4b61      	ldr	r3, [pc, #388]	; (8006368 <UG_Update+0x18c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2252      	movs	r2, #82	; 0x52
 80061e8:	5c9b      	ldrb	r3, [r3, r2]
 80061ea:	001a      	movs	r2, r3
 80061ec:	2301      	movs	r3, #1
 80061ee:	4013      	ands	r3, r2
 80061f0:	d00a      	beq.n	8006208 <UG_Update+0x2c>
 80061f2:	4b5d      	ldr	r3, [pc, #372]	; (8006368 <UG_Update+0x18c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2252      	movs	r2, #82	; 0x52
 80061f8:	5c9a      	ldrb	r2, [r3, r2]
 80061fa:	4b5b      	ldr	r3, [pc, #364]	; (8006368 <UG_Update+0x18c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2101      	movs	r1, #1
 8006200:	438a      	bics	r2, r1
 8006202:	b2d1      	uxtb	r1, r2
 8006204:	2252      	movs	r2, #82	; 0x52
 8006206:	5499      	strb	r1, [r3, r2]

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8006208:	4b57      	ldr	r3, [pc, #348]	; (8006368 <UG_Update+0x18c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68da      	ldr	r2, [r3, #12]
 800620e:	4b56      	ldr	r3, [pc, #344]	; (8006368 <UG_Update+0x18c>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	429a      	cmp	r2, r3
 8006216:	d100      	bne.n	800621a <UG_Update+0x3e>
 8006218:	e071      	b.n	80062fe <UG_Update+0x122>
   {
      if ( gui->next_window != NULL )
 800621a:	4b53      	ldr	r3, [pc, #332]	; (8006368 <UG_Update+0x18c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d06c      	beq.n	80062fe <UG_Update+0x122>
      {
         gui->last_window = gui->active_window;
 8006224:	4b50      	ldr	r3, [pc, #320]	; (8006368 <UG_Update+0x18c>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b4f      	ldr	r3, [pc, #316]	; (8006368 <UG_Update+0x18c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6912      	ldr	r2, [r2, #16]
 800622e:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 8006230:	4b4d      	ldr	r3, [pc, #308]	; (8006368 <UG_Update+0x18c>)
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b4c      	ldr	r3, [pc, #304]	; (8006368 <UG_Update+0x18c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68d2      	ldr	r2, [r2, #12]
 800623a:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800623c:	4b4a      	ldr	r3, [pc, #296]	; (8006368 <UG_Update+0x18c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d045      	beq.n	80062d2 <UG_Update+0xf6>
 8006246:	4b48      	ldr	r3, [pc, #288]	; (8006368 <UG_Update+0x18c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	7d9b      	ldrb	r3, [r3, #22]
 800624e:	001a      	movs	r2, r3
 8006250:	2302      	movs	r3, #2
 8006252:	4013      	ands	r3, r2
 8006254:	d03d      	beq.n	80062d2 <UG_Update+0xf6>
 8006256:	4b44      	ldr	r3, [pc, #272]	; (8006368 <UG_Update+0x18c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	7a1b      	ldrb	r3, [r3, #8]
 800625e:	001a      	movs	r2, r3
 8006260:	2308      	movs	r3, #8
 8006262:	4013      	ands	r3, r2
 8006264:	d035      	beq.n	80062d2 <UG_Update+0xf6>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 8006266:	4b40      	ldr	r3, [pc, #256]	; (8006368 <UG_Update+0x18c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	220e      	movs	r2, #14
 800626e:	5e9a      	ldrsh	r2, [r3, r2]
 8006270:	4b3d      	ldr	r3, [pc, #244]	; (8006368 <UG_Update+0x18c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	210e      	movs	r1, #14
 8006278:	5e5b      	ldrsh	r3, [r3, r1]
 800627a:	429a      	cmp	r2, r3
 800627c:	d123      	bne.n	80062c6 <UG_Update+0xea>
 800627e:	4b3a      	ldr	r3, [pc, #232]	; (8006368 <UG_Update+0x18c>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	2212      	movs	r2, #18
 8006286:	5e9a      	ldrsh	r2, [r3, r2]
 8006288:	4b37      	ldr	r3, [pc, #220]	; (8006368 <UG_Update+0x18c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2112      	movs	r1, #18
 8006290:	5e5b      	ldrsh	r3, [r3, r1]
 8006292:	429a      	cmp	r2, r3
 8006294:	d117      	bne.n	80062c6 <UG_Update+0xea>
 8006296:	4b34      	ldr	r3, [pc, #208]	; (8006368 <UG_Update+0x18c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2210      	movs	r2, #16
 800629e:	5e9a      	ldrsh	r2, [r3, r2]
 80062a0:	4b31      	ldr	r3, [pc, #196]	; (8006368 <UG_Update+0x18c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	2110      	movs	r1, #16
 80062a8:	5e5b      	ldrsh	r3, [r3, r1]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d10b      	bne.n	80062c6 <UG_Update+0xea>
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <UG_Update+0x18c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2214      	movs	r2, #20
 80062b6:	5e9a      	ldrsh	r2, [r3, r2]
 80062b8:	4b2b      	ldr	r3, [pc, #172]	; (8006368 <UG_Update+0x18c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	2114      	movs	r1, #20
 80062c0:	5e5b      	ldrsh	r3, [r3, r1]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d005      	beq.n	80062d2 <UG_Update+0xf6>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80062c6:	4b28      	ldr	r3, [pc, #160]	; (8006368 <UG_Update+0x18c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 f84d 	bl	800636c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80062d2:	4b25      	ldr	r3, [pc, #148]	; (8006368 <UG_Update+0x18c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	7a1a      	ldrb	r2, [r3, #8]
 80062da:	4b23      	ldr	r3, [pc, #140]	; (8006368 <UG_Update+0x18c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	2140      	movs	r1, #64	; 0x40
 80062e2:	438a      	bics	r2, r1
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80062e8:	4b1f      	ldr	r3, [pc, #124]	; (8006368 <UG_Update+0x18c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	7a1a      	ldrb	r2, [r3, #8]
 80062f0:	4b1d      	ldr	r3, [pc, #116]	; (8006368 <UG_Update+0x18c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2128      	movs	r1, #40	; 0x28
 80062f8:	430a      	orrs	r2, r1
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80062fe:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <UG_Update+0x18c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01f      	beq.n	8006348 <UG_Update+0x16c>
   {
      wnd = gui->active_window;
 8006308:	4b17      	ldr	r3, [pc, #92]	; (8006368 <UG_Update+0x18c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	7a1b      	ldrb	r3, [r3, #8]
 8006314:	001a      	movs	r2, r3
 8006316:	2320      	movs	r3, #32
 8006318:	4013      	ands	r3, r2
 800631a:	d003      	beq.n	8006324 <UG_Update+0x148>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	0018      	movs	r0, r3
 8006320:	f000 f904 	bl	800652c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	7a1b      	ldrb	r3, [r3, #8]
 8006328:	001a      	movs	r2, r3
 800632a:	2308      	movs	r3, #8
 800632c:	4013      	ands	r3, r2
 800632e:	d00b      	beq.n	8006348 <UG_Update+0x16c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	0018      	movs	r0, r3
 8006334:	f7ff fa54 	bl	80057e0 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	0018      	movs	r0, r3
 800633c:	f7ff fb46 	bl	80059cc <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	0018      	movs	r0, r3
 8006344:	f7ff fba2 	bl	8005a8c <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <UG_Update+0x18c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <UG_Update+0x182>
     gui->device->flush();
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <UG_Update+0x18c>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	4798      	blx	r3
   }
}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	b002      	add	sp, #8
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	20000704 	.word	0x20000704

0800636c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 800636c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800636e:	b08f      	sub	sp, #60	; 0x3c
 8006370:	af02      	add	r7, sp, #8
 8006372:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d100      	bne.n	800637c <_UG_WindowDrawTitle+0x10>
 800637a:	e0cd      	b.n	8006518 <_UG_WindowDrawTitle+0x1ac>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	7a1b      	ldrb	r3, [r3, #8]
 8006380:	001a      	movs	r2, r3
 8006382:	2302      	movs	r3, #2
 8006384:	4013      	ands	r3, r2
 8006386:	d100      	bne.n	800638a <_UG_WindowDrawTitle+0x1e>
 8006388:	e0c6      	b.n	8006518 <_UG_WindowDrawTitle+0x1ac>
   {
      xs = wnd->xs;
 800638a:	212e      	movs	r1, #46	; 0x2e
 800638c:	187b      	adds	r3, r7, r1
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	89d2      	ldrh	r2, [r2, #14]
 8006392:	801a      	strh	r2, [r3, #0]
      ys = wnd->ys;
 8006394:	202c      	movs	r0, #44	; 0x2c
 8006396:	183b      	adds	r3, r7, r0
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	8a12      	ldrh	r2, [r2, #16]
 800639c:	801a      	strh	r2, [r3, #0]
      xe = wnd->xe;
 800639e:	242a      	movs	r4, #42	; 0x2a
 80063a0:	193b      	adds	r3, r7, r4
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	8a52      	ldrh	r2, [r2, #18]
 80063a6:	801a      	strh	r2, [r3, #0]
      ye = wnd->ye;
 80063a8:	2528      	movs	r5, #40	; 0x28
 80063aa:	197b      	adds	r3, r7, r5
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	8a92      	ldrh	r2, [r2, #20]
 80063b0:	801a      	strh	r2, [r3, #0]

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	7d9b      	ldrb	r3, [r3, #22]
 80063b6:	001a      	movs	r2, r3
 80063b8:	2301      	movs	r3, #1
 80063ba:	4013      	ands	r3, r2
 80063bc:	d017      	beq.n	80063ee <_UG_WindowDrawTitle+0x82>
      {
         xs+=3;
 80063be:	187b      	adds	r3, r7, r1
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	3303      	adds	r3, #3
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	187b      	adds	r3, r7, r1
 80063c8:	801a      	strh	r2, [r3, #0]
         ys+=3;
 80063ca:	183b      	adds	r3, r7, r0
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	3303      	adds	r3, #3
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	183b      	adds	r3, r7, r0
 80063d4:	801a      	strh	r2, [r3, #0]
         xe-=3;
 80063d6:	193b      	adds	r3, r7, r4
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	3b03      	subs	r3, #3
 80063dc:	b29a      	uxth	r2, r3
 80063de:	193b      	adds	r3, r7, r4
 80063e0:	801a      	strh	r2, [r3, #0]
         ye-=3;
 80063e2:	197b      	adds	r3, r7, r5
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	3b03      	subs	r3, #3
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	197b      	adds	r3, r7, r5
 80063ec:	801a      	strh	r2, [r3, #0]
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 80063ee:	4b4d      	ldr	r3, [pc, #308]	; (8006524 <_UG_WindowDrawTitle+0x1b8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d109      	bne.n	800640e <_UG_WindowDrawTitle+0xa2>
      {
         txt.bc = wnd->title.bc;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80063fe:	210c      	movs	r1, #12
 8006400:	187b      	adds	r3, r7, r1
 8006402:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.fc;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8006408:	187b      	adds	r3, r7, r1
 800640a:	821a      	strh	r2, [r3, #16]
 800640c:	e008      	b.n	8006420 <_UG_WindowDrawTitle+0xb4>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006412:	210c      	movs	r1, #12
 8006414:	187b      	adds	r3, r7, r1
 8006416:	825a      	strh	r2, [r3, #18]
         txt.fc = wnd->title.ifc;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800641c:	187b      	adds	r3, r7, r1
 800641e:	821a      	strh	r2, [r3, #16]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	222c      	movs	r2, #44	; 0x2c
 8006424:	5c9b      	ldrb	r3, [r3, r2]
 8006426:	b29a      	uxth	r2, r3
 8006428:	212c      	movs	r1, #44	; 0x2c
 800642a:	187b      	adds	r3, r7, r1
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	18d3      	adds	r3, r2, r3
 8006430:	b29b      	uxth	r3, r3
 8006432:	3b01      	subs	r3, #1
 8006434:	b29b      	uxth	r3, r3
 8006436:	b21d      	sxth	r5, r3
 8006438:	260c      	movs	r6, #12
 800643a:	19bb      	adds	r3, r7, r6
 800643c:	8a5b      	ldrh	r3, [r3, #18]
 800643e:	222a      	movs	r2, #42	; 0x2a
 8006440:	18ba      	adds	r2, r7, r2
 8006442:	2000      	movs	r0, #0
 8006444:	5e14      	ldrsh	r4, [r2, r0]
 8006446:	187a      	adds	r2, r7, r1
 8006448:	2000      	movs	r0, #0
 800644a:	5e11      	ldrsh	r1, [r2, r0]
 800644c:	202e      	movs	r0, #46	; 0x2e
 800644e:	183a      	adds	r2, r7, r0
 8006450:	2000      	movs	r0, #0
 8006452:	5e10      	ldrsh	r0, [r2, r0]
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	002b      	movs	r3, r5
 8006458:	0022      	movs	r2, r4
 800645a:	f7fe f88b 	bl	8004574 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699a      	ldr	r2, [r3, #24]
 8006462:	19bb      	adds	r3, r7, r6
 8006464:	601a      	str	r2, [r3, #0]
      txt.font = wnd->title.font;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69da      	ldr	r2, [r3, #28]
 800646a:	19bb      	adds	r3, r7, r6
 800646c:	605a      	str	r2, [r3, #4]
      txt.a.xs = xs+3;
 800646e:	202e      	movs	r0, #46	; 0x2e
 8006470:	183b      	adds	r3, r7, r0
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	3303      	adds	r3, #3
 8006476:	b29b      	uxth	r3, r3
 8006478:	b21a      	sxth	r2, r3
 800647a:	0031      	movs	r1, r6
 800647c:	187b      	adds	r3, r7, r1
 800647e:	811a      	strh	r2, [r3, #8]
      txt.a.ys = ys;
 8006480:	187b      	adds	r3, r7, r1
 8006482:	242c      	movs	r4, #44	; 0x2c
 8006484:	193a      	adds	r2, r7, r4
 8006486:	8812      	ldrh	r2, [r2, #0]
 8006488:	815a      	strh	r2, [r3, #10]
      txt.a.xe = xe;
 800648a:	187b      	adds	r3, r7, r1
 800648c:	262a      	movs	r6, #42	; 0x2a
 800648e:	19ba      	adds	r2, r7, r6
 8006490:	8812      	ldrh	r2, [r2, #0]
 8006492:	819a      	strh	r2, [r3, #12]
      txt.a.ye = ys+wnd->title.height-1;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	222c      	movs	r2, #44	; 0x2c
 8006498:	5c9b      	ldrb	r3, [r3, r2]
 800649a:	b29a      	uxth	r2, r3
 800649c:	193b      	adds	r3, r7, r4
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	18d3      	adds	r3, r2, r3
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	b21a      	sxth	r2, r3
 80064aa:	187b      	adds	r3, r7, r1
 80064ac:	81da      	strh	r2, [r3, #14]
      txt.align = wnd->title.align;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2222      	movs	r2, #34	; 0x22
 80064b2:	5c9a      	ldrb	r2, [r3, r2]
 80064b4:	187b      	adds	r3, r7, r1
 80064b6:	751a      	strb	r2, [r3, #20]
      txt.h_space = wnd->title.h_space;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	569b      	ldrsb	r3, [r3, r2]
 80064be:	b21a      	sxth	r2, r3
 80064c0:	187b      	adds	r3, r7, r1
 80064c2:	82da      	strh	r2, [r3, #22]
      txt.v_space = wnd->title.v_space;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2221      	movs	r2, #33	; 0x21
 80064c8:	569b      	ldrsb	r3, [r3, r2]
 80064ca:	b21a      	sxth	r2, r3
 80064cc:	187b      	adds	r3, r7, r1
 80064ce:	831a      	strh	r2, [r3, #24]
      _UG_PutText( &txt );
 80064d0:	187b      	adds	r3, r7, r1
 80064d2:	0018      	movs	r0, r3
 80064d4:	f7ff fb36 	bl	8005b44 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	222c      	movs	r2, #44	; 0x2c
 80064dc:	5c9b      	ldrb	r3, [r3, r2]
 80064de:	b29a      	uxth	r2, r3
 80064e0:	193b      	adds	r3, r7, r4
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	18d3      	adds	r3, r2, r3
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	b219      	sxth	r1, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	222c      	movs	r2, #44	; 0x2c
 80064ee:	5c9b      	ldrb	r3, [r3, r2]
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	193b      	adds	r3, r7, r4
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	18d3      	adds	r3, r2, r3
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	b21c      	sxth	r4, r3
 80064fc:	4d0a      	ldr	r5, [pc, #40]	; (8006528 <_UG_WindowDrawTitle+0x1bc>)
 80064fe:	19bb      	adds	r3, r7, r6
 8006500:	2200      	movs	r2, #0
 8006502:	5e9a      	ldrsh	r2, [r3, r2]
 8006504:	202e      	movs	r0, #46	; 0x2e
 8006506:	183b      	adds	r3, r7, r0
 8006508:	2000      	movs	r0, #0
 800650a:	5e18      	ldrsh	r0, [r3, r0]
 800650c:	9500      	str	r5, [sp, #0]
 800650e:	0023      	movs	r3, r4
 8006510:	f7fe f8d6 	bl	80046c0 <UG_DrawLine>
      return UG_RESULT_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	e001      	b.n	800651c <_UG_WindowDrawTitle+0x1b0>
   }
   return UG_RESULT_FAIL;
 8006518:	2301      	movs	r3, #1
 800651a:	425b      	negs	r3, r3
}
 800651c:	0018      	movs	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	b00d      	add	sp, #52	; 0x34
 8006522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006524:	20000704 	.word	0x20000704
 8006528:	00009d13 	.word	0x00009d13

0800652c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 800652c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652e:	b089      	sub	sp, #36	; 0x24
 8006530:	af02      	add	r7, sp, #8
 8006532:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8006534:	2014      	movs	r0, #20
 8006536:	183b      	adds	r3, r7, r0
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	89d2      	ldrh	r2, [r2, #14]
 800653c:	801a      	strh	r2, [r3, #0]
   ys = wnd->ys;
 800653e:	2112      	movs	r1, #18
 8006540:	187b      	adds	r3, r7, r1
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	8a12      	ldrh	r2, [r2, #16]
 8006546:	801a      	strh	r2, [r3, #0]
   xe = wnd->xe;
 8006548:	2510      	movs	r5, #16
 800654a:	197b      	adds	r3, r7, r5
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	8a52      	ldrh	r2, [r2, #18]
 8006550:	801a      	strh	r2, [r3, #0]
   ye = wnd->ye;
 8006552:	240e      	movs	r4, #14
 8006554:	193b      	adds	r3, r7, r4
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	8a92      	ldrh	r2, [r2, #20]
 800655a:	801a      	strh	r2, [r3, #0]

   wnd->state &= ~WND_STATE_UPDATE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7a1b      	ldrb	r3, [r3, #8]
 8006560:	2220      	movs	r2, #32
 8006562:	4393      	bics	r3, r2
 8006564:	b2da      	uxtb	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	7a1b      	ldrb	r3, [r3, #8]
 800656e:	001a      	movs	r2, r3
 8006570:	2308      	movs	r3, #8
 8006572:	4013      	ands	r3, r2
 8006574:	d100      	bne.n	8006578 <_UG_WindowUpdate+0x4c>
 8006576:	e0af      	b.n	80066d8 <_UG_WindowUpdate+0x1ac>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	7d9b      	ldrb	r3, [r3, #22]
 800657c:	001a      	movs	r2, r3
 800657e:	2301      	movs	r3, #1
 8006580:	4013      	ands	r3, r2
 8006582:	d033      	beq.n	80065ec <_UG_WindowUpdate+0xc0>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	7a1b      	ldrb	r3, [r3, #8]
 8006588:	001a      	movs	r2, r3
 800658a:	2340      	movs	r3, #64	; 0x40
 800658c:	4013      	ands	r3, r2
 800658e:	d12d      	bne.n	80065ec <_UG_WindowUpdate+0xc0>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8006590:	193b      	adds	r3, r7, r4
 8006592:	2400      	movs	r4, #0
 8006594:	5f1c      	ldrsh	r4, [r3, r4]
 8006596:	197b      	adds	r3, r7, r5
 8006598:	2200      	movs	r2, #0
 800659a:	5e9a      	ldrsh	r2, [r3, r2]
 800659c:	000e      	movs	r6, r1
 800659e:	187b      	adds	r3, r7, r1
 80065a0:	2100      	movs	r1, #0
 80065a2:	5e59      	ldrsh	r1, [r3, r1]
 80065a4:	0005      	movs	r5, r0
 80065a6:	183b      	adds	r3, r7, r0
 80065a8:	2000      	movs	r0, #0
 80065aa:	5e18      	ldrsh	r0, [r3, r0]
 80065ac:	4b56      	ldr	r3, [pc, #344]	; (8006708 <_UG_WindowUpdate+0x1dc>)
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	0023      	movs	r3, r4
 80065b2:	f7ff fc95 	bl	8005ee0 <_UG_DrawObjectFrame>
         xs+=3;
 80065b6:	0028      	movs	r0, r5
 80065b8:	183b      	adds	r3, r7, r0
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	3303      	adds	r3, #3
 80065be:	b29a      	uxth	r2, r3
 80065c0:	183b      	adds	r3, r7, r0
 80065c2:	801a      	strh	r2, [r3, #0]
         ys+=3;
 80065c4:	19bb      	adds	r3, r7, r6
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	3303      	adds	r3, #3
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	19bb      	adds	r3, r7, r6
 80065ce:	801a      	strh	r2, [r3, #0]
         xe-=3;
 80065d0:	2510      	movs	r5, #16
 80065d2:	197b      	adds	r3, r7, r5
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	3b03      	subs	r3, #3
 80065d8:	b29a      	uxth	r2, r3
 80065da:	197b      	adds	r3, r7, r5
 80065dc:	801a      	strh	r2, [r3, #0]
         ye-=3;
 80065de:	240e      	movs	r4, #14
 80065e0:	193b      	adds	r3, r7, r4
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	3b03      	subs	r3, #3
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	193b      	adds	r3, r7, r4
 80065ea:	801a      	strh	r2, [r3, #0]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	7d9b      	ldrb	r3, [r3, #22]
 80065f0:	001a      	movs	r2, r3
 80065f2:	2302      	movs	r3, #2
 80065f4:	4013      	ands	r3, r2
 80065f6:	d01e      	beq.n	8006636 <_UG_WindowUpdate+0x10a>
      {
         _UG_WindowDrawTitle( wnd );
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	0018      	movs	r0, r3
 80065fc:	f7ff feb6 	bl	800636c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	222c      	movs	r2, #44	; 0x2c
 8006604:	5c9b      	ldrb	r3, [r3, r2]
 8006606:	b29a      	uxth	r2, r3
 8006608:	2112      	movs	r1, #18
 800660a:	187b      	adds	r3, r7, r1
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	18d3      	adds	r3, r2, r3
 8006610:	b29b      	uxth	r3, r3
 8006612:	3301      	adds	r3, #1
 8006614:	b29a      	uxth	r2, r3
 8006616:	187b      	adds	r3, r7, r1
 8006618:	801a      	strh	r2, [r3, #0]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7a1b      	ldrb	r3, [r3, #8]
 800661e:	001a      	movs	r2, r3
 8006620:	2340      	movs	r3, #64	; 0x40
 8006622:	4013      	ands	r3, r2
 8006624:	d007      	beq.n	8006636 <_UG_WindowUpdate+0x10a>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	7a1b      	ldrb	r3, [r3, #8]
 800662a:	2240      	movs	r2, #64	; 0x40
 800662c:	4393      	bics	r3, r2
 800662e:	b2da      	uxtb	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	721a      	strb	r2, [r3, #8]
            return;
 8006634:	e064      	b.n	8006700 <_UG_WindowUpdate+0x1d4>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	899b      	ldrh	r3, [r3, #12]
 800663a:	220e      	movs	r2, #14
 800663c:	18ba      	adds	r2, r7, r2
 800663e:	2500      	movs	r5, #0
 8006640:	5f55      	ldrsh	r5, [r2, r5]
 8006642:	2210      	movs	r2, #16
 8006644:	18ba      	adds	r2, r7, r2
 8006646:	2400      	movs	r4, #0
 8006648:	5f14      	ldrsh	r4, [r2, r4]
 800664a:	2212      	movs	r2, #18
 800664c:	18ba      	adds	r2, r7, r2
 800664e:	2100      	movs	r1, #0
 8006650:	5e51      	ldrsh	r1, [r2, r1]
 8006652:	2214      	movs	r2, #20
 8006654:	18ba      	adds	r2, r7, r2
 8006656:	2000      	movs	r0, #0
 8006658:	5e10      	ldrsh	r0, [r2, r0]
 800665a:	9300      	str	r3, [sp, #0]
 800665c:	002b      	movs	r3, r5
 800665e:	0022      	movs	r2, r4
 8006660:	f7fd ff88 	bl	8004574 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	781a      	ldrb	r2, [r3, #0]
 8006668:	230c      	movs	r3, #12
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	801a      	strh	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 800666e:	2316      	movs	r3, #22
 8006670:	18fb      	adds	r3, r7, r3
 8006672:	2200      	movs	r2, #0
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	e026      	b.n	80066c6 <_UG_WindowUpdate+0x19a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
 800667c:	2316      	movs	r3, #22
 800667e:	18fb      	adds	r3, r7, r3
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	015b      	lsls	r3, r3, #5
 8006684:	18d3      	adds	r3, r2, r3
 8006686:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	001a      	movs	r2, r3
 800668e:	2301      	movs	r3, #1
 8006690:	4013      	ands	r3, r2
 8006692:	d112      	bne.n	80066ba <_UG_WindowUpdate+0x18e>
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	001a      	movs	r2, r3
 800669a:	2302      	movs	r3, #2
 800669c:	4013      	ands	r3, r2
 800669e:	d00c      	beq.n	80066ba <_UG_WindowUpdate+0x18e>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	001a      	movs	r2, r3
 80066a6:	2308      	movs	r3, #8
 80066a8:	4013      	ands	r3, r2
 80066aa:	d006      	beq.n	80066ba <_UG_WindowUpdate+0x18e>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2260      	movs	r2, #96	; 0x60
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80066ba:	2116      	movs	r1, #22
 80066bc:	187b      	adds	r3, r7, r1
 80066be:	881a      	ldrh	r2, [r3, #0]
 80066c0:	187b      	adds	r3, r7, r1
 80066c2:	3201      	adds	r2, #1
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	2316      	movs	r3, #22
 80066c8:	18fa      	adds	r2, r7, r3
 80066ca:	230c      	movs	r3, #12
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	8812      	ldrh	r2, [r2, #0]
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d3d0      	bcc.n	8006678 <_UG_WindowUpdate+0x14c>
 80066d6:	e013      	b.n	8006700 <_UG_WindowUpdate+0x1d4>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	200e      	movs	r0, #14
 80066dc:	5e18      	ldrsh	r0, [r3, r0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	210e      	movs	r1, #14
 80066e2:	5e59      	ldrsh	r1, [r3, r1]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2212      	movs	r2, #18
 80066e8:	5e9a      	ldrsh	r2, [r3, r2]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2414      	movs	r4, #20
 80066ee:	5f1c      	ldrsh	r4, [r3, r4]
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <_UG_WindowUpdate+0x1e0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2550      	movs	r5, #80	; 0x50
 80066f6:	5b5b      	ldrh	r3, [r3, r5]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	0023      	movs	r3, r4
 80066fc:	f7fd ff3a 	bl	8004574 <UG_FillFrame>
   }
}
 8006700:	46bd      	mov	sp, r7
 8006702:	b007      	add	sp, #28
 8006704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006706:	46c0      	nop			; (mov r8, r8)
 8006708:	0800e234 	.word	0x0800e234
 800670c:	20000704 	.word	0x20000704

08006710 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006716:	1dfb      	adds	r3, r7, #7
 8006718:	2200      	movs	r2, #0
 800671a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800671c:	4b0b      	ldr	r3, [pc, #44]	; (800674c <HAL_Init+0x3c>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b0a      	ldr	r3, [pc, #40]	; (800674c <HAL_Init+0x3c>)
 8006722:	2140      	movs	r1, #64	; 0x40
 8006724:	430a      	orrs	r2, r1
 8006726:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006728:	2003      	movs	r0, #3
 800672a:	f000 f811 	bl	8006750 <HAL_InitTick>
 800672e:	1e03      	subs	r3, r0, #0
 8006730:	d003      	beq.n	800673a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8006732:	1dfb      	adds	r3, r7, #7
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	e001      	b.n	800673e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800673a:	f7fd fbd5 	bl	8003ee8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800673e:	1dfb      	adds	r3, r7, #7
 8006740:	781b      	ldrb	r3, [r3, #0]
}
 8006742:	0018      	movs	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	b002      	add	sp, #8
 8006748:	bd80      	pop	{r7, pc}
 800674a:	46c0      	nop			; (mov r8, r8)
 800674c:	40022000 	.word	0x40022000

08006750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006750:	b590      	push	{r4, r7, lr}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006758:	4b14      	ldr	r3, [pc, #80]	; (80067ac <HAL_InitTick+0x5c>)
 800675a:	681c      	ldr	r4, [r3, #0]
 800675c:	4b14      	ldr	r3, [pc, #80]	; (80067b0 <HAL_InitTick+0x60>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	0019      	movs	r1, r3
 8006762:	23fa      	movs	r3, #250	; 0xfa
 8006764:	0098      	lsls	r0, r3, #2
 8006766:	f7f9 fcd9 	bl	800011c <__udivsi3>
 800676a:	0003      	movs	r3, r0
 800676c:	0019      	movs	r1, r3
 800676e:	0020      	movs	r0, r4
 8006770:	f7f9 fcd4 	bl	800011c <__udivsi3>
 8006774:	0003      	movs	r3, r0
 8006776:	0018      	movs	r0, r3
 8006778:	f000 fd4b 	bl	8007212 <HAL_SYSTICK_Config>
 800677c:	1e03      	subs	r3, r0, #0
 800677e:	d001      	beq.n	8006784 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e00f      	b.n	80067a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b03      	cmp	r3, #3
 8006788:	d80b      	bhi.n	80067a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	2301      	movs	r3, #1
 800678e:	425b      	negs	r3, r3
 8006790:	2200      	movs	r2, #0
 8006792:	0018      	movs	r0, r3
 8006794:	f000 fd18 	bl	80071c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006798:	4b06      	ldr	r3, [pc, #24]	; (80067b4 <HAL_InitTick+0x64>)
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
}
 80067a4:	0018      	movs	r0, r3
 80067a6:	46bd      	mov	sp, r7
 80067a8:	b003      	add	sp, #12
 80067aa:	bd90      	pop	{r4, r7, pc}
 80067ac:	20000010 	.word	0x20000010
 80067b0:	20000018 	.word	0x20000018
 80067b4:	20000014 	.word	0x20000014

080067b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067bc:	4b05      	ldr	r3, [pc, #20]	; (80067d4 <HAL_IncTick+0x1c>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	001a      	movs	r2, r3
 80067c2:	4b05      	ldr	r3, [pc, #20]	; (80067d8 <HAL_IncTick+0x20>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	18d2      	adds	r2, r2, r3
 80067c8:	4b03      	ldr	r3, [pc, #12]	; (80067d8 <HAL_IncTick+0x20>)
 80067ca:	601a      	str	r2, [r3, #0]
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	46c0      	nop			; (mov r8, r8)
 80067d4:	20000018 	.word	0x20000018
 80067d8:	20000720 	.word	0x20000720

080067dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	af00      	add	r7, sp, #0
  return uwTick;
 80067e0:	4b02      	ldr	r3, [pc, #8]	; (80067ec <HAL_GetTick+0x10>)
 80067e2:	681b      	ldr	r3, [r3, #0]
}
 80067e4:	0018      	movs	r0, r3
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	20000720 	.word	0x20000720

080067f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80067f8:	f7ff fff0 	bl	80067dc <HAL_GetTick>
 80067fc:	0003      	movs	r3, r0
 80067fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	d005      	beq.n	8006816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <HAL_Delay+0x44>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	001a      	movs	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	189b      	adds	r3, r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	f7ff ffe0 	bl	80067dc <HAL_GetTick>
 800681c:	0002      	movs	r2, r0
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d8f7      	bhi.n	8006818 <HAL_Delay+0x28>
  {
  }
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	46bd      	mov	sp, r7
 800682e:	b004      	add	sp, #16
 8006830:	bd80      	pop	{r7, pc}
 8006832:	46c0      	nop			; (mov r8, r8)
 8006834:	20000018 	.word	0x20000018

08006838 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e159      	b.n	8006afe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	2b00      	cmp	r3, #0
 8006850:	d10a      	bne.n	8006868 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2250      	movs	r2, #80	; 0x50
 800685c:	2100      	movs	r1, #0
 800685e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	0018      	movs	r0, r3
 8006864:	f7fd fb5c 	bl	8003f20 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686c:	2210      	movs	r2, #16
 800686e:	4013      	ands	r3, r2
 8006870:	2b10      	cmp	r3, #16
 8006872:	d005      	beq.n	8006880 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	2204      	movs	r2, #4
 800687c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800687e:	d00b      	beq.n	8006898 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	2210      	movs	r2, #16
 8006886:	431a      	orrs	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2250      	movs	r2, #80	; 0x50
 8006890:	2100      	movs	r1, #0
 8006892:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e132      	b.n	8006afe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800689c:	4a9a      	ldr	r2, [pc, #616]	; (8006b08 <HAL_ADC_Init+0x2d0>)
 800689e:	4013      	ands	r3, r2
 80068a0:	2202      	movs	r2, #2
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	2203      	movs	r2, #3
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d108      	bne.n	80068c8 <HAL_ADC_Init+0x90>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2201      	movs	r2, #1
 80068be:	4013      	ands	r3, r2
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_ADC_Init+0x90>
 80068c4:	2301      	movs	r3, #1
 80068c6:	e000      	b.n	80068ca <HAL_ADC_Init+0x92>
 80068c8:	2300      	movs	r3, #0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d149      	bne.n	8006962 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	23c0      	movs	r3, #192	; 0xc0
 80068d4:	061b      	lsls	r3, r3, #24
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d00b      	beq.n	80068f2 <HAL_ADC_Init+0xba>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	2380      	movs	r3, #128	; 0x80
 80068e0:	05db      	lsls	r3, r3, #23
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d005      	beq.n	80068f2 <HAL_ADC_Init+0xba>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d111      	bne.n	8006916 <HAL_ADC_Init+0xde>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	0092      	lsls	r2, r2, #2
 80068fe:	0892      	lsrs	r2, r2, #2
 8006900:	611a      	str	r2, [r3, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	6919      	ldr	r1, [r3, #16]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	611a      	str	r2, [r3, #16]
 8006914:	e014      	b.n	8006940 <HAL_ADC_Init+0x108>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691a      	ldr	r2, [r3, #16]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0092      	lsls	r2, r2, #2
 8006922:	0892      	lsrs	r2, r2, #2
 8006924:	611a      	str	r2, [r3, #16]
 8006926:	4b79      	ldr	r3, [pc, #484]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	4b78      	ldr	r3, [pc, #480]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 800692c:	4978      	ldr	r1, [pc, #480]	; (8006b10 <HAL_ADC_Init+0x2d8>)
 800692e:	400a      	ands	r2, r1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	4b76      	ldr	r3, [pc, #472]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 8006934:	6819      	ldr	r1, [r3, #0]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	4b74      	ldr	r3, [pc, #464]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 800693c:	430a      	orrs	r2, r1
 800693e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2118      	movs	r1, #24
 800694c:	438a      	bics	r2, r1
 800694e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68d9      	ldr	r1, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8006962:	4b6a      	ldr	r3, [pc, #424]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	4b69      	ldr	r3, [pc, #420]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 8006968:	496a      	ldr	r1, [pc, #424]	; (8006b14 <HAL_ADC_Init+0x2dc>)
 800696a:	400a      	ands	r2, r1
 800696c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800696e:	4b67      	ldr	r3, [pc, #412]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 8006970:	6819      	ldr	r1, [r3, #0]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006976:	065a      	lsls	r2, r3, #25
 8006978:	4b64      	ldr	r3, [pc, #400]	; (8006b0c <HAL_ADC_Init+0x2d4>)
 800697a:	430a      	orrs	r2, r1
 800697c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	2380      	movs	r3, #128	; 0x80
 8006986:	055b      	lsls	r3, r3, #21
 8006988:	4013      	ands	r3, r2
 800698a:	d108      	bne.n	800699e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	0549      	lsls	r1, r1, #21
 800699a:	430a      	orrs	r2, r1
 800699c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	495b      	ldr	r1, [pc, #364]	; (8006b18 <HAL_ADC_Init+0x2e0>)
 80069aa:	400a      	ands	r2, r1
 80069ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68d9      	ldr	r1, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d101      	bne.n	80069c4 <HAL_ADC_Init+0x18c>
 80069c0:	2304      	movs	r3, #4
 80069c2:	e000      	b.n	80069c6 <HAL_ADC_Init+0x18e>
 80069c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80069c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2020      	movs	r0, #32
 80069cc:	5c1b      	ldrb	r3, [r3, r0]
 80069ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80069d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	202c      	movs	r0, #44	; 0x2c
 80069d6:	5c1b      	ldrb	r3, [r3, r0]
 80069d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80069da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80069e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80069e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80069f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069fe:	23c2      	movs	r3, #194	; 0xc2
 8006a00:	33ff      	adds	r3, #255	; 0xff
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d00b      	beq.n	8006a1e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68d9      	ldr	r1, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2221      	movs	r2, #33	; 0x21
 8006a22:	5c9b      	ldrb	r3, [r3, r2]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d11a      	bne.n	8006a5e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	5c9b      	ldrb	r3, [r3, r2]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2180      	movs	r1, #128	; 0x80
 8006a3e:	0249      	lsls	r1, r1, #9
 8006a40:	430a      	orrs	r2, r1
 8006a42:	60da      	str	r2, [r3, #12]
 8006a44:	e00b      	b.n	8006a5e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a56:	2201      	movs	r2, #1
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d11f      	bne.n	8006aa6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	492a      	ldr	r1, [pc, #168]	; (8006b1c <HAL_ADC_Init+0x2e4>)
 8006a72:	400a      	ands	r2, r1
 8006a74:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6919      	ldr	r1, [r3, #16]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006a84:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8006a8a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691a      	ldr	r2, [r3, #16]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	430a      	orrs	r2, r1
 8006aa2:	611a      	str	r2, [r3, #16]
 8006aa4:	e00e      	b.n	8006ac4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2201      	movs	r2, #1
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d107      	bne.n	8006ac4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2101      	movs	r1, #1
 8006ac0:	438a      	bics	r2, r1
 8006ac2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695a      	ldr	r2, [r3, #20]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2107      	movs	r1, #7
 8006ad0:	438a      	bics	r2, r1
 8006ad2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6959      	ldr	r1, [r3, #20]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	2203      	movs	r2, #3
 8006af2:	4393      	bics	r3, r2
 8006af4:	2201      	movs	r2, #1
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	0018      	movs	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b002      	add	sp, #8
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	fffffefd 	.word	0xfffffefd
 8006b0c:	40012708 	.word	0x40012708
 8006b10:	ffc3ffff 	.word	0xffc3ffff
 8006b14:	fdffffff 	.word	0xfdffffff
 8006b18:	fffe0219 	.word	0xfffe0219
 8006b1c:	fffffc03 	.word	0xfffffc03

08006b20 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b28:	230f      	movs	r3, #15
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	2204      	movs	r2, #4
 8006b38:	4013      	ands	r3, r2
 8006b3a:	d138      	bne.n	8006bae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2250      	movs	r2, #80	; 0x50
 8006b40:	5c9b      	ldrb	r3, [r3, r2]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <HAL_ADC_Start+0x2a>
 8006b46:	2302      	movs	r3, #2
 8006b48:	e038      	b.n	8006bbc <HAL_ADC_Start+0x9c>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2250      	movs	r2, #80	; 0x50
 8006b4e:	2101      	movs	r1, #1
 8006b50:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d007      	beq.n	8006b6a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006b5a:	230f      	movs	r3, #15
 8006b5c:	18fc      	adds	r4, r7, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	0018      	movs	r0, r3
 8006b62:	f000 f95f 	bl	8006e24 <ADC_Enable>
 8006b66:	0003      	movs	r3, r0
 8006b68:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006b6a:	230f      	movs	r3, #15
 8006b6c:	18fb      	adds	r3, r7, r3
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d120      	bne.n	8006bb6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	4a12      	ldr	r2, [pc, #72]	; (8006bc4 <HAL_ADC_Start+0xa4>)
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	0052      	lsls	r2, r2, #1
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2250      	movs	r2, #80	; 0x50
 8006b90:	2100      	movs	r1, #0
 8006b92:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	221c      	movs	r2, #28
 8006b9a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2104      	movs	r1, #4
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	609a      	str	r2, [r3, #8]
 8006bac:	e003      	b.n	8006bb6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006bae:	230f      	movs	r3, #15
 8006bb0:	18fb      	adds	r3, r7, r3
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006bb6:	230f      	movs	r3, #15
 8006bb8:	18fb      	adds	r3, r7, r3
 8006bba:	781b      	ldrb	r3, [r3, #0]
}
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	b005      	add	sp, #20
 8006bc2:	bd90      	pop	{r4, r7, pc}
 8006bc4:	fffff0fe 	.word	0xfffff0fe

08006bc8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d102      	bne.n	8006be8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006be2:	2308      	movs	r3, #8
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e014      	b.n	8006c12 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d10b      	bne.n	8006c0e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2250      	movs	r2, #80	; 0x50
 8006c06:	2100      	movs	r1, #0
 8006c08:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e072      	b.n	8006cf4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8006c0e:	230c      	movs	r3, #12
 8006c10:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8006c12:	f7ff fde3 	bl	80067dc <HAL_GetTick>
 8006c16:	0003      	movs	r3, r0
 8006c18:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006c1a:	e01f      	b.n	8006c5c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	d01c      	beq.n	8006c5c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <HAL_ADC_PollForConversion+0x70>
 8006c28:	f7ff fdd8 	bl	80067dc <HAL_GetTick>
 8006c2c:	0002      	movs	r2, r0
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d211      	bcs.n	8006c5c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4013      	ands	r3, r2
 8006c42:	d10b      	bne.n	8006c5c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c48:	2204      	movs	r2, #4
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2250      	movs	r2, #80	; 0x50
 8006c54:	2100      	movs	r1, #0
 8006c56:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e04b      	b.n	8006cf4 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	4013      	ands	r3, r2
 8006c66:	d0d9      	beq.n	8006c1c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6c:	2280      	movs	r2, #128	; 0x80
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68da      	ldr	r2, [r3, #12]
 8006c7c:	23c0      	movs	r3, #192	; 0xc0
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	4013      	ands	r3, r2
 8006c82:	d12e      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d129      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2208      	movs	r2, #8
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d122      	bne.n	8006ce2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2204      	movs	r2, #4
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	d110      	bne.n	8006cca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685a      	ldr	r2, [r3, #4]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	210c      	movs	r1, #12
 8006cb4:	438a      	bics	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbc:	4a0f      	ldr	r2, [pc, #60]	; (8006cfc <HAL_ADC_PollForConversion+0x134>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	655a      	str	r2, [r3, #84]	; 0x54
 8006cc8:	e00b      	b.n	8006ce2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cce:	2220      	movs	r2, #32
 8006cd0:	431a      	orrs	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cda:	2201      	movs	r2, #1
 8006cdc:	431a      	orrs	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	220c      	movs	r2, #12
 8006cf0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	b004      	add	sp, #16
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	fffffefe 	.word	0xfffffefe

08006d00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006d0e:	0018      	movs	r0, r3
 8006d10:	46bd      	mov	sp, r7
 8006d12:	b002      	add	sp, #8
 8006d14:	bd80      	pop	{r7, pc}
	...

08006d18 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2250      	movs	r2, #80	; 0x50
 8006d26:	5c9b      	ldrb	r3, [r3, r2]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_ADC_ConfigChannel+0x18>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e06c      	b.n	8006e0a <HAL_ADC_ConfigChannel+0xf2>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2250      	movs	r2, #80	; 0x50
 8006d34:	2101      	movs	r1, #1
 8006d36:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	2204      	movs	r2, #4
 8006d40:	4013      	ands	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	2220      	movs	r2, #32
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2250      	movs	r2, #80	; 0x50
 8006d54:	2100      	movs	r1, #0
 8006d56:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e056      	b.n	8006e0a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <HAL_ADC_ConfigChannel+0xfc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d028      	beq.n	8006db8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	035b      	lsls	r3, r3, #13
 8006d72:	0b5a      	lsrs	r2, r3, #13
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	02db      	lsls	r3, r3, #11
 8006d84:	4013      	ands	r3, r2
 8006d86:	d009      	beq.n	8006d9c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8006d88:	4b23      	ldr	r3, [pc, #140]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006d8e:	2180      	movs	r1, #128	; 0x80
 8006d90:	0409      	lsls	r1, r1, #16
 8006d92:	430a      	orrs	r2, r1
 8006d94:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006d96:	200a      	movs	r0, #10
 8006d98:	f000 f8ac 	bl	8006ef4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	4013      	ands	r3, r2
 8006da6:	d02b      	beq.n	8006e00 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8006da8:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006dae:	2180      	movs	r1, #128	; 0x80
 8006db0:	03c9      	lsls	r1, r1, #15
 8006db2:	430a      	orrs	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e023      	b.n	8006e00 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	035b      	lsls	r3, r3, #13
 8006dc4:	0b5b      	lsrs	r3, r3, #13
 8006dc6:	43d9      	mvns	r1, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	400a      	ands	r2, r1
 8006dce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	2380      	movs	r3, #128	; 0x80
 8006dd6:	02db      	lsls	r3, r3, #11
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d005      	beq.n	8006de8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006de2:	490e      	ldr	r1, [pc, #56]	; (8006e1c <HAL_ADC_ConfigChannel+0x104>)
 8006de4:	400a      	ands	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	2380      	movs	r3, #128	; 0x80
 8006dee:	029b      	lsls	r3, r3, #10
 8006df0:	4013      	ands	r3, r2
 8006df2:	d005      	beq.n	8006e00 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	4b07      	ldr	r3, [pc, #28]	; (8006e18 <HAL_ADC_ConfigChannel+0x100>)
 8006dfa:	4909      	ldr	r1, [pc, #36]	; (8006e20 <HAL_ADC_ConfigChannel+0x108>)
 8006dfc:	400a      	ands	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2250      	movs	r2, #80	; 0x50
 8006e04:	2100      	movs	r1, #0
 8006e06:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	b002      	add	sp, #8
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	46c0      	nop			; (mov r8, r8)
 8006e14:	00001001 	.word	0x00001001
 8006e18:	40012708 	.word	0x40012708
 8006e1c:	ff7fffff 	.word	0xff7fffff
 8006e20:	ffbfffff 	.word	0xffbfffff

08006e24 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2203      	movs	r2, #3
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d108      	bne.n	8006e50 <ADC_Enable+0x2c>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2201      	movs	r2, #1
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <ADC_Enable+0x2c>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <ADC_Enable+0x2e>
 8006e50:	2300      	movs	r3, #0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d146      	bne.n	8006ee4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	4a24      	ldr	r2, [pc, #144]	; (8006ef0 <ADC_Enable+0xcc>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	d00d      	beq.n	8006e7e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e66:	2210      	movs	r2, #16
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e72:	2201      	movs	r2, #1
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e033      	b.n	8006ee6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2101      	movs	r1, #1
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f000 f830 	bl	8006ef4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006e94:	f7ff fca2 	bl	80067dc <HAL_GetTick>
 8006e98:	0003      	movs	r3, r0
 8006e9a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006e9c:	e01b      	b.n	8006ed6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006e9e:	f7ff fc9d 	bl	80067dc <HAL_GetTick>
 8006ea2:	0002      	movs	r2, r0
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	1ad3      	subs	r3, r2, r3
 8006ea8:	2b0a      	cmp	r3, #10
 8006eaa:	d914      	bls.n	8006ed6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d00d      	beq.n	8006ed6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ebe:	2210      	movs	r2, #16
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eca:	2201      	movs	r2, #1
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e007      	b.n	8006ee6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2201      	movs	r2, #1
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d1dc      	bne.n	8006e9e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	b004      	add	sp, #16
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	80000017 	.word	0x80000017

08006ef4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8006efc:	4b0b      	ldr	r3, [pc, #44]	; (8006f2c <ADC_DelayMicroSecond+0x38>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	490b      	ldr	r1, [pc, #44]	; (8006f30 <ADC_DelayMicroSecond+0x3c>)
 8006f02:	0018      	movs	r0, r3
 8006f04:	f7f9 f90a 	bl	800011c <__udivsi3>
 8006f08:	0003      	movs	r3, r0
 8006f0a:	001a      	movs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4353      	muls	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8006f12:	e002      	b.n	8006f1a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	3b01      	subs	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1f9      	bne.n	8006f14 <ADC_DelayMicroSecond+0x20>
  } 
}
 8006f20:	46c0      	nop			; (mov r8, r8)
 8006f22:	46c0      	nop			; (mov r8, r8)
 8006f24:	46bd      	mov	sp, r7
 8006f26:	b004      	add	sp, #16
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	20000010 	.word	0x20000010
 8006f30:	000f4240 	.word	0x000f4240

08006f34 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f3e:	2317      	movs	r3, #23
 8006f40:	18fb      	adds	r3, r7, r3
 8006f42:	2200      	movs	r2, #0
 8006f44:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8006f46:	2300      	movs	r3, #0
 8006f48:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2250      	movs	r2, #80	; 0x50
 8006f52:	5c9b      	ldrb	r3, [r3, r2]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d101      	bne.n	8006f5c <HAL_ADCEx_Calibration_Start+0x28>
 8006f58:	2302      	movs	r3, #2
 8006f5a:	e083      	b.n	8007064 <HAL_ADCEx_Calibration_Start+0x130>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2250      	movs	r2, #80	; 0x50
 8006f60:	2101      	movs	r1, #1
 8006f62:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d108      	bne.n	8006f84 <HAL_ADCEx_Calibration_Start+0x50>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_ADCEx_Calibration_Start+0x50>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <HAL_ADCEx_Calibration_Start+0x52>
 8006f84:	2300      	movs	r3, #0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d15b      	bne.n	8007042 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8e:	4a37      	ldr	r2, [pc, #220]	; (800706c <HAL_ADCEx_Calibration_Start+0x138>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	2202      	movs	r2, #2
 8006f94:	431a      	orrs	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68da      	ldr	r2, [r3, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2103      	movs	r1, #3
 8006fb2:	438a      	bics	r2, r1
 8006fb4:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2180      	movs	r1, #128	; 0x80
 8006fc2:	0609      	lsls	r1, r1, #24
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8006fc8:	f7ff fc08 	bl	80067dc <HAL_GetTick>
 8006fcc:	0003      	movs	r3, r0
 8006fce:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006fd0:	e01d      	b.n	800700e <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8006fd2:	f7ff fc03 	bl	80067dc <HAL_GetTick>
 8006fd6:	0002      	movs	r2, r0
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b0a      	cmp	r3, #10
 8006fde:	d916      	bls.n	800700e <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	0fdb      	lsrs	r3, r3, #31
 8006fe8:	07da      	lsls	r2, r3, #31
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	061b      	lsls	r3, r3, #24
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d10d      	bne.n	800700e <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	2212      	movs	r2, #18
 8006ff8:	4393      	bics	r3, r2
 8006ffa:	2210      	movs	r2, #16
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2250      	movs	r2, #80	; 0x50
 8007006:	2100      	movs	r1, #0
 8007008:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e02a      	b.n	8007064 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	0fdb      	lsrs	r3, r3, #31
 8007016:	07da      	lsls	r2, r3, #31
 8007018:	2380      	movs	r3, #128	; 0x80
 800701a:	061b      	lsls	r3, r3, #24
 800701c:	429a      	cmp	r2, r3
 800701e:	d0d8      	beq.n	8006fd2 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68d9      	ldr	r1, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	430a      	orrs	r2, r1
 800702e:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007034:	2203      	movs	r2, #3
 8007036:	4393      	bics	r3, r2
 8007038:	2201      	movs	r2, #1
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	655a      	str	r2, [r3, #84]	; 0x54
 8007040:	e009      	b.n	8007056 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007046:	2220      	movs	r2, #32
 8007048:	431a      	orrs	r2, r3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 800704e:	2317      	movs	r3, #23
 8007050:	18fb      	adds	r3, r7, r3
 8007052:	2201      	movs	r2, #1
 8007054:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2250      	movs	r2, #80	; 0x50
 800705a:	2100      	movs	r1, #0
 800705c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800705e:	2317      	movs	r3, #23
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	781b      	ldrb	r3, [r3, #0]
}
 8007064:	0018      	movs	r0, r3
 8007066:	46bd      	mov	sp, r7
 8007068:	b006      	add	sp, #24
 800706a:	bd80      	pop	{r7, pc}
 800706c:	fffffefd 	.word	0xfffffefd

08007070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	0002      	movs	r2, r0
 8007078:	1dfb      	adds	r3, r7, #7
 800707a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800707c:	1dfb      	adds	r3, r7, #7
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b7f      	cmp	r3, #127	; 0x7f
 8007082:	d809      	bhi.n	8007098 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007084:	1dfb      	adds	r3, r7, #7
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	001a      	movs	r2, r3
 800708a:	231f      	movs	r3, #31
 800708c:	401a      	ands	r2, r3
 800708e:	4b04      	ldr	r3, [pc, #16]	; (80070a0 <__NVIC_EnableIRQ+0x30>)
 8007090:	2101      	movs	r1, #1
 8007092:	4091      	lsls	r1, r2
 8007094:	000a      	movs	r2, r1
 8007096:	601a      	str	r2, [r3, #0]
  }
}
 8007098:	46c0      	nop			; (mov r8, r8)
 800709a:	46bd      	mov	sp, r7
 800709c:	b002      	add	sp, #8
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	e000e100 	.word	0xe000e100

080070a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070a4:	b590      	push	{r4, r7, lr}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	0002      	movs	r2, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	1dfb      	adds	r3, r7, #7
 80070b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80070b2:	1dfb      	adds	r3, r7, #7
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b7f      	cmp	r3, #127	; 0x7f
 80070b8:	d828      	bhi.n	800710c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070ba:	4a2f      	ldr	r2, [pc, #188]	; (8007178 <__NVIC_SetPriority+0xd4>)
 80070bc:	1dfb      	adds	r3, r7, #7
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	b25b      	sxtb	r3, r3
 80070c2:	089b      	lsrs	r3, r3, #2
 80070c4:	33c0      	adds	r3, #192	; 0xc0
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	589b      	ldr	r3, [r3, r2]
 80070ca:	1dfa      	adds	r2, r7, #7
 80070cc:	7812      	ldrb	r2, [r2, #0]
 80070ce:	0011      	movs	r1, r2
 80070d0:	2203      	movs	r2, #3
 80070d2:	400a      	ands	r2, r1
 80070d4:	00d2      	lsls	r2, r2, #3
 80070d6:	21ff      	movs	r1, #255	; 0xff
 80070d8:	4091      	lsls	r1, r2
 80070da:	000a      	movs	r2, r1
 80070dc:	43d2      	mvns	r2, r2
 80070de:	401a      	ands	r2, r3
 80070e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	019b      	lsls	r3, r3, #6
 80070e6:	22ff      	movs	r2, #255	; 0xff
 80070e8:	401a      	ands	r2, r3
 80070ea:	1dfb      	adds	r3, r7, #7
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	0018      	movs	r0, r3
 80070f0:	2303      	movs	r3, #3
 80070f2:	4003      	ands	r3, r0
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070f8:	481f      	ldr	r0, [pc, #124]	; (8007178 <__NVIC_SetPriority+0xd4>)
 80070fa:	1dfb      	adds	r3, r7, #7
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	b25b      	sxtb	r3, r3
 8007100:	089b      	lsrs	r3, r3, #2
 8007102:	430a      	orrs	r2, r1
 8007104:	33c0      	adds	r3, #192	; 0xc0
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800710a:	e031      	b.n	8007170 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800710c:	4a1b      	ldr	r2, [pc, #108]	; (800717c <__NVIC_SetPriority+0xd8>)
 800710e:	1dfb      	adds	r3, r7, #7
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	0019      	movs	r1, r3
 8007114:	230f      	movs	r3, #15
 8007116:	400b      	ands	r3, r1
 8007118:	3b08      	subs	r3, #8
 800711a:	089b      	lsrs	r3, r3, #2
 800711c:	3306      	adds	r3, #6
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	18d3      	adds	r3, r2, r3
 8007122:	3304      	adds	r3, #4
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	1dfa      	adds	r2, r7, #7
 8007128:	7812      	ldrb	r2, [r2, #0]
 800712a:	0011      	movs	r1, r2
 800712c:	2203      	movs	r2, #3
 800712e:	400a      	ands	r2, r1
 8007130:	00d2      	lsls	r2, r2, #3
 8007132:	21ff      	movs	r1, #255	; 0xff
 8007134:	4091      	lsls	r1, r2
 8007136:	000a      	movs	r2, r1
 8007138:	43d2      	mvns	r2, r2
 800713a:	401a      	ands	r2, r3
 800713c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	019b      	lsls	r3, r3, #6
 8007142:	22ff      	movs	r2, #255	; 0xff
 8007144:	401a      	ands	r2, r3
 8007146:	1dfb      	adds	r3, r7, #7
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	0018      	movs	r0, r3
 800714c:	2303      	movs	r3, #3
 800714e:	4003      	ands	r3, r0
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007154:	4809      	ldr	r0, [pc, #36]	; (800717c <__NVIC_SetPriority+0xd8>)
 8007156:	1dfb      	adds	r3, r7, #7
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	001c      	movs	r4, r3
 800715c:	230f      	movs	r3, #15
 800715e:	4023      	ands	r3, r4
 8007160:	3b08      	subs	r3, #8
 8007162:	089b      	lsrs	r3, r3, #2
 8007164:	430a      	orrs	r2, r1
 8007166:	3306      	adds	r3, #6
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	18c3      	adds	r3, r0, r3
 800716c:	3304      	adds	r3, #4
 800716e:	601a      	str	r2, [r3, #0]
}
 8007170:	46c0      	nop			; (mov r8, r8)
 8007172:	46bd      	mov	sp, r7
 8007174:	b003      	add	sp, #12
 8007176:	bd90      	pop	{r4, r7, pc}
 8007178:	e000e100 	.word	0xe000e100
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	1e5a      	subs	r2, r3, #1
 800718c:	2380      	movs	r3, #128	; 0x80
 800718e:	045b      	lsls	r3, r3, #17
 8007190:	429a      	cmp	r2, r3
 8007192:	d301      	bcc.n	8007198 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007194:	2301      	movs	r3, #1
 8007196:	e010      	b.n	80071ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <SysTick_Config+0x44>)
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	3a01      	subs	r2, #1
 800719e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071a0:	2301      	movs	r3, #1
 80071a2:	425b      	negs	r3, r3
 80071a4:	2103      	movs	r1, #3
 80071a6:	0018      	movs	r0, r3
 80071a8:	f7ff ff7c 	bl	80070a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <SysTick_Config+0x44>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071b2:	4b04      	ldr	r3, [pc, #16]	; (80071c4 <SysTick_Config+0x44>)
 80071b4:	2207      	movs	r2, #7
 80071b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	0018      	movs	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	b002      	add	sp, #8
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	46c0      	nop			; (mov r8, r8)
 80071c4:	e000e010 	.word	0xe000e010

080071c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
 80071d2:	210f      	movs	r1, #15
 80071d4:	187b      	adds	r3, r7, r1
 80071d6:	1c02      	adds	r2, r0, #0
 80071d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	b25b      	sxtb	r3, r3
 80071e2:	0011      	movs	r1, r2
 80071e4:	0018      	movs	r0, r3
 80071e6:	f7ff ff5d 	bl	80070a4 <__NVIC_SetPriority>
}
 80071ea:	46c0      	nop			; (mov r8, r8)
 80071ec:	46bd      	mov	sp, r7
 80071ee:	b004      	add	sp, #16
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b082      	sub	sp, #8
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	0002      	movs	r2, r0
 80071fa:	1dfb      	adds	r3, r7, #7
 80071fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80071fe:	1dfb      	adds	r3, r7, #7
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b25b      	sxtb	r3, r3
 8007204:	0018      	movs	r0, r3
 8007206:	f7ff ff33 	bl	8007070 <__NVIC_EnableIRQ>
}
 800720a:	46c0      	nop			; (mov r8, r8)
 800720c:	46bd      	mov	sp, r7
 800720e:	b002      	add	sp, #8
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	0018      	movs	r0, r3
 800721e:	f7ff ffaf 	bl	8007180 <SysTick_Config>
 8007222:	0003      	movs	r3, r0
}
 8007224:	0018      	movs	r0, r3
 8007226:	46bd      	mov	sp, r7
 8007228:	b002      	add	sp, #8
 800722a:	bd80      	pop	{r7, pc}

0800722c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	e061      	b.n	8007302 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a32      	ldr	r2, [pc, #200]	; (800730c <HAL_DMA_Init+0xe0>)
 8007244:	4694      	mov	ip, r2
 8007246:	4463      	add	r3, ip
 8007248:	2114      	movs	r1, #20
 800724a:	0018      	movs	r0, r3
 800724c:	f7f8 ff66 	bl	800011c <__udivsi3>
 8007250:	0003      	movs	r3, r0
 8007252:	009a      	lsls	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a2d      	ldr	r2, [pc, #180]	; (8007310 <HAL_DMA_Init+0xe4>)
 800725c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2225      	movs	r2, #37	; 0x25
 8007262:	2102      	movs	r1, #2
 8007264:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	4a28      	ldr	r2, [pc, #160]	; (8007314 <HAL_DMA_Init+0xe8>)
 8007272:	4013      	ands	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800727e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800728a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007296:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1b      	ldr	r3, [r3, #32]
 800729c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689a      	ldr	r2, [r3, #8]
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	01db      	lsls	r3, r3, #7
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d018      	beq.n	80072ea <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80072b8:	4b17      	ldr	r3, [pc, #92]	; (8007318 <HAL_DMA_Init+0xec>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c0:	211c      	movs	r1, #28
 80072c2:	400b      	ands	r3, r1
 80072c4:	210f      	movs	r1, #15
 80072c6:	4099      	lsls	r1, r3
 80072c8:	000b      	movs	r3, r1
 80072ca:	43d9      	mvns	r1, r3
 80072cc:	4b12      	ldr	r3, [pc, #72]	; (8007318 <HAL_DMA_Init+0xec>)
 80072ce:	400a      	ands	r2, r1
 80072d0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <HAL_DMA_Init+0xec>)
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072de:	201c      	movs	r0, #28
 80072e0:	4003      	ands	r3, r0
 80072e2:	409a      	lsls	r2, r3
 80072e4:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_DMA_Init+0xec>)
 80072e6:	430a      	orrs	r2, r1
 80072e8:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2225      	movs	r2, #37	; 0x25
 80072f4:	2101      	movs	r1, #1
 80072f6:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2224      	movs	r2, #36	; 0x24
 80072fc:	2100      	movs	r1, #0
 80072fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	0018      	movs	r0, r3
 8007304:	46bd      	mov	sp, r7
 8007306:	b004      	add	sp, #16
 8007308:	bd80      	pop	{r7, pc}
 800730a:	46c0      	nop			; (mov r8, r8)
 800730c:	bffdfff8 	.word	0xbffdfff8
 8007310:	40020000 	.word	0x40020000
 8007314:	ffff800f 	.word	0xffff800f
 8007318:	400200a8 	.word	0x400200a8

0800731c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800732a:	2317      	movs	r3, #23
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	2200      	movs	r2, #0
 8007330:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2224      	movs	r2, #36	; 0x24
 8007336:	5c9b      	ldrb	r3, [r3, r2]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_DMA_Start_IT+0x24>
 800733c:	2302      	movs	r3, #2
 800733e:	e04f      	b.n	80073e0 <HAL_DMA_Start_IT+0xc4>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2224      	movs	r2, #36	; 0x24
 8007344:	2101      	movs	r1, #1
 8007346:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2225      	movs	r2, #37	; 0x25
 800734c:	5c9b      	ldrb	r3, [r3, r2]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d13a      	bne.n	80073ca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2225      	movs	r2, #37	; 0x25
 8007358:	2102      	movs	r1, #2
 800735a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2101      	movs	r1, #1
 800736e:	438a      	bics	r2, r1
 8007370:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f8ef 	bl	800755c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	2b00      	cmp	r3, #0
 8007384:	d008      	beq.n	8007398 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	210e      	movs	r1, #14
 8007392:	430a      	orrs	r2, r1
 8007394:	601a      	str	r2, [r3, #0]
 8007396:	e00f      	b.n	80073b8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2104      	movs	r1, #4
 80073a4:	438a      	bics	r2, r1
 80073a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	210a      	movs	r1, #10
 80073b4:	430a      	orrs	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	2101      	movs	r1, #1
 80073c4:	430a      	orrs	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
 80073c8:	e007      	b.n	80073da <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2224      	movs	r2, #36	; 0x24
 80073ce:	2100      	movs	r1, #0
 80073d0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80073d2:	2317      	movs	r3, #23
 80073d4:	18fb      	adds	r3, r7, r3
 80073d6:	2202      	movs	r2, #2
 80073d8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80073da:	2317      	movs	r3, #23
 80073dc:	18fb      	adds	r3, r7, r3
 80073de:	781b      	ldrb	r3, [r3, #0]
}
 80073e0:	0018      	movs	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b006      	add	sp, #24
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007404:	221c      	movs	r2, #28
 8007406:	4013      	ands	r3, r2
 8007408:	2204      	movs	r2, #4
 800740a:	409a      	lsls	r2, r3
 800740c:	0013      	movs	r3, r2
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4013      	ands	r3, r2
 8007412:	d026      	beq.n	8007462 <HAL_DMA_IRQHandler+0x7a>
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2204      	movs	r2, #4
 8007418:	4013      	ands	r3, r2
 800741a:	d022      	beq.n	8007462 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2220      	movs	r2, #32
 8007424:	4013      	ands	r3, r2
 8007426:	d107      	bne.n	8007438 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2104      	movs	r1, #4
 8007434:	438a      	bics	r2, r1
 8007436:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800743c:	221c      	movs	r2, #28
 800743e:	401a      	ands	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007444:	2104      	movs	r1, #4
 8007446:	4091      	lsls	r1, r2
 8007448:	000a      	movs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007450:	2b00      	cmp	r3, #0
 8007452:	d100      	bne.n	8007456 <HAL_DMA_IRQHandler+0x6e>
 8007454:	e071      	b.n	800753a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	0010      	movs	r0, r2
 800745e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8007460:	e06b      	b.n	800753a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007466:	221c      	movs	r2, #28
 8007468:	4013      	ands	r3, r2
 800746a:	2202      	movs	r2, #2
 800746c:	409a      	lsls	r2, r3
 800746e:	0013      	movs	r3, r2
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4013      	ands	r3, r2
 8007474:	d02d      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xea>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2202      	movs	r2, #2
 800747a:	4013      	ands	r3, r2
 800747c:	d029      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2220      	movs	r2, #32
 8007486:	4013      	ands	r3, r2
 8007488:	d10b      	bne.n	80074a2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	210a      	movs	r1, #10
 8007496:	438a      	bics	r2, r1
 8007498:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2225      	movs	r2, #37	; 0x25
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	221c      	movs	r2, #28
 80074a8:	401a      	ands	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	2102      	movs	r1, #2
 80074b0:	4091      	lsls	r1, r2
 80074b2:	000a      	movs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2224      	movs	r2, #36	; 0x24
 80074ba:	2100      	movs	r1, #0
 80074bc:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d039      	beq.n	800753a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	0010      	movs	r0, r2
 80074ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80074d0:	e033      	b.n	800753a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d6:	221c      	movs	r2, #28
 80074d8:	4013      	ands	r3, r2
 80074da:	2208      	movs	r2, #8
 80074dc:	409a      	lsls	r2, r3
 80074de:	0013      	movs	r3, r2
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	4013      	ands	r3, r2
 80074e4:	d02a      	beq.n	800753c <HAL_DMA_IRQHandler+0x154>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	2208      	movs	r2, #8
 80074ea:	4013      	ands	r3, r2
 80074ec:	d026      	beq.n	800753c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	210e      	movs	r1, #14
 80074fa:	438a      	bics	r2, r1
 80074fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007502:	221c      	movs	r2, #28
 8007504:	401a      	ands	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	2101      	movs	r1, #1
 800750c:	4091      	lsls	r1, r2
 800750e:	000a      	movs	r2, r1
 8007510:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2225      	movs	r2, #37	; 0x25
 800751c:	2101      	movs	r1, #1
 800751e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2224      	movs	r2, #36	; 0x24
 8007524:	2100      	movs	r1, #0
 8007526:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	0010      	movs	r0, r2
 8007538:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	46c0      	nop			; (mov r8, r8)
}
 800753e:	46bd      	mov	sp, r7
 8007540:	b004      	add	sp, #16
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2225      	movs	r2, #37	; 0x25
 8007550:	5c9b      	ldrb	r3, [r3, r2]
 8007552:	b2db      	uxtb	r3, r3
}
 8007554:	0018      	movs	r0, r3
 8007556:	46bd      	mov	sp, r7
 8007558:	b002      	add	sp, #8
 800755a:	bd80      	pop	{r7, pc}

0800755c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
 8007568:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756e:	221c      	movs	r2, #28
 8007570:	401a      	ands	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	2101      	movs	r1, #1
 8007578:	4091      	lsls	r1, r2
 800757a:	000a      	movs	r2, r1
 800757c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	2b10      	cmp	r3, #16
 800758c:	d108      	bne.n	80075a0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800759e:	e007      	b.n	80075b0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
}
 80075b0:	46c0      	nop			; (mov r8, r8)
 80075b2:	46bd      	mov	sp, r7
 80075b4:	b004      	add	sp, #16
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80075ce:	e14f      	b.n	8007870 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2101      	movs	r1, #1
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4091      	lsls	r1, r2
 80075da:	000a      	movs	r2, r1
 80075dc:	4013      	ands	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d100      	bne.n	80075e8 <HAL_GPIO_Init+0x30>
 80075e6:	e140      	b.n	800786a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2203      	movs	r2, #3
 80075ee:	4013      	ands	r3, r2
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d005      	beq.n	8007600 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2203      	movs	r2, #3
 80075fa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d130      	bne.n	8007662 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	2203      	movs	r2, #3
 800760c:	409a      	lsls	r2, r3
 800760e:	0013      	movs	r3, r2
 8007610:	43da      	mvns	r2, r3
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	4013      	ands	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	409a      	lsls	r2, r3
 8007622:	0013      	movs	r3, r2
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007636:	2201      	movs	r2, #1
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	409a      	lsls	r2, r3
 800763c:	0013      	movs	r3, r2
 800763e:	43da      	mvns	r2, r3
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	4013      	ands	r3, r2
 8007644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	091b      	lsrs	r3, r3, #4
 800764c:	2201      	movs	r2, #1
 800764e:	401a      	ands	r2, r3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	409a      	lsls	r2, r3
 8007654:	0013      	movs	r3, r2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2203      	movs	r2, #3
 8007668:	4013      	ands	r3, r2
 800766a:	2b03      	cmp	r3, #3
 800766c:	d017      	beq.n	800769e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	2203      	movs	r2, #3
 800767a:	409a      	lsls	r2, r3
 800767c:	0013      	movs	r3, r2
 800767e:	43da      	mvns	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4013      	ands	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	409a      	lsls	r2, r3
 8007690:	0013      	movs	r3, r2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2203      	movs	r2, #3
 80076a4:	4013      	ands	r3, r2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d123      	bne.n	80076f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	08da      	lsrs	r2, r3, #3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3208      	adds	r2, #8
 80076b2:	0092      	lsls	r2, r2, #2
 80076b4:	58d3      	ldr	r3, [r2, r3]
 80076b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2207      	movs	r2, #7
 80076bc:	4013      	ands	r3, r2
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	220f      	movs	r2, #15
 80076c2:	409a      	lsls	r2, r3
 80076c4:	0013      	movs	r3, r2
 80076c6:	43da      	mvns	r2, r3
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	4013      	ands	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	691a      	ldr	r2, [r3, #16]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2107      	movs	r1, #7
 80076d6:	400b      	ands	r3, r1
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	409a      	lsls	r2, r3
 80076dc:	0013      	movs	r3, r2
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	08da      	lsrs	r2, r3, #3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3208      	adds	r2, #8
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	6939      	ldr	r1, [r7, #16]
 80076f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	2203      	movs	r2, #3
 80076fe:	409a      	lsls	r2, r3
 8007700:	0013      	movs	r3, r2
 8007702:	43da      	mvns	r2, r3
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4013      	ands	r3, r2
 8007708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685b      	ldr	r3, [r3, #4]
 800770e:	2203      	movs	r2, #3
 8007710:	401a      	ands	r2, r3
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	005b      	lsls	r3, r3, #1
 8007716:	409a      	lsls	r2, r3
 8007718:	0013      	movs	r3, r2
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	4313      	orrs	r3, r2
 800771e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	23c0      	movs	r3, #192	; 0xc0
 800772c:	029b      	lsls	r3, r3, #10
 800772e:	4013      	ands	r3, r2
 8007730:	d100      	bne.n	8007734 <HAL_GPIO_Init+0x17c>
 8007732:	e09a      	b.n	800786a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007734:	4b54      	ldr	r3, [pc, #336]	; (8007888 <HAL_GPIO_Init+0x2d0>)
 8007736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007738:	4b53      	ldr	r3, [pc, #332]	; (8007888 <HAL_GPIO_Init+0x2d0>)
 800773a:	2101      	movs	r1, #1
 800773c:	430a      	orrs	r2, r1
 800773e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8007740:	4a52      	ldr	r2, [pc, #328]	; (800788c <HAL_GPIO_Init+0x2d4>)
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	089b      	lsrs	r3, r3, #2
 8007746:	3302      	adds	r3, #2
 8007748:	009b      	lsls	r3, r3, #2
 800774a:	589b      	ldr	r3, [r3, r2]
 800774c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2203      	movs	r2, #3
 8007752:	4013      	ands	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	220f      	movs	r2, #15
 8007758:	409a      	lsls	r2, r3
 800775a:	0013      	movs	r3, r2
 800775c:	43da      	mvns	r2, r3
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	4013      	ands	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	23a0      	movs	r3, #160	; 0xa0
 8007768:	05db      	lsls	r3, r3, #23
 800776a:	429a      	cmp	r2, r3
 800776c:	d019      	beq.n	80077a2 <HAL_GPIO_Init+0x1ea>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a47      	ldr	r2, [pc, #284]	; (8007890 <HAL_GPIO_Init+0x2d8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d013      	beq.n	800779e <HAL_GPIO_Init+0x1e6>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a46      	ldr	r2, [pc, #280]	; (8007894 <HAL_GPIO_Init+0x2dc>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d00d      	beq.n	800779a <HAL_GPIO_Init+0x1e2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a45      	ldr	r2, [pc, #276]	; (8007898 <HAL_GPIO_Init+0x2e0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d007      	beq.n	8007796 <HAL_GPIO_Init+0x1de>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a44      	ldr	r2, [pc, #272]	; (800789c <HAL_GPIO_Init+0x2e4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d101      	bne.n	8007792 <HAL_GPIO_Init+0x1da>
 800778e:	2305      	movs	r3, #5
 8007790:	e008      	b.n	80077a4 <HAL_GPIO_Init+0x1ec>
 8007792:	2306      	movs	r3, #6
 8007794:	e006      	b.n	80077a4 <HAL_GPIO_Init+0x1ec>
 8007796:	2303      	movs	r3, #3
 8007798:	e004      	b.n	80077a4 <HAL_GPIO_Init+0x1ec>
 800779a:	2302      	movs	r3, #2
 800779c:	e002      	b.n	80077a4 <HAL_GPIO_Init+0x1ec>
 800779e:	2301      	movs	r3, #1
 80077a0:	e000      	b.n	80077a4 <HAL_GPIO_Init+0x1ec>
 80077a2:	2300      	movs	r3, #0
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	2103      	movs	r1, #3
 80077a8:	400a      	ands	r2, r1
 80077aa:	0092      	lsls	r2, r2, #2
 80077ac:	4093      	lsls	r3, r2
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077b4:	4935      	ldr	r1, [pc, #212]	; (800788c <HAL_GPIO_Init+0x2d4>)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	089b      	lsrs	r3, r3, #2
 80077ba:	3302      	adds	r3, #2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077c2:	4b37      	ldr	r3, [pc, #220]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	43da      	mvns	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4013      	ands	r3, r2
 80077d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	2380      	movs	r3, #128	; 0x80
 80077d8:	025b      	lsls	r3, r3, #9
 80077da:	4013      	ands	r3, r2
 80077dc:	d003      	beq.n	80077e6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80077e6:	4b2e      	ldr	r3, [pc, #184]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80077ec:	4b2c      	ldr	r3, [pc, #176]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	43da      	mvns	r2, r3
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	4013      	ands	r3, r2
 80077fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	2380      	movs	r3, #128	; 0x80
 8007802:	029b      	lsls	r3, r3, #10
 8007804:	4013      	ands	r3, r2
 8007806:	d003      	beq.n	8007810 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007816:	4b22      	ldr	r3, [pc, #136]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	43da      	mvns	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4013      	ands	r3, r2
 8007824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	2380      	movs	r3, #128	; 0x80
 800782c:	035b      	lsls	r3, r3, #13
 800782e:	4013      	ands	r3, r2
 8007830:	d003      	beq.n	800783a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	43da      	mvns	r2, r3
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	4013      	ands	r3, r2
 800784e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	039b      	lsls	r3, r3, #14
 8007858:	4013      	ands	r3, r2
 800785a:	d003      	beq.n	8007864 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800785c:	693a      	ldr	r2, [r7, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8007864:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <HAL_GPIO_Init+0x2e8>)
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	3301      	adds	r3, #1
 800786e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	40da      	lsrs	r2, r3
 8007878:	1e13      	subs	r3, r2, #0
 800787a:	d000      	beq.n	800787e <HAL_GPIO_Init+0x2c6>
 800787c:	e6a8      	b.n	80075d0 <HAL_GPIO_Init+0x18>
  }
}
 800787e:	46c0      	nop			; (mov r8, r8)
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	46bd      	mov	sp, r7
 8007884:	b006      	add	sp, #24
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40021000 	.word	0x40021000
 800788c:	40010000 	.word	0x40010000
 8007890:	50000400 	.word	0x50000400
 8007894:	50000800 	.word	0x50000800
 8007898:	50000c00 	.word	0x50000c00
 800789c:	50001c00 	.word	0x50001c00
 80078a0:	40010400 	.word	0x40010400

080078a4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	000a      	movs	r2, r1
 80078ae:	1cbb      	adds	r3, r7, #2
 80078b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	1cba      	adds	r2, r7, #2
 80078b8:	8812      	ldrh	r2, [r2, #0]
 80078ba:	4013      	ands	r3, r2
 80078bc:	d004      	beq.n	80078c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80078be:	230f      	movs	r3, #15
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	e003      	b.n	80078d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80078c8:	230f      	movs	r3, #15
 80078ca:	18fb      	adds	r3, r7, r3
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80078d0:	230f      	movs	r3, #15
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	781b      	ldrb	r3, [r3, #0]
}
 80078d6:	0018      	movs	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	b004      	add	sp, #16
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b082      	sub	sp, #8
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	0008      	movs	r0, r1
 80078e8:	0011      	movs	r1, r2
 80078ea:	1cbb      	adds	r3, r7, #2
 80078ec:	1c02      	adds	r2, r0, #0
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	1c7b      	adds	r3, r7, #1
 80078f2:	1c0a      	adds	r2, r1, #0
 80078f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078f6:	1c7b      	adds	r3, r7, #1
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d004      	beq.n	8007908 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078fe:	1cbb      	adds	r3, r7, #2
 8007900:	881a      	ldrh	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007906:	e003      	b.n	8007910 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8007908:	1cbb      	adds	r3, r7, #2
 800790a:	881a      	ldrh	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	46bd      	mov	sp, r7
 8007914:	b002      	add	sp, #8
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 800791c:	4b04      	ldr	r3, [pc, #16]	; (8007930 <HAL_PWR_EnableBkUpAccess+0x18>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	4b03      	ldr	r3, [pc, #12]	; (8007930 <HAL_PWR_EnableBkUpAccess+0x18>)
 8007922:	2180      	movs	r1, #128	; 0x80
 8007924:	0049      	lsls	r1, r1, #1
 8007926:	430a      	orrs	r2, r1
 8007928:	601a      	str	r2, [r3, #0]
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40007000 	.word	0x40007000

08007934 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007934:	b5b0      	push	{r4, r5, r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d102      	bne.n	8007948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	f000 fb5a 	bl	8007ffc <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007948:	4bce      	ldr	r3, [pc, #824]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	220c      	movs	r2, #12
 800794e:	4013      	ands	r3, r2
 8007950:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007952:	4bcc      	ldr	r3, [pc, #816]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	2380      	movs	r3, #128	; 0x80
 8007958:	025b      	lsls	r3, r3, #9
 800795a:	4013      	ands	r3, r2
 800795c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2201      	movs	r2, #1
 8007964:	4013      	ands	r3, r2
 8007966:	d100      	bne.n	800796a <HAL_RCC_OscConfig+0x36>
 8007968:	e07c      	b.n	8007a64 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	2b08      	cmp	r3, #8
 800796e:	d007      	beq.n	8007980 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	2b0c      	cmp	r3, #12
 8007974:	d111      	bne.n	800799a <HAL_RCC_OscConfig+0x66>
 8007976:	69fa      	ldr	r2, [r7, #28]
 8007978:	2380      	movs	r3, #128	; 0x80
 800797a:	025b      	lsls	r3, r3, #9
 800797c:	429a      	cmp	r2, r3
 800797e:	d10c      	bne.n	800799a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007980:	4bc0      	ldr	r3, [pc, #768]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	2380      	movs	r3, #128	; 0x80
 8007986:	029b      	lsls	r3, r3, #10
 8007988:	4013      	ands	r3, r2
 800798a:	d100      	bne.n	800798e <HAL_RCC_OscConfig+0x5a>
 800798c:	e069      	b.n	8007a62 <HAL_RCC_OscConfig+0x12e>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d165      	bne.n	8007a62 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	e330      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	2380      	movs	r3, #128	; 0x80
 80079a0:	025b      	lsls	r3, r3, #9
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d107      	bne.n	80079b6 <HAL_RCC_OscConfig+0x82>
 80079a6:	4bb7      	ldr	r3, [pc, #732]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	4bb6      	ldr	r3, [pc, #728]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079ac:	2180      	movs	r1, #128	; 0x80
 80079ae:	0249      	lsls	r1, r1, #9
 80079b0:	430a      	orrs	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	e027      	b.n	8007a06 <HAL_RCC_OscConfig+0xd2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	23a0      	movs	r3, #160	; 0xa0
 80079bc:	02db      	lsls	r3, r3, #11
 80079be:	429a      	cmp	r2, r3
 80079c0:	d10e      	bne.n	80079e0 <HAL_RCC_OscConfig+0xac>
 80079c2:	4bb0      	ldr	r3, [pc, #704]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4baf      	ldr	r3, [pc, #700]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079c8:	2180      	movs	r1, #128	; 0x80
 80079ca:	02c9      	lsls	r1, r1, #11
 80079cc:	430a      	orrs	r2, r1
 80079ce:	601a      	str	r2, [r3, #0]
 80079d0:	4bac      	ldr	r3, [pc, #688]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4bab      	ldr	r3, [pc, #684]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079d6:	2180      	movs	r1, #128	; 0x80
 80079d8:	0249      	lsls	r1, r1, #9
 80079da:	430a      	orrs	r2, r1
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	e012      	b.n	8007a06 <HAL_RCC_OscConfig+0xd2>
 80079e0:	4ba8      	ldr	r3, [pc, #672]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4ba7      	ldr	r3, [pc, #668]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079e6:	49a8      	ldr	r1, [pc, #672]	; (8007c88 <HAL_RCC_OscConfig+0x354>)
 80079e8:	400a      	ands	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	4ba5      	ldr	r3, [pc, #660]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	2380      	movs	r3, #128	; 0x80
 80079f2:	025b      	lsls	r3, r3, #9
 80079f4:	4013      	ands	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4ba2      	ldr	r3, [pc, #648]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	4ba1      	ldr	r3, [pc, #644]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007a00:	49a2      	ldr	r1, [pc, #648]	; (8007c8c <HAL_RCC_OscConfig+0x358>)
 8007a02:	400a      	ands	r2, r1
 8007a04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d014      	beq.n	8007a38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0e:	f7fe fee5 	bl	80067dc <HAL_GetTick>
 8007a12:	0003      	movs	r3, r0
 8007a14:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a18:	f7fe fee0 	bl	80067dc <HAL_GetTick>
 8007a1c:	0002      	movs	r2, r0
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b64      	cmp	r3, #100	; 0x64
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e2e8      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a2a:	4b96      	ldr	r3, [pc, #600]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	2380      	movs	r3, #128	; 0x80
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	4013      	ands	r3, r2
 8007a34:	d0f0      	beq.n	8007a18 <HAL_RCC_OscConfig+0xe4>
 8007a36:	e015      	b.n	8007a64 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a38:	f7fe fed0 	bl	80067dc <HAL_GetTick>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a40:	e008      	b.n	8007a54 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a42:	f7fe fecb 	bl	80067dc <HAL_GetTick>
 8007a46:	0002      	movs	r2, r0
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b64      	cmp	r3, #100	; 0x64
 8007a4e:	d901      	bls.n	8007a54 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e2d3      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a54:	4b8b      	ldr	r3, [pc, #556]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	2380      	movs	r3, #128	; 0x80
 8007a5a:	029b      	lsls	r3, r3, #10
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d1f0      	bne.n	8007a42 <HAL_RCC_OscConfig+0x10e>
 8007a60:	e000      	b.n	8007a64 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	d100      	bne.n	8007a70 <HAL_RCC_OscConfig+0x13c>
 8007a6e:	e08b      	b.n	8007b88 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d005      	beq.n	8007a88 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b0c      	cmp	r3, #12
 8007a80:	d13e      	bne.n	8007b00 <HAL_RCC_OscConfig+0x1cc>
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d13b      	bne.n	8007b00 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8007a88:	4b7e      	ldr	r3, [pc, #504]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	4013      	ands	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_RCC_OscConfig+0x168>
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e2af      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a9c:	4b79      	ldr	r3, [pc, #484]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	4a7b      	ldr	r2, [pc, #492]	; (8007c90 <HAL_RCC_OscConfig+0x35c>)
 8007aa2:	4013      	ands	r3, r2
 8007aa4:	0019      	movs	r1, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	021a      	lsls	r2, r3, #8
 8007aac:	4b75      	ldr	r3, [pc, #468]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007ab2:	4b74      	ldr	r3, [pc, #464]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2209      	movs	r2, #9
 8007ab8:	4393      	bics	r3, r2
 8007aba:	0019      	movs	r1, r3
 8007abc:	4b71      	ldr	r3, [pc, #452]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ac4:	f000 fbe8 	bl	8008298 <HAL_RCC_GetSysClockFreq>
 8007ac8:	0001      	movs	r1, r0
 8007aca:	4b6e      	ldr	r3, [pc, #440]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	091b      	lsrs	r3, r3, #4
 8007ad0:	220f      	movs	r2, #15
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	4a6f      	ldr	r2, [pc, #444]	; (8007c94 <HAL_RCC_OscConfig+0x360>)
 8007ad6:	5cd3      	ldrb	r3, [r2, r3]
 8007ad8:	000a      	movs	r2, r1
 8007ada:	40da      	lsrs	r2, r3
 8007adc:	4b6e      	ldr	r3, [pc, #440]	; (8007c98 <HAL_RCC_OscConfig+0x364>)
 8007ade:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8007ae0:	4b6e      	ldr	r3, [pc, #440]	; (8007c9c <HAL_RCC_OscConfig+0x368>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2513      	movs	r5, #19
 8007ae6:	197c      	adds	r4, r7, r5
 8007ae8:	0018      	movs	r0, r3
 8007aea:	f7fe fe31 	bl	8006750 <HAL_InitTick>
 8007aee:	0003      	movs	r3, r0
 8007af0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8007af2:	197b      	adds	r3, r7, r5
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d046      	beq.n	8007b88 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8007afa:	197b      	adds	r3, r7, r5
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	e27d      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d027      	beq.n	8007b56 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8007b06:	4b5f      	ldr	r3, [pc, #380]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2209      	movs	r2, #9
 8007b0c:	4393      	bics	r3, r2
 8007b0e:	0019      	movs	r1, r3
 8007b10:	4b5c      	ldr	r3, [pc, #368]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b12:	697a      	ldr	r2, [r7, #20]
 8007b14:	430a      	orrs	r2, r1
 8007b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b18:	f7fe fe60 	bl	80067dc <HAL_GetTick>
 8007b1c:	0003      	movs	r3, r0
 8007b1e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b20:	e008      	b.n	8007b34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b22:	f7fe fe5b 	bl	80067dc <HAL_GetTick>
 8007b26:	0002      	movs	r2, r0
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	1ad3      	subs	r3, r2, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	d901      	bls.n	8007b34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e263      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b34:	4b53      	ldr	r3, [pc, #332]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2204      	movs	r2, #4
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d0f1      	beq.n	8007b22 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b3e:	4b51      	ldr	r3, [pc, #324]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4a53      	ldr	r2, [pc, #332]	; (8007c90 <HAL_RCC_OscConfig+0x35c>)
 8007b44:	4013      	ands	r3, r2
 8007b46:	0019      	movs	r1, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	021a      	lsls	r2, r3, #8
 8007b4e:	4b4d      	ldr	r3, [pc, #308]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
 8007b54:	e018      	b.n	8007b88 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b56:	4b4b      	ldr	r3, [pc, #300]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4b4a      	ldr	r3, [pc, #296]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	438a      	bics	r2, r1
 8007b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b62:	f7fe fe3b 	bl	80067dc <HAL_GetTick>
 8007b66:	0003      	movs	r3, r0
 8007b68:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b6a:	e008      	b.n	8007b7e <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b6c:	f7fe fe36 	bl	80067dc <HAL_GetTick>
 8007b70:	0002      	movs	r2, r0
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	1ad3      	subs	r3, r2, r3
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d901      	bls.n	8007b7e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e23e      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b7e:	4b41      	ldr	r3, [pc, #260]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2204      	movs	r2, #4
 8007b84:	4013      	ands	r3, r2
 8007b86:	d1f1      	bne.n	8007b6c <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	4013      	ands	r3, r2
 8007b90:	d100      	bne.n	8007b94 <HAL_RCC_OscConfig+0x260>
 8007b92:	e0a1      	b.n	8007cd8 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d140      	bne.n	8007c1c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007b9a:	4b3a      	ldr	r3, [pc, #232]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	2380      	movs	r3, #128	; 0x80
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	d005      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x27e>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e224      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bb2:	4b34      	ldr	r3, [pc, #208]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	4a3a      	ldr	r2, [pc, #232]	; (8007ca0 <HAL_RCC_OscConfig+0x36c>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	0019      	movs	r1, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a1a      	ldr	r2, [r3, #32]
 8007bc0:	4b30      	ldr	r3, [pc, #192]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bc6:	4b2f      	ldr	r3, [pc, #188]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	021b      	lsls	r3, r3, #8
 8007bcc:	0a19      	lsrs	r1, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	061a      	lsls	r2, r3, #24
 8007bd4:	4b2b      	ldr	r3, [pc, #172]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	0b5b      	lsrs	r3, r3, #13
 8007be0:	3301      	adds	r3, #1
 8007be2:	2280      	movs	r2, #128	; 0x80
 8007be4:	0212      	lsls	r2, r2, #8
 8007be6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007be8:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	091b      	lsrs	r3, r3, #4
 8007bee:	210f      	movs	r1, #15
 8007bf0:	400b      	ands	r3, r1
 8007bf2:	4928      	ldr	r1, [pc, #160]	; (8007c94 <HAL_RCC_OscConfig+0x360>)
 8007bf4:	5ccb      	ldrb	r3, [r1, r3]
 8007bf6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007bf8:	4b27      	ldr	r3, [pc, #156]	; (8007c98 <HAL_RCC_OscConfig+0x364>)
 8007bfa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8007bfc:	4b27      	ldr	r3, [pc, #156]	; (8007c9c <HAL_RCC_OscConfig+0x368>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2513      	movs	r5, #19
 8007c02:	197c      	adds	r4, r7, r5
 8007c04:	0018      	movs	r0, r3
 8007c06:	f7fe fda3 	bl	8006750 <HAL_InitTick>
 8007c0a:	0003      	movs	r3, r0
 8007c0c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8007c0e:	197b      	adds	r3, r7, r5
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d060      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8007c16:	197b      	adds	r3, r7, r5
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	e1ef      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d03f      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c24:	4b17      	ldr	r3, [pc, #92]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	4b16      	ldr	r3, [pc, #88]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c2a:	2180      	movs	r1, #128	; 0x80
 8007c2c:	0049      	lsls	r1, r1, #1
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c32:	f7fe fdd3 	bl	80067dc <HAL_GetTick>
 8007c36:	0003      	movs	r3, r0
 8007c38:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c3c:	f7fe fdce 	bl	80067dc <HAL_GetTick>
 8007c40:	0002      	movs	r2, r0
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d901      	bls.n	8007c4e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e1d6      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	2380      	movs	r3, #128	; 0x80
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4013      	ands	r3, r2
 8007c58:	d0f0      	beq.n	8007c3c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c5a:	4b0a      	ldr	r3, [pc, #40]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4a10      	ldr	r2, [pc, #64]	; (8007ca0 <HAL_RCC_OscConfig+0x36c>)
 8007c60:	4013      	ands	r3, r2
 8007c62:	0019      	movs	r1, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1a      	ldr	r2, [r3, #32]
 8007c68:	4b06      	ldr	r3, [pc, #24]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	0a19      	lsrs	r1, r3, #8
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	061a      	lsls	r2, r3, #24
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <HAL_RCC_OscConfig+0x350>)
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	e029      	b.n	8007cd8 <HAL_RCC_OscConfig+0x3a4>
 8007c84:	40021000 	.word	0x40021000
 8007c88:	fffeffff 	.word	0xfffeffff
 8007c8c:	fffbffff 	.word	0xfffbffff
 8007c90:	ffffe0ff 	.word	0xffffe0ff
 8007c94:	0800b9e8 	.word	0x0800b9e8
 8007c98:	20000010 	.word	0x20000010
 8007c9c:	20000014 	.word	0x20000014
 8007ca0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ca4:	4bbe      	ldr	r3, [pc, #760]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	4bbd      	ldr	r3, [pc, #756]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007caa:	49be      	ldr	r1, [pc, #760]	; (8007fa4 <HAL_RCC_OscConfig+0x670>)
 8007cac:	400a      	ands	r2, r1
 8007cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cb0:	f7fe fd94 	bl	80067dc <HAL_GetTick>
 8007cb4:	0003      	movs	r3, r0
 8007cb6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007cb8:	e008      	b.n	8007ccc <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cba:	f7fe fd8f 	bl	80067dc <HAL_GetTick>
 8007cbe:	0002      	movs	r2, r0
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d901      	bls.n	8007ccc <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8007cc8:	2303      	movs	r3, #3
 8007cca:	e197      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8007ccc:	4bb4      	ldr	r3, [pc, #720]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	2380      	movs	r3, #128	; 0x80
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	d1f0      	bne.n	8007cba <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	4013      	ands	r3, r2
 8007ce0:	d036      	beq.n	8007d50 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d019      	beq.n	8007d1e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cea:	4bad      	ldr	r3, [pc, #692]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007cec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cee:	4bac      	ldr	r3, [pc, #688]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cf6:	f7fe fd71 	bl	80067dc <HAL_GetTick>
 8007cfa:	0003      	movs	r3, r0
 8007cfc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007cfe:	e008      	b.n	8007d12 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d00:	f7fe fd6c 	bl	80067dc <HAL_GetTick>
 8007d04:	0002      	movs	r2, r0
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d901      	bls.n	8007d12 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e174      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d12:	4ba3      	ldr	r3, [pc, #652]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d16:	2202      	movs	r2, #2
 8007d18:	4013      	ands	r3, r2
 8007d1a:	d0f1      	beq.n	8007d00 <HAL_RCC_OscConfig+0x3cc>
 8007d1c:	e018      	b.n	8007d50 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d1e:	4ba0      	ldr	r3, [pc, #640]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d22:	4b9f      	ldr	r3, [pc, #636]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d24:	2101      	movs	r1, #1
 8007d26:	438a      	bics	r2, r1
 8007d28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d2a:	f7fe fd57 	bl	80067dc <HAL_GetTick>
 8007d2e:	0003      	movs	r3, r0
 8007d30:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d32:	e008      	b.n	8007d46 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007d34:	f7fe fd52 	bl	80067dc <HAL_GetTick>
 8007d38:	0002      	movs	r2, r0
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e15a      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d46:	4b96      	ldr	r3, [pc, #600]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d1f1      	bne.n	8007d34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2204      	movs	r2, #4
 8007d56:	4013      	ands	r3, r2
 8007d58:	d100      	bne.n	8007d5c <HAL_RCC_OscConfig+0x428>
 8007d5a:	e0ae      	b.n	8007eba <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d5c:	2027      	movs	r0, #39	; 0x27
 8007d5e:	183b      	adds	r3, r7, r0
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d64:	4b8e      	ldr	r3, [pc, #568]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d68:	2380      	movs	r3, #128	; 0x80
 8007d6a:	055b      	lsls	r3, r3, #21
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	d109      	bne.n	8007d84 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d70:	4b8b      	ldr	r3, [pc, #556]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	4b8a      	ldr	r3, [pc, #552]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007d76:	2180      	movs	r1, #128	; 0x80
 8007d78:	0549      	lsls	r1, r1, #21
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8007d7e:	183b      	adds	r3, r7, r0
 8007d80:	2201      	movs	r2, #1
 8007d82:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d84:	4b88      	ldr	r3, [pc, #544]	; (8007fa8 <HAL_RCC_OscConfig+0x674>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	d11a      	bne.n	8007dc6 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d90:	4b85      	ldr	r3, [pc, #532]	; (8007fa8 <HAL_RCC_OscConfig+0x674>)
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	4b84      	ldr	r3, [pc, #528]	; (8007fa8 <HAL_RCC_OscConfig+0x674>)
 8007d96:	2180      	movs	r1, #128	; 0x80
 8007d98:	0049      	lsls	r1, r1, #1
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d9e:	f7fe fd1d 	bl	80067dc <HAL_GetTick>
 8007da2:	0003      	movs	r3, r0
 8007da4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007da6:	e008      	b.n	8007dba <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007da8:	f7fe fd18 	bl	80067dc <HAL_GetTick>
 8007dac:	0002      	movs	r2, r0
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b64      	cmp	r3, #100	; 0x64
 8007db4:	d901      	bls.n	8007dba <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e120      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dba:	4b7b      	ldr	r3, [pc, #492]	; (8007fa8 <HAL_RCC_OscConfig+0x674>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	2380      	movs	r3, #128	; 0x80
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d0f0      	beq.n	8007da8 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	2380      	movs	r3, #128	; 0x80
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d107      	bne.n	8007de2 <HAL_RCC_OscConfig+0x4ae>
 8007dd2:	4b73      	ldr	r3, [pc, #460]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dd6:	4b72      	ldr	r3, [pc, #456]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007dd8:	2180      	movs	r1, #128	; 0x80
 8007dda:	0049      	lsls	r1, r1, #1
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	651a      	str	r2, [r3, #80]	; 0x50
 8007de0:	e031      	b.n	8007e46 <HAL_RCC_OscConfig+0x512>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10c      	bne.n	8007e04 <HAL_RCC_OscConfig+0x4d0>
 8007dea:	4b6d      	ldr	r3, [pc, #436]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007dec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dee:	4b6c      	ldr	r3, [pc, #432]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007df0:	496c      	ldr	r1, [pc, #432]	; (8007fa4 <HAL_RCC_OscConfig+0x670>)
 8007df2:	400a      	ands	r2, r1
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
 8007df6:	4b6a      	ldr	r3, [pc, #424]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007df8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007dfa:	4b69      	ldr	r3, [pc, #420]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007dfc:	496b      	ldr	r1, [pc, #428]	; (8007fac <HAL_RCC_OscConfig+0x678>)
 8007dfe:	400a      	ands	r2, r1
 8007e00:	651a      	str	r2, [r3, #80]	; 0x50
 8007e02:	e020      	b.n	8007e46 <HAL_RCC_OscConfig+0x512>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	23a0      	movs	r3, #160	; 0xa0
 8007e0a:	00db      	lsls	r3, r3, #3
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d10e      	bne.n	8007e2e <HAL_RCC_OscConfig+0x4fa>
 8007e10:	4b63      	ldr	r3, [pc, #396]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e14:	4b62      	ldr	r3, [pc, #392]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	00c9      	lsls	r1, r1, #3
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e1e:	4b60      	ldr	r3, [pc, #384]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e22:	4b5f      	ldr	r3, [pc, #380]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e24:	2180      	movs	r1, #128	; 0x80
 8007e26:	0049      	lsls	r1, r1, #1
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	651a      	str	r2, [r3, #80]	; 0x50
 8007e2c:	e00b      	b.n	8007e46 <HAL_RCC_OscConfig+0x512>
 8007e2e:	4b5c      	ldr	r3, [pc, #368]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e32:	4b5b      	ldr	r3, [pc, #364]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e34:	495b      	ldr	r1, [pc, #364]	; (8007fa4 <HAL_RCC_OscConfig+0x670>)
 8007e36:	400a      	ands	r2, r1
 8007e38:	651a      	str	r2, [r3, #80]	; 0x50
 8007e3a:	4b59      	ldr	r3, [pc, #356]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e3e:	4b58      	ldr	r3, [pc, #352]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e40:	495a      	ldr	r1, [pc, #360]	; (8007fac <HAL_RCC_OscConfig+0x678>)
 8007e42:	400a      	ands	r2, r1
 8007e44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d015      	beq.n	8007e7a <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e4e:	f7fe fcc5 	bl	80067dc <HAL_GetTick>
 8007e52:	0003      	movs	r3, r0
 8007e54:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e56:	e009      	b.n	8007e6c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e58:	f7fe fcc0 	bl	80067dc <HAL_GetTick>
 8007e5c:	0002      	movs	r2, r0
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	4a53      	ldr	r2, [pc, #332]	; (8007fb0 <HAL_RCC_OscConfig+0x67c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e0c7      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e6c:	4b4c      	ldr	r3, [pc, #304]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e70:	2380      	movs	r3, #128	; 0x80
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4013      	ands	r3, r2
 8007e76:	d0ef      	beq.n	8007e58 <HAL_RCC_OscConfig+0x524>
 8007e78:	e014      	b.n	8007ea4 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e7a:	f7fe fcaf 	bl	80067dc <HAL_GetTick>
 8007e7e:	0003      	movs	r3, r0
 8007e80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e82:	e009      	b.n	8007e98 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e84:	f7fe fcaa 	bl	80067dc <HAL_GetTick>
 8007e88:	0002      	movs	r2, r0
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	4a48      	ldr	r2, [pc, #288]	; (8007fb0 <HAL_RCC_OscConfig+0x67c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e0b1      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e98:	4b41      	ldr	r3, [pc, #260]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007e9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	d1ef      	bne.n	8007e84 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ea4:	2327      	movs	r3, #39	; 0x27
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d105      	bne.n	8007eba <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007eae:	4b3c      	ldr	r3, [pc, #240]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb2:	4b3b      	ldr	r3, [pc, #236]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007eb4:	493f      	ldr	r1, [pc, #252]	; (8007fb4 <HAL_RCC_OscConfig+0x680>)
 8007eb6:	400a      	ands	r2, r1
 8007eb8:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d100      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x590>
 8007ec2:	e09a      	b.n	8007ffa <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2b0c      	cmp	r3, #12
 8007ec8:	d064      	beq.n	8007f94 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d145      	bne.n	8007f5e <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed2:	4b33      	ldr	r3, [pc, #204]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b32      	ldr	r3, [pc, #200]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007ed8:	4937      	ldr	r1, [pc, #220]	; (8007fb8 <HAL_RCC_OscConfig+0x684>)
 8007eda:	400a      	ands	r2, r1
 8007edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ede:	f7fe fc7d 	bl	80067dc <HAL_GetTick>
 8007ee2:	0003      	movs	r3, r0
 8007ee4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007ee6:	e008      	b.n	8007efa <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ee8:	f7fe fc78 	bl	80067dc <HAL_GetTick>
 8007eec:	0002      	movs	r2, r0
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e080      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007efa:	4b29      	ldr	r3, [pc, #164]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	2380      	movs	r3, #128	; 0x80
 8007f00:	049b      	lsls	r3, r3, #18
 8007f02:	4013      	ands	r3, r2
 8007f04:	d1f0      	bne.n	8007ee8 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f06:	4b26      	ldr	r3, [pc, #152]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	4a2c      	ldr	r2, [pc, #176]	; (8007fbc <HAL_RCC_OscConfig+0x688>)
 8007f0c:	4013      	ands	r3, r2
 8007f0e:	0019      	movs	r1, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	4b1f      	ldr	r3, [pc, #124]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f22:	430a      	orrs	r2, r1
 8007f24:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f26:	4b1e      	ldr	r3, [pc, #120]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f2c:	2180      	movs	r1, #128	; 0x80
 8007f2e:	0449      	lsls	r1, r1, #17
 8007f30:	430a      	orrs	r2, r1
 8007f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f34:	f7fe fc52 	bl	80067dc <HAL_GetTick>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007f3c:	e008      	b.n	8007f50 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f3e:	f7fe fc4d 	bl	80067dc <HAL_GetTick>
 8007f42:	0002      	movs	r2, r0
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	1ad3      	subs	r3, r2, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d901      	bls.n	8007f50 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	e055      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	2380      	movs	r3, #128	; 0x80
 8007f56:	049b      	lsls	r3, r3, #18
 8007f58:	4013      	ands	r3, r2
 8007f5a:	d0f0      	beq.n	8007f3e <HAL_RCC_OscConfig+0x60a>
 8007f5c:	e04d      	b.n	8007ffa <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f64:	4914      	ldr	r1, [pc, #80]	; (8007fb8 <HAL_RCC_OscConfig+0x684>)
 8007f66:	400a      	ands	r2, r1
 8007f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f6a:	f7fe fc37 	bl	80067dc <HAL_GetTick>
 8007f6e:	0003      	movs	r3, r0
 8007f70:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f74:	f7fe fc32 	bl	80067dc <HAL_GetTick>
 8007f78:	0002      	movs	r2, r0
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e03a      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <HAL_RCC_OscConfig+0x66c>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	2380      	movs	r3, #128	; 0x80
 8007f8c:	049b      	lsls	r3, r3, #18
 8007f8e:	4013      	ands	r3, r2
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x640>
 8007f92:	e032      	b.n	8007ffa <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d111      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e02d      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
 8007fa0:	40021000 	.word	0x40021000
 8007fa4:	fffffeff 	.word	0xfffffeff
 8007fa8:	40007000 	.word	0x40007000
 8007fac:	fffffbff 	.word	0xfffffbff
 8007fb0:	00001388 	.word	0x00001388
 8007fb4:	efffffff 	.word	0xefffffff
 8007fb8:	feffffff 	.word	0xfeffffff
 8007fbc:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007fc0:	4b10      	ldr	r3, [pc, #64]	; (8008004 <HAL_RCC_OscConfig+0x6d0>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fc6:	69fa      	ldr	r2, [r7, #28]
 8007fc8:	2380      	movs	r3, #128	; 0x80
 8007fca:	025b      	lsls	r3, r3, #9
 8007fcc:	401a      	ands	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007fd6:	69fa      	ldr	r2, [r7, #28]
 8007fd8:	23f0      	movs	r3, #240	; 0xf0
 8007fda:	039b      	lsls	r3, r3, #14
 8007fdc:	401a      	ands	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d107      	bne.n	8007ff6 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007fe6:	69fa      	ldr	r2, [r7, #28]
 8007fe8:	23c0      	movs	r3, #192	; 0xc0
 8007fea:	041b      	lsls	r3, r3, #16
 8007fec:	401a      	ands	r2, r3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d001      	beq.n	8007ffa <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e000      	b.n	8007ffc <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b00a      	add	sp, #40	; 0x28
 8008002:	bdb0      	pop	{r4, r5, r7, pc}
 8008004:	40021000 	.word	0x40021000

08008008 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008008:	b5b0      	push	{r4, r5, r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e128      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800801c:	4b96      	ldr	r3, [pc, #600]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2201      	movs	r2, #1
 8008022:	4013      	ands	r3, r2
 8008024:	683a      	ldr	r2, [r7, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d91e      	bls.n	8008068 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800802a:	4b93      	ldr	r3, [pc, #588]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2201      	movs	r2, #1
 8008030:	4393      	bics	r3, r2
 8008032:	0019      	movs	r1, r3
 8008034:	4b90      	ldr	r3, [pc, #576]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	430a      	orrs	r2, r1
 800803a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800803c:	f7fe fbce 	bl	80067dc <HAL_GetTick>
 8008040:	0003      	movs	r3, r0
 8008042:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008044:	e009      	b.n	800805a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008046:	f7fe fbc9 	bl	80067dc <HAL_GetTick>
 800804a:	0002      	movs	r2, r0
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	1ad3      	subs	r3, r2, r3
 8008050:	4a8a      	ldr	r2, [pc, #552]	; (800827c <HAL_RCC_ClockConfig+0x274>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d901      	bls.n	800805a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e109      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800805a:	4b87      	ldr	r3, [pc, #540]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2201      	movs	r2, #1
 8008060:	4013      	ands	r3, r2
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	429a      	cmp	r2, r3
 8008066:	d1ee      	bne.n	8008046 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2202      	movs	r2, #2
 800806e:	4013      	ands	r3, r2
 8008070:	d009      	beq.n	8008086 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008072:	4b83      	ldr	r3, [pc, #524]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	22f0      	movs	r2, #240	; 0xf0
 8008078:	4393      	bics	r3, r2
 800807a:	0019      	movs	r1, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	4b7f      	ldr	r3, [pc, #508]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 8008082:	430a      	orrs	r2, r1
 8008084:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2201      	movs	r2, #1
 800808c:	4013      	ands	r3, r2
 800808e:	d100      	bne.n	8008092 <HAL_RCC_ClockConfig+0x8a>
 8008090:	e089      	b.n	80081a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2b02      	cmp	r3, #2
 8008098:	d107      	bne.n	80080aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800809a:	4b79      	ldr	r3, [pc, #484]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	2380      	movs	r3, #128	; 0x80
 80080a0:	029b      	lsls	r3, r3, #10
 80080a2:	4013      	ands	r3, r2
 80080a4:	d120      	bne.n	80080e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e0e1      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	2b03      	cmp	r3, #3
 80080b0:	d107      	bne.n	80080c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080b2:	4b73      	ldr	r3, [pc, #460]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	049b      	lsls	r3, r3, #18
 80080ba:	4013      	ands	r3, r2
 80080bc:	d114      	bne.n	80080e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e0d5      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d106      	bne.n	80080d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080ca:	4b6d      	ldr	r3, [pc, #436]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2204      	movs	r2, #4
 80080d0:	4013      	ands	r3, r2
 80080d2:	d109      	bne.n	80080e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e0ca      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80080d8:	4b69      	ldr	r3, [pc, #420]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	2380      	movs	r3, #128	; 0x80
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4013      	ands	r3, r2
 80080e2:	d101      	bne.n	80080e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0c2      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080e8:	4b65      	ldr	r3, [pc, #404]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2203      	movs	r2, #3
 80080ee:	4393      	bics	r3, r2
 80080f0:	0019      	movs	r1, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	685a      	ldr	r2, [r3, #4]
 80080f6:	4b62      	ldr	r3, [pc, #392]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 80080f8:	430a      	orrs	r2, r1
 80080fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080fc:	f7fe fb6e 	bl	80067dc <HAL_GetTick>
 8008100:	0003      	movs	r3, r0
 8008102:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d111      	bne.n	8008130 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800810c:	e009      	b.n	8008122 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800810e:	f7fe fb65 	bl	80067dc <HAL_GetTick>
 8008112:	0002      	movs	r2, r0
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	1ad3      	subs	r3, r2, r3
 8008118:	4a58      	ldr	r2, [pc, #352]	; (800827c <HAL_RCC_ClockConfig+0x274>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e0a5      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008122:	4b57      	ldr	r3, [pc, #348]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	220c      	movs	r2, #12
 8008128:	4013      	ands	r3, r2
 800812a:	2b08      	cmp	r3, #8
 800812c:	d1ef      	bne.n	800810e <HAL_RCC_ClockConfig+0x106>
 800812e:	e03a      	b.n	80081a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	2b03      	cmp	r3, #3
 8008136:	d111      	bne.n	800815c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008138:	e009      	b.n	800814e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800813a:	f7fe fb4f 	bl	80067dc <HAL_GetTick>
 800813e:	0002      	movs	r2, r0
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	4a4d      	ldr	r2, [pc, #308]	; (800827c <HAL_RCC_ClockConfig+0x274>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d901      	bls.n	800814e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e08f      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800814e:	4b4c      	ldr	r3, [pc, #304]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 8008150:	68db      	ldr	r3, [r3, #12]
 8008152:	220c      	movs	r2, #12
 8008154:	4013      	ands	r3, r2
 8008156:	2b0c      	cmp	r3, #12
 8008158:	d1ef      	bne.n	800813a <HAL_RCC_ClockConfig+0x132>
 800815a:	e024      	b.n	80081a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d11b      	bne.n	800819c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8008164:	e009      	b.n	800817a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008166:	f7fe fb39 	bl	80067dc <HAL_GetTick>
 800816a:	0002      	movs	r2, r0
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	4a42      	ldr	r2, [pc, #264]	; (800827c <HAL_RCC_ClockConfig+0x274>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d901      	bls.n	800817a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e079      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800817a:	4b41      	ldr	r3, [pc, #260]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	220c      	movs	r2, #12
 8008180:	4013      	ands	r3, r2
 8008182:	2b04      	cmp	r3, #4
 8008184:	d1ef      	bne.n	8008166 <HAL_RCC_ClockConfig+0x15e>
 8008186:	e00e      	b.n	80081a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008188:	f7fe fb28 	bl	80067dc <HAL_GetTick>
 800818c:	0002      	movs	r2, r0
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	4a3a      	ldr	r2, [pc, #232]	; (800827c <HAL_RCC_ClockConfig+0x274>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d901      	bls.n	800819c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8008198:	2303      	movs	r3, #3
 800819a:	e068      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800819c:	4b38      	ldr	r3, [pc, #224]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	220c      	movs	r2, #12
 80081a2:	4013      	ands	r3, r2
 80081a4:	d1f0      	bne.n	8008188 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80081a6:	4b34      	ldr	r3, [pc, #208]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2201      	movs	r2, #1
 80081ac:	4013      	ands	r3, r2
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d21e      	bcs.n	80081f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081b4:	4b30      	ldr	r3, [pc, #192]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2201      	movs	r2, #1
 80081ba:	4393      	bics	r3, r2
 80081bc:	0019      	movs	r1, r3
 80081be:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80081c6:	f7fe fb09 	bl	80067dc <HAL_GetTick>
 80081ca:	0003      	movs	r3, r0
 80081cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ce:	e009      	b.n	80081e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081d0:	f7fe fb04 	bl	80067dc <HAL_GetTick>
 80081d4:	0002      	movs	r2, r0
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	4a28      	ldr	r2, [pc, #160]	; (800827c <HAL_RCC_ClockConfig+0x274>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e044      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081e4:	4b24      	ldr	r3, [pc, #144]	; (8008278 <HAL_RCC_ClockConfig+0x270>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2201      	movs	r2, #1
 80081ea:	4013      	ands	r3, r2
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d1ee      	bne.n	80081d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2204      	movs	r2, #4
 80081f8:	4013      	ands	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80081fc:	4b20      	ldr	r3, [pc, #128]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	4a20      	ldr	r2, [pc, #128]	; (8008284 <HAL_RCC_ClockConfig+0x27c>)
 8008202:	4013      	ands	r3, r2
 8008204:	0019      	movs	r1, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	4b1d      	ldr	r3, [pc, #116]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 800820c:	430a      	orrs	r2, r1
 800820e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2208      	movs	r2, #8
 8008216:	4013      	ands	r3, r2
 8008218:	d00a      	beq.n	8008230 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800821a:	4b19      	ldr	r3, [pc, #100]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	4a1a      	ldr	r2, [pc, #104]	; (8008288 <HAL_RCC_ClockConfig+0x280>)
 8008220:	4013      	ands	r3, r2
 8008222:	0019      	movs	r1, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	00da      	lsls	r2, r3, #3
 800822a:	4b15      	ldr	r3, [pc, #84]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 800822c:	430a      	orrs	r2, r1
 800822e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008230:	f000 f832 	bl	8008298 <HAL_RCC_GetSysClockFreq>
 8008234:	0001      	movs	r1, r0
 8008236:	4b12      	ldr	r3, [pc, #72]	; (8008280 <HAL_RCC_ClockConfig+0x278>)
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	091b      	lsrs	r3, r3, #4
 800823c:	220f      	movs	r2, #15
 800823e:	4013      	ands	r3, r2
 8008240:	4a12      	ldr	r2, [pc, #72]	; (800828c <HAL_RCC_ClockConfig+0x284>)
 8008242:	5cd3      	ldrb	r3, [r2, r3]
 8008244:	000a      	movs	r2, r1
 8008246:	40da      	lsrs	r2, r3
 8008248:	4b11      	ldr	r3, [pc, #68]	; (8008290 <HAL_RCC_ClockConfig+0x288>)
 800824a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800824c:	4b11      	ldr	r3, [pc, #68]	; (8008294 <HAL_RCC_ClockConfig+0x28c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	250b      	movs	r5, #11
 8008252:	197c      	adds	r4, r7, r5
 8008254:	0018      	movs	r0, r3
 8008256:	f7fe fa7b 	bl	8006750 <HAL_InitTick>
 800825a:	0003      	movs	r3, r0
 800825c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800825e:	197b      	adds	r3, r7, r5
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d002      	beq.n	800826c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8008266:	197b      	adds	r3, r7, r5
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	e000      	b.n	800826e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b004      	add	sp, #16
 8008274:	bdb0      	pop	{r4, r5, r7, pc}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	40022000 	.word	0x40022000
 800827c:	00001388 	.word	0x00001388
 8008280:	40021000 	.word	0x40021000
 8008284:	fffff8ff 	.word	0xfffff8ff
 8008288:	ffffc7ff 	.word	0xffffc7ff
 800828c:	0800b9e8 	.word	0x0800b9e8
 8008290:	20000010 	.word	0x20000010
 8008294:	20000014 	.word	0x20000014

08008298 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008298:	b5b0      	push	{r4, r5, r7, lr}
 800829a:	b08e      	sub	sp, #56	; 0x38
 800829c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800829e:	4b4c      	ldr	r3, [pc, #304]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80082a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a6:	230c      	movs	r3, #12
 80082a8:	4013      	ands	r3, r2
 80082aa:	2b0c      	cmp	r3, #12
 80082ac:	d014      	beq.n	80082d8 <HAL_RCC_GetSysClockFreq+0x40>
 80082ae:	d900      	bls.n	80082b2 <HAL_RCC_GetSysClockFreq+0x1a>
 80082b0:	e07b      	b.n	80083aa <HAL_RCC_GetSysClockFreq+0x112>
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d002      	beq.n	80082bc <HAL_RCC_GetSysClockFreq+0x24>
 80082b6:	2b08      	cmp	r3, #8
 80082b8:	d00b      	beq.n	80082d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80082ba:	e076      	b.n	80083aa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80082bc:	4b44      	ldr	r3, [pc, #272]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2210      	movs	r2, #16
 80082c2:	4013      	ands	r3, r2
 80082c4:	d002      	beq.n	80082cc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80082c6:	4b43      	ldr	r3, [pc, #268]	; (80083d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80082c8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80082ca:	e07c      	b.n	80083c6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80082cc:	4b42      	ldr	r3, [pc, #264]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x140>)
 80082ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80082d0:	e079      	b.n	80083c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80082d2:	4b42      	ldr	r3, [pc, #264]	; (80083dc <HAL_RCC_GetSysClockFreq+0x144>)
 80082d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80082d6:	e076      	b.n	80083c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	0c9a      	lsrs	r2, r3, #18
 80082dc:	230f      	movs	r3, #15
 80082de:	401a      	ands	r2, r3
 80082e0:	4b3f      	ldr	r3, [pc, #252]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x148>)
 80082e2:	5c9b      	ldrb	r3, [r3, r2]
 80082e4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	0d9a      	lsrs	r2, r3, #22
 80082ea:	2303      	movs	r3, #3
 80082ec:	4013      	ands	r3, r2
 80082ee:	3301      	adds	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80082f2:	4b37      	ldr	r3, [pc, #220]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	2380      	movs	r3, #128	; 0x80
 80082f8:	025b      	lsls	r3, r3, #9
 80082fa:	4013      	ands	r3, r2
 80082fc:	d01a      	beq.n	8008334 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	2300      	movs	r3, #0
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	4a35      	ldr	r2, [pc, #212]	; (80083dc <HAL_RCC_GetSysClockFreq+0x144>)
 8008308:	2300      	movs	r3, #0
 800830a:	69b8      	ldr	r0, [r7, #24]
 800830c:	69f9      	ldr	r1, [r7, #28]
 800830e:	f7f8 f8d9 	bl	80004c4 <__aeabi_lmul>
 8008312:	0002      	movs	r2, r0
 8008314:	000b      	movs	r3, r1
 8008316:	0010      	movs	r0, r2
 8008318:	0019      	movs	r1, r3
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f7f8 f8ad 	bl	8000484 <__aeabi_uldivmod>
 800832a:	0002      	movs	r2, r0
 800832c:	000b      	movs	r3, r1
 800832e:	0013      	movs	r3, r2
 8008330:	637b      	str	r3, [r7, #52]	; 0x34
 8008332:	e037      	b.n	80083a4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8008334:	4b26      	ldr	r3, [pc, #152]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x138>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2210      	movs	r2, #16
 800833a:	4013      	ands	r3, r2
 800833c:	d01a      	beq.n	8008374 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	4a23      	ldr	r2, [pc, #140]	; (80083d4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8008348:	2300      	movs	r3, #0
 800834a:	68b8      	ldr	r0, [r7, #8]
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	f7f8 f8b9 	bl	80004c4 <__aeabi_lmul>
 8008352:	0002      	movs	r2, r0
 8008354:	000b      	movs	r3, r1
 8008356:	0010      	movs	r0, r2
 8008358:	0019      	movs	r1, r3
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	603b      	str	r3, [r7, #0]
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f7f8 f88d 	bl	8000484 <__aeabi_uldivmod>
 800836a:	0002      	movs	r2, r0
 800836c:	000b      	movs	r3, r1
 800836e:	0013      	movs	r3, r2
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
 8008372:	e017      	b.n	80083a4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8008374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008376:	0018      	movs	r0, r3
 8008378:	2300      	movs	r3, #0
 800837a:	0019      	movs	r1, r3
 800837c:	4a16      	ldr	r2, [pc, #88]	; (80083d8 <HAL_RCC_GetSysClockFreq+0x140>)
 800837e:	2300      	movs	r3, #0
 8008380:	f7f8 f8a0 	bl	80004c4 <__aeabi_lmul>
 8008384:	0002      	movs	r2, r0
 8008386:	000b      	movs	r3, r1
 8008388:	0010      	movs	r0, r2
 800838a:	0019      	movs	r1, r3
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	001c      	movs	r4, r3
 8008390:	2300      	movs	r3, #0
 8008392:	001d      	movs	r5, r3
 8008394:	0022      	movs	r2, r4
 8008396:	002b      	movs	r3, r5
 8008398:	f7f8 f874 	bl	8000484 <__aeabi_uldivmod>
 800839c:	0002      	movs	r2, r0
 800839e:	000b      	movs	r3, r1
 80083a0:	0013      	movs	r3, r2
 80083a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80083a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80083a8:	e00d      	b.n	80083c6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80083aa:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <HAL_RCC_GetSysClockFreq+0x138>)
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	0b5b      	lsrs	r3, r3, #13
 80083b0:	2207      	movs	r2, #7
 80083b2:	4013      	ands	r3, r2
 80083b4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	3301      	adds	r3, #1
 80083ba:	2280      	movs	r2, #128	; 0x80
 80083bc:	0212      	lsls	r2, r2, #8
 80083be:	409a      	lsls	r2, r3
 80083c0:	0013      	movs	r3, r2
 80083c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80083c4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80083c8:	0018      	movs	r0, r3
 80083ca:	46bd      	mov	sp, r7
 80083cc:	b00e      	add	sp, #56	; 0x38
 80083ce:	bdb0      	pop	{r4, r5, r7, pc}
 80083d0:	40021000 	.word	0x40021000
 80083d4:	003d0900 	.word	0x003d0900
 80083d8:	00f42400 	.word	0x00f42400
 80083dc:	007a1200 	.word	0x007a1200
 80083e0:	0800ba00 	.word	0x0800ba00

080083e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083e8:	4b02      	ldr	r3, [pc, #8]	; (80083f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80083ea:	681b      	ldr	r3, [r3, #0]
}
 80083ec:	0018      	movs	r0, r3
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	46c0      	nop			; (mov r8, r8)
 80083f4:	20000010 	.word	0x20000010

080083f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80083fc:	f7ff fff2 	bl	80083e4 <HAL_RCC_GetHCLKFreq>
 8008400:	0001      	movs	r1, r0
 8008402:	4b06      	ldr	r3, [pc, #24]	; (800841c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	0a1b      	lsrs	r3, r3, #8
 8008408:	2207      	movs	r2, #7
 800840a:	4013      	ands	r3, r2
 800840c:	4a04      	ldr	r2, [pc, #16]	; (8008420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800840e:	5cd3      	ldrb	r3, [r2, r3]
 8008410:	40d9      	lsrs	r1, r3
 8008412:	000b      	movs	r3, r1
}
 8008414:	0018      	movs	r0, r3
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	46c0      	nop			; (mov r8, r8)
 800841c:	40021000 	.word	0x40021000
 8008420:	0800b9f8 	.word	0x0800b9f8

08008424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008428:	f7ff ffdc 	bl	80083e4 <HAL_RCC_GetHCLKFreq>
 800842c:	0001      	movs	r1, r0
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	0adb      	lsrs	r3, r3, #11
 8008434:	2207      	movs	r2, #7
 8008436:	4013      	ands	r3, r2
 8008438:	4a04      	ldr	r2, [pc, #16]	; (800844c <HAL_RCC_GetPCLK2Freq+0x28>)
 800843a:	5cd3      	ldrb	r3, [r2, r3]
 800843c:	40d9      	lsrs	r1, r3
 800843e:	000b      	movs	r3, r1
}
 8008440:	0018      	movs	r0, r3
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	46c0      	nop			; (mov r8, r8)
 8008448:	40021000 	.word	0x40021000
 800844c:	0800b9f8 	.word	0x0800b9f8

08008450 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8008458:	2017      	movs	r0, #23
 800845a:	183b      	adds	r3, r7, r0
 800845c:	2200      	movs	r2, #0
 800845e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2220      	movs	r2, #32
 8008466:	4013      	ands	r3, r2
 8008468:	d100      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800846a:	e0c2      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800846c:	4b89      	ldr	r3, [pc, #548]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800846e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008470:	2380      	movs	r3, #128	; 0x80
 8008472:	055b      	lsls	r3, r3, #21
 8008474:	4013      	ands	r3, r2
 8008476:	d109      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008478:	4b86      	ldr	r3, [pc, #536]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800847a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847c:	4b85      	ldr	r3, [pc, #532]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800847e:	2180      	movs	r1, #128	; 0x80
 8008480:	0549      	lsls	r1, r1, #21
 8008482:	430a      	orrs	r2, r1
 8008484:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8008486:	183b      	adds	r3, r7, r0
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800848c:	4b82      	ldr	r3, [pc, #520]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	2380      	movs	r3, #128	; 0x80
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	4013      	ands	r3, r2
 8008496:	d11a      	bne.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008498:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	4b7e      	ldr	r3, [pc, #504]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800849e:	2180      	movs	r1, #128	; 0x80
 80084a0:	0049      	lsls	r1, r1, #1
 80084a2:	430a      	orrs	r2, r1
 80084a4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80084a6:	f7fe f999 	bl	80067dc <HAL_GetTick>
 80084aa:	0003      	movs	r3, r0
 80084ac:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084ae:	e008      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b0:	f7fe f994 	bl	80067dc <HAL_GetTick>
 80084b4:	0002      	movs	r2, r0
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	; 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e0e3      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80084c2:	4b75      	ldr	r3, [pc, #468]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	2380      	movs	r3, #128	; 0x80
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	4013      	ands	r3, r2
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80084ce:	4b71      	ldr	r3, [pc, #452]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	23c0      	movs	r3, #192	; 0xc0
 80084d4:	039b      	lsls	r3, r3, #14
 80084d6:	4013      	ands	r3, r2
 80084d8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	23c0      	movs	r3, #192	; 0xc0
 80084e0:	039b      	lsls	r3, r3, #14
 80084e2:	4013      	ands	r3, r2
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d013      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	23c0      	movs	r3, #192	; 0xc0
 80084f0:	029b      	lsls	r3, r3, #10
 80084f2:	401a      	ands	r2, r3
 80084f4:	23c0      	movs	r3, #192	; 0xc0
 80084f6:	029b      	lsls	r3, r3, #10
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d10a      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80084fc:	4b65      	ldr	r3, [pc, #404]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	2380      	movs	r3, #128	; 0x80
 8008502:	029b      	lsls	r3, r3, #10
 8008504:	401a      	ands	r2, r3
 8008506:	2380      	movs	r3, #128	; 0x80
 8008508:	029b      	lsls	r3, r3, #10
 800850a:	429a      	cmp	r2, r3
 800850c:	d101      	bne.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e0bb      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8008512:	4b60      	ldr	r3, [pc, #384]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008516:	23c0      	movs	r3, #192	; 0xc0
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	4013      	ands	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d03b      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	23c0      	movs	r3, #192	; 0xc0
 800852a:	029b      	lsls	r3, r3, #10
 800852c:	4013      	ands	r3, r2
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	429a      	cmp	r2, r3
 8008532:	d033      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	2220      	movs	r2, #32
 800853a:	4013      	ands	r3, r2
 800853c:	d02e      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800853e:	4b55      	ldr	r3, [pc, #340]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008542:	4a56      	ldr	r2, [pc, #344]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8008544:	4013      	ands	r3, r2
 8008546:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008548:	4b52      	ldr	r3, [pc, #328]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800854a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800854c:	4b51      	ldr	r3, [pc, #324]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800854e:	2180      	movs	r1, #128	; 0x80
 8008550:	0309      	lsls	r1, r1, #12
 8008552:	430a      	orrs	r2, r1
 8008554:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008556:	4b4f      	ldr	r3, [pc, #316]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008558:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800855a:	4b4e      	ldr	r3, [pc, #312]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800855c:	4950      	ldr	r1, [pc, #320]	; (80086a0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800855e:	400a      	ands	r2, r1
 8008560:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8008562:	4b4c      	ldr	r3, [pc, #304]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	2380      	movs	r3, #128	; 0x80
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	4013      	ands	r3, r2
 8008570:	d014      	beq.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008572:	f7fe f933 	bl	80067dc <HAL_GetTick>
 8008576:	0003      	movs	r3, r0
 8008578:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800857a:	e009      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800857c:	f7fe f92e 	bl	80067dc <HAL_GetTick>
 8008580:	0002      	movs	r2, r0
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1ad3      	subs	r3, r2, r3
 8008586:	4a47      	ldr	r2, [pc, #284]	; (80086a4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d901      	bls.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800858c:	2303      	movs	r3, #3
 800858e:	e07c      	b.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008590:	4b40      	ldr	r3, [pc, #256]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4013      	ands	r3, r2
 800859a:	d0ef      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	23c0      	movs	r3, #192	; 0xc0
 80085a2:	029b      	lsls	r3, r3, #10
 80085a4:	401a      	ands	r2, r3
 80085a6:	23c0      	movs	r3, #192	; 0xc0
 80085a8:	029b      	lsls	r3, r3, #10
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d10c      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80085ae:	4b39      	ldr	r3, [pc, #228]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a3d      	ldr	r2, [pc, #244]	; (80086a8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	0019      	movs	r1, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	23c0      	movs	r3, #192	; 0xc0
 80085be:	039b      	lsls	r3, r3, #14
 80085c0:	401a      	ands	r2, r3
 80085c2:	4b34      	ldr	r3, [pc, #208]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085c4:	430a      	orrs	r2, r1
 80085c6:	601a      	str	r2, [r3, #0]
 80085c8:	4b32      	ldr	r3, [pc, #200]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085ca:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	23c0      	movs	r3, #192	; 0xc0
 80085d2:	029b      	lsls	r3, r3, #10
 80085d4:	401a      	ands	r2, r3
 80085d6:	4b2f      	ldr	r3, [pc, #188]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085d8:	430a      	orrs	r2, r1
 80085da:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80085dc:	2317      	movs	r3, #23
 80085de:	18fb      	adds	r3, r7, r3
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d105      	bne.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80085e6:	4b2b      	ldr	r3, [pc, #172]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ea:	4b2a      	ldr	r3, [pc, #168]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085ec:	492f      	ldr	r1, [pc, #188]	; (80086ac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80085ee:	400a      	ands	r2, r1
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2201      	movs	r2, #1
 80085f8:	4013      	ands	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085fc:	4b25      	ldr	r3, [pc, #148]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80085fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008600:	2203      	movs	r2, #3
 8008602:	4393      	bics	r3, r2
 8008604:	0019      	movs	r1, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689a      	ldr	r2, [r3, #8]
 800860a:	4b22      	ldr	r3, [pc, #136]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800860c:	430a      	orrs	r2, r1
 800860e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2202      	movs	r2, #2
 8008616:	4013      	ands	r3, r2
 8008618:	d009      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800861a:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800861c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861e:	220c      	movs	r2, #12
 8008620:	4393      	bics	r3, r2
 8008622:	0019      	movs	r1, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	4b1a      	ldr	r3, [pc, #104]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800862a:	430a      	orrs	r2, r1
 800862c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2204      	movs	r2, #4
 8008634:	4013      	ands	r3, r2
 8008636:	d009      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008638:	4b16      	ldr	r3, [pc, #88]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800863a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863c:	4a1c      	ldr	r2, [pc, #112]	; (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800863e:	4013      	ands	r3, r2
 8008640:	0019      	movs	r1, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	691a      	ldr	r2, [r3, #16]
 8008646:	4b13      	ldr	r3, [pc, #76]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008648:	430a      	orrs	r2, r1
 800864a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2208      	movs	r2, #8
 8008652:	4013      	ands	r3, r2
 8008654:	d009      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008656:	4b0f      	ldr	r3, [pc, #60]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800865a:	4a16      	ldr	r2, [pc, #88]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800865c:	4013      	ands	r3, r2
 800865e:	0019      	movs	r1, r3
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	4b0b      	ldr	r3, [pc, #44]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008666:	430a      	orrs	r2, r1
 8008668:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2280      	movs	r2, #128	; 0x80
 8008670:	4013      	ands	r3, r2
 8008672:	d009      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008678:	4a0f      	ldr	r2, [pc, #60]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800867a:	4013      	ands	r3, r2
 800867c:	0019      	movs	r1, r3
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	699a      	ldr	r2, [r3, #24]
 8008682:	4b04      	ldr	r3, [pc, #16]	; (8008694 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8008684:	430a      	orrs	r2, r1
 8008686:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	0018      	movs	r0, r3
 800868c:	46bd      	mov	sp, r7
 800868e:	b006      	add	sp, #24
 8008690:	bd80      	pop	{r7, pc}
 8008692:	46c0      	nop			; (mov r8, r8)
 8008694:	40021000 	.word	0x40021000
 8008698:	40007000 	.word	0x40007000
 800869c:	fffcffff 	.word	0xfffcffff
 80086a0:	fff7ffff 	.word	0xfff7ffff
 80086a4:	00001388 	.word	0x00001388
 80086a8:	ffcfffff 	.word	0xffcfffff
 80086ac:	efffffff 	.word	0xefffffff
 80086b0:	fffff3ff 	.word	0xfffff3ff
 80086b4:	ffffcfff 	.word	0xffffcfff
 80086b8:	fff3ffff 	.word	0xfff3ffff

080086bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	e08e      	b.n	80087ec <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2221      	movs	r2, #33	; 0x21
 80086d2:	5c9b      	ldrb	r3, [r3, r2]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d107      	bne.n	80086ea <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	2100      	movs	r1, #0
 80086e0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	0018      	movs	r0, r3
 80086e6:	f7fb fc57 	bl	8003f98 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2221      	movs	r2, #33	; 0x21
 80086ee:	2102      	movs	r1, #2
 80086f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	22ca      	movs	r2, #202	; 0xca
 80086f8:	625a      	str	r2, [r3, #36]	; 0x24
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2253      	movs	r2, #83	; 0x53
 8008700:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	0018      	movs	r0, r3
 8008706:	f000 faba 	bl	8008c7e <RTC_EnterInitMode>
 800870a:	1e03      	subs	r3, r0, #0
 800870c:	d009      	beq.n	8008722 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	22ff      	movs	r2, #255	; 0xff
 8008714:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2221      	movs	r2, #33	; 0x21
 800871a:	2104      	movs	r1, #4
 800871c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e064      	b.n	80087ec <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4931      	ldr	r1, [pc, #196]	; (80087f4 <HAL_RTC_Init+0x138>)
 800872e:	400a      	ands	r2, r1
 8008730:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	6899      	ldr	r1, [r3, #8]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685a      	ldr	r2, [r3, #4]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	431a      	orrs	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68d2      	ldr	r2, [r2, #12]
 8008758:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6919      	ldr	r1, [r3, #16]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	041a      	lsls	r2, r3, #16
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	430a      	orrs	r2, r1
 800876c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68da      	ldr	r2, [r3, #12]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2180      	movs	r1, #128	; 0x80
 800877a:	438a      	bics	r2, r1
 800877c:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2103      	movs	r1, #3
 800878a:	438a      	bics	r2, r1
 800878c:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2220      	movs	r2, #32
 80087ae:	4013      	ands	r3, r2
 80087b0:	d113      	bne.n	80087da <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 fa3b 	bl	8008c30 <HAL_RTC_WaitForSynchro>
 80087ba:	1e03      	subs	r3, r0, #0
 80087bc:	d00d      	beq.n	80087da <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	22ff      	movs	r2, #255	; 0xff
 80087c4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2221      	movs	r2, #33	; 0x21
 80087ca:	2104      	movs	r1, #4
 80087cc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2220      	movs	r2, #32
 80087d2:	2100      	movs	r1, #0
 80087d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e008      	b.n	80087ec <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	22ff      	movs	r2, #255	; 0xff
 80087e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2221      	movs	r2, #33	; 0x21
 80087e6:	2101      	movs	r1, #1
 80087e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80087ea:	2300      	movs	r3, #0
  }
}
 80087ec:	0018      	movs	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b002      	add	sp, #8
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	ff8fffbf 	.word	0xff8fffbf

080087f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80087f8:	b590      	push	{r4, r7, lr}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2220      	movs	r2, #32
 8008808:	5c9b      	ldrb	r3, [r3, r2]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d101      	bne.n	8008812 <HAL_RTC_SetTime+0x1a>
 800880e:	2302      	movs	r3, #2
 8008810:	e0ad      	b.n	800896e <HAL_RTC_SetTime+0x176>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2220      	movs	r2, #32
 8008816:	2101      	movs	r1, #1
 8008818:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2221      	movs	r2, #33	; 0x21
 800881e:	2102      	movs	r1, #2
 8008820:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d125      	bne.n	8008874 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2240      	movs	r2, #64	; 0x40
 8008830:	4013      	ands	r3, r2
 8008832:	d102      	bne.n	800883a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2200      	movs	r2, #0
 8008838:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	0018      	movs	r0, r3
 8008840:	f000 fa47 	bl	8008cd2 <RTC_ByteToBcd2>
 8008844:	0003      	movs	r3, r0
 8008846:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	785b      	ldrb	r3, [r3, #1]
 800884c:	0018      	movs	r0, r3
 800884e:	f000 fa40 	bl	8008cd2 <RTC_ByteToBcd2>
 8008852:	0003      	movs	r3, r0
 8008854:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008856:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	789b      	ldrb	r3, [r3, #2]
 800885c:	0018      	movs	r0, r3
 800885e:	f000 fa38 	bl	8008cd2 <RTC_ByteToBcd2>
 8008862:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008864:	0022      	movs	r2, r4
 8008866:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	78db      	ldrb	r3, [r3, #3]
 800886c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800886e:	4313      	orrs	r3, r2
 8008870:	617b      	str	r3, [r7, #20]
 8008872:	e017      	b.n	80088a4 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	2240      	movs	r2, #64	; 0x40
 800887c:	4013      	ands	r3, r2
 800887e:	d102      	bne.n	8008886 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2200      	movs	r2, #0
 8008884:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	785b      	ldrb	r3, [r3, #1]
 8008890:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008892:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008898:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	78db      	ldrb	r3, [r3, #3]
 800889e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80088a0:	4313      	orrs	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	22ca      	movs	r2, #202	; 0xca
 80088aa:	625a      	str	r2, [r3, #36]	; 0x24
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2253      	movs	r2, #83	; 0x53
 80088b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	0018      	movs	r0, r3
 80088b8:	f000 f9e1 	bl	8008c7e <RTC_EnterInitMode>
 80088bc:	1e03      	subs	r3, r0, #0
 80088be:	d00d      	beq.n	80088dc <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	22ff      	movs	r2, #255	; 0xff
 80088c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2221      	movs	r2, #33	; 0x21
 80088cc:	2104      	movs	r1, #4
 80088ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2220      	movs	r2, #32
 80088d4:	2100      	movs	r1, #0
 80088d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	e048      	b.n	800896e <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	4925      	ldr	r1, [pc, #148]	; (8008978 <HAL_RTC_SetTime+0x180>)
 80088e4:	400a      	ands	r2, r1
 80088e6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4922      	ldr	r1, [pc, #136]	; (800897c <HAL_RTC_SetTime+0x184>)
 80088f4:	400a      	ands	r2, r1
 80088f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6899      	ldr	r1, [r3, #8]
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	431a      	orrs	r2, r3
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68da      	ldr	r2, [r3, #12]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	2180      	movs	r1, #128	; 0x80
 800891c:	438a      	bics	r2, r1
 800891e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	2220      	movs	r2, #32
 8008928:	4013      	ands	r3, r2
 800892a:	d113      	bne.n	8008954 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	0018      	movs	r0, r3
 8008930:	f000 f97e 	bl	8008c30 <HAL_RTC_WaitForSynchro>
 8008934:	1e03      	subs	r3, r0, #0
 8008936:	d00d      	beq.n	8008954 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	22ff      	movs	r2, #255	; 0xff
 800893e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2221      	movs	r2, #33	; 0x21
 8008944:	2104      	movs	r1, #4
 8008946:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2220      	movs	r2, #32
 800894c:	2100      	movs	r1, #0
 800894e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	e00c      	b.n	800896e <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	22ff      	movs	r2, #255	; 0xff
 800895a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2221      	movs	r2, #33	; 0x21
 8008960:	2101      	movs	r1, #1
 8008962:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	2100      	movs	r1, #0
 800896a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800896c:	2300      	movs	r3, #0
  }
}
 800896e:	0018      	movs	r0, r3
 8008970:	46bd      	mov	sp, r7
 8008972:	b007      	add	sp, #28
 8008974:	bd90      	pop	{r4, r7, pc}
 8008976:	46c0      	nop			; (mov r8, r8)
 8008978:	007f7f7f 	.word	0x007f7f7f
 800897c:	fffbffff 	.word	0xfffbffff

08008980 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	045b      	lsls	r3, r3, #17
 800899e:	0c5a      	lsrs	r2, r3, #17
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a22      	ldr	r2, [pc, #136]	; (8008a34 <HAL_RTC_GetTime+0xb4>)
 80089ac:	4013      	ands	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	223f      	movs	r2, #63	; 0x3f
 80089b8:	4013      	ands	r3, r2
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	227f      	movs	r2, #127	; 0x7f
 80089c8:	4013      	ands	r3, r2
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	227f      	movs	r2, #127	; 0x7f
 80089d6:	4013      	ands	r3, r2
 80089d8:	b2da      	uxtb	r2, r3
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	0c1b      	lsrs	r3, r3, #16
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	2240      	movs	r2, #64	; 0x40
 80089e6:	4013      	ands	r3, r2
 80089e8:	b2da      	uxtb	r2, r3
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d11a      	bne.n	8008a2a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	0018      	movs	r0, r3
 80089fa:	f000 f992 	bl	8008d22 <RTC_Bcd2ToByte>
 80089fe:	0003      	movs	r3, r0
 8008a00:	001a      	movs	r2, r3
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	f000 f989 	bl	8008d22 <RTC_Bcd2ToByte>
 8008a10:	0003      	movs	r3, r0
 8008a12:	001a      	movs	r2, r3
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	789b      	ldrb	r3, [r3, #2]
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	f000 f980 	bl	8008d22 <RTC_Bcd2ToByte>
 8008a22:	0003      	movs	r3, r0
 8008a24:	001a      	movs	r2, r3
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	0018      	movs	r0, r3
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	b006      	add	sp, #24
 8008a32:	bd80      	pop	{r7, pc}
 8008a34:	007f7f7f 	.word	0x007f7f7f

08008a38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a38:	b590      	push	{r4, r7, lr}
 8008a3a:	b087      	sub	sp, #28
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	60f8      	str	r0, [r7, #12]
 8008a40:	60b9      	str	r1, [r7, #8]
 8008a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2220      	movs	r2, #32
 8008a48:	5c9b      	ldrb	r3, [r3, r2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_RTC_SetDate+0x1a>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e099      	b.n	8008b86 <HAL_RTC_SetDate+0x14e>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	2101      	movs	r1, #1
 8008a58:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2221      	movs	r2, #33	; 0x21
 8008a5e:	2102      	movs	r1, #2
 8008a60:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10e      	bne.n	8008a86 <HAL_RTC_SetDate+0x4e>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	001a      	movs	r2, r3
 8008a6e:	2310      	movs	r3, #16
 8008a70:	4013      	ands	r3, r2
 8008a72:	d008      	beq.n	8008a86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	2210      	movs	r2, #16
 8008a7a:	4393      	bics	r3, r2
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	330a      	adds	r3, #10
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d11c      	bne.n	8008ac6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	78db      	ldrb	r3, [r3, #3]
 8008a90:	0018      	movs	r0, r3
 8008a92:	f000 f91e 	bl	8008cd2 <RTC_ByteToBcd2>
 8008a96:	0003      	movs	r3, r0
 8008a98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	785b      	ldrb	r3, [r3, #1]
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	f000 f917 	bl	8008cd2 <RTC_ByteToBcd2>
 8008aa4:	0003      	movs	r3, r0
 8008aa6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008aa8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	789b      	ldrb	r3, [r3, #2]
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 f90f 	bl	8008cd2 <RTC_ByteToBcd2>
 8008ab4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008ab6:	0022      	movs	r2, r4
 8008ab8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	617b      	str	r3, [r7, #20]
 8008ac4:	e00e      	b.n	8008ae4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	78db      	ldrb	r3, [r3, #3]
 8008aca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	785b      	ldrb	r3, [r3, #1]
 8008ad0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ad2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008ad8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	22ca      	movs	r2, #202	; 0xca
 8008aea:	625a      	str	r2, [r3, #36]	; 0x24
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2253      	movs	r2, #83	; 0x53
 8008af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	0018      	movs	r0, r3
 8008af8:	f000 f8c1 	bl	8008c7e <RTC_EnterInitMode>
 8008afc:	1e03      	subs	r3, r0, #0
 8008afe:	d00d      	beq.n	8008b1c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	22ff      	movs	r2, #255	; 0xff
 8008b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2221      	movs	r2, #33	; 0x21
 8008b0c:	2104      	movs	r1, #4
 8008b0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	2100      	movs	r1, #0
 8008b16:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e034      	b.n	8008b86 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	491b      	ldr	r1, [pc, #108]	; (8008b90 <HAL_RTC_SetDate+0x158>)
 8008b24:	400a      	ands	r2, r1
 8008b26:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2180      	movs	r1, #128	; 0x80
 8008b34:	438a      	bics	r2, r1
 8008b36:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	4013      	ands	r3, r2
 8008b42:	d113      	bne.n	8008b6c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	0018      	movs	r0, r3
 8008b48:	f000 f872 	bl	8008c30 <HAL_RTC_WaitForSynchro>
 8008b4c:	1e03      	subs	r3, r0, #0
 8008b4e:	d00d      	beq.n	8008b6c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	22ff      	movs	r2, #255	; 0xff
 8008b56:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2221      	movs	r2, #33	; 0x21
 8008b5c:	2104      	movs	r1, #4
 8008b5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	2100      	movs	r1, #0
 8008b66:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e00c      	b.n	8008b86 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	22ff      	movs	r2, #255	; 0xff
 8008b72:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	2221      	movs	r2, #33	; 0x21
 8008b78:	2101      	movs	r1, #1
 8008b7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2220      	movs	r2, #32
 8008b80:	2100      	movs	r1, #0
 8008b82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008b84:	2300      	movs	r3, #0
  }
}
 8008b86:	0018      	movs	r0, r3
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	b007      	add	sp, #28
 8008b8c:	bd90      	pop	{r4, r7, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	00ffff3f 	.word	0x00ffff3f

08008b94 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	4a21      	ldr	r2, [pc, #132]	; (8008c2c <HAL_RTC_GetDate+0x98>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	0c1b      	lsrs	r3, r3, #16
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	0a1b      	lsrs	r3, r3, #8
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	221f      	movs	r2, #31
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	b2da      	uxtb	r2, r3
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	223f      	movs	r2, #63	; 0x3f
 8008bcc:	4013      	ands	r3, r2
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	0b5b      	lsrs	r3, r3, #13
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	2207      	movs	r2, #7
 8008bdc:	4013      	ands	r3, r2
 8008bde:	b2da      	uxtb	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d11a      	bne.n	8008c20 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	78db      	ldrb	r3, [r3, #3]
 8008bee:	0018      	movs	r0, r3
 8008bf0:	f000 f897 	bl	8008d22 <RTC_Bcd2ToByte>
 8008bf4:	0003      	movs	r3, r0
 8008bf6:	001a      	movs	r2, r3
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	0018      	movs	r0, r3
 8008c02:	f000 f88e 	bl	8008d22 <RTC_Bcd2ToByte>
 8008c06:	0003      	movs	r3, r0
 8008c08:	001a      	movs	r2, r3
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	789b      	ldrb	r3, [r3, #2]
 8008c12:	0018      	movs	r0, r3
 8008c14:	f000 f885 	bl	8008d22 <RTC_Bcd2ToByte>
 8008c18:	0003      	movs	r3, r0
 8008c1a:	001a      	movs	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	0018      	movs	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b006      	add	sp, #24
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	46c0      	nop			; (mov r8, r8)
 8008c2c:	00ffff3f 	.word	0x00ffff3f

08008c30 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68da      	ldr	r2, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	21a0      	movs	r1, #160	; 0xa0
 8008c44:	438a      	bics	r2, r1
 8008c46:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008c48:	f7fd fdc8 	bl	80067dc <HAL_GetTick>
 8008c4c:	0003      	movs	r3, r0
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c50:	e00a      	b.n	8008c68 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c52:	f7fd fdc3 	bl	80067dc <HAL_GetTick>
 8008c56:	0002      	movs	r2, r0
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	1ad2      	subs	r2, r2, r3
 8008c5c:	23fa      	movs	r3, #250	; 0xfa
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d901      	bls.n	8008c68 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e006      	b.n	8008c76 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	2220      	movs	r2, #32
 8008c70:	4013      	ands	r3, r2
 8008c72:	d0ee      	beq.n	8008c52 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	0018      	movs	r0, r3
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b004      	add	sp, #16
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	2240      	movs	r2, #64	; 0x40
 8008c8e:	4013      	ands	r3, r2
 8008c90:	d11a      	bne.n	8008cc8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2201      	movs	r2, #1
 8008c98:	4252      	negs	r2, r2
 8008c9a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008c9c:	f7fd fd9e 	bl	80067dc <HAL_GetTick>
 8008ca0:	0003      	movs	r3, r0
 8008ca2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008ca4:	e00a      	b.n	8008cbc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ca6:	f7fd fd99 	bl	80067dc <HAL_GetTick>
 8008caa:	0002      	movs	r2, r0
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	1ad2      	subs	r2, r2, r3
 8008cb0:	23fa      	movs	r3, #250	; 0xfa
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d901      	bls.n	8008cbc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e006      	b.n	8008cca <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	2240      	movs	r2, #64	; 0x40
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	d0ee      	beq.n	8008ca6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	0018      	movs	r0, r3
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	b004      	add	sp, #16
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	0002      	movs	r2, r0
 8008cda:	1dfb      	adds	r3, r7, #7
 8008cdc:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8008ce2:	230b      	movs	r3, #11
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	1dfa      	adds	r2, r7, #7
 8008ce8:	7812      	ldrb	r2, [r2, #0]
 8008cea:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8008cec:	e008      	b.n	8008d00 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8008cf4:	220b      	movs	r2, #11
 8008cf6:	18bb      	adds	r3, r7, r2
 8008cf8:	18ba      	adds	r2, r7, r2
 8008cfa:	7812      	ldrb	r2, [r2, #0]
 8008cfc:	3a0a      	subs	r2, #10
 8008cfe:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8008d00:	210b      	movs	r1, #11
 8008d02:	187b      	adds	r3, r7, r1
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	2b09      	cmp	r3, #9
 8008d08:	d8f1      	bhi.n	8008cee <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	011b      	lsls	r3, r3, #4
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	b2db      	uxtb	r3, r3
}
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	b004      	add	sp, #16
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	0002      	movs	r2, r0
 8008d2a:	1dfb      	adds	r3, r7, #7
 8008d2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8008d2e:	1dfb      	adds	r3, r7, #7
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	091b      	lsrs	r3, r3, #4
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	001a      	movs	r2, r3
 8008d38:	0013      	movs	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	189b      	adds	r3, r3, r2
 8008d3e:	005b      	lsls	r3, r3, #1
 8008d40:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	b2da      	uxtb	r2, r3
 8008d46:	1dfb      	adds	r3, r7, #7
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	210f      	movs	r1, #15
 8008d4c:	400b      	ands	r3, r1
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	18d3      	adds	r3, r2, r3
 8008d52:	b2db      	uxtb	r3, r3
}
 8008d54:	0018      	movs	r0, r3
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b004      	add	sp, #16
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e083      	b.n	8008e76 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	2382      	movs	r3, #130	; 0x82
 8008d7c:	005b      	lsls	r3, r3, #1
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d009      	beq.n	8008d96 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	61da      	str	r2, [r3, #28]
 8008d88:	e005      	b.n	8008d96 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2251      	movs	r2, #81	; 0x51
 8008da0:	5c9b      	ldrb	r3, [r3, r2]
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d107      	bne.n	8008db8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2250      	movs	r2, #80	; 0x50
 8008dac:	2100      	movs	r1, #0
 8008dae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	0018      	movs	r0, r3
 8008db4:	f7fb f908 	bl	8003fc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2251      	movs	r2, #81	; 0x51
 8008dbc:	2102      	movs	r1, #2
 8008dbe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2140      	movs	r1, #64	; 0x40
 8008dcc:	438a      	bics	r2, r1
 8008dce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	2382      	movs	r3, #130	; 0x82
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	401a      	ands	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6899      	ldr	r1, [r3, #8]
 8008dde:	2384      	movs	r3, #132	; 0x84
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	400b      	ands	r3, r1
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68d9      	ldr	r1, [r3, #12]
 8008dea:	2380      	movs	r3, #128	; 0x80
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	400b      	ands	r3, r1
 8008df0:	431a      	orrs	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	2102      	movs	r1, #2
 8008df8:	400b      	ands	r3, r1
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	2101      	movs	r1, #1
 8008e02:	400b      	ands	r3, r1
 8008e04:	431a      	orrs	r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6999      	ldr	r1, [r3, #24]
 8008e0a:	2380      	movs	r3, #128	; 0x80
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	400b      	ands	r3, r1
 8008e10:	431a      	orrs	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	2138      	movs	r1, #56	; 0x38
 8008e18:	400b      	ands	r3, r1
 8008e1a:	431a      	orrs	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	2180      	movs	r1, #128	; 0x80
 8008e22:	400b      	ands	r3, r1
 8008e24:	431a      	orrs	r2, r3
 8008e26:	0011      	movs	r1, r2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e2c:	2380      	movs	r3, #128	; 0x80
 8008e2e:	019b      	lsls	r3, r3, #6
 8008e30:	401a      	ands	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	430a      	orrs	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	0c1b      	lsrs	r3, r3, #16
 8008e40:	2204      	movs	r2, #4
 8008e42:	4013      	ands	r3, r2
 8008e44:	0019      	movs	r1, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4a:	2210      	movs	r2, #16
 8008e4c:	401a      	ands	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4907      	ldr	r1, [pc, #28]	; (8008e80 <HAL_SPI_Init+0x124>)
 8008e62:	400a      	ands	r2, r1
 8008e64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2251      	movs	r2, #81	; 0x51
 8008e70:	2101      	movs	r1, #1
 8008e72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	0018      	movs	r0, r3
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	b002      	add	sp, #8
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	fffff7ff 	.word	0xfffff7ff

08008e84 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	603b      	str	r3, [r7, #0]
 8008e90:	1dbb      	adds	r3, r7, #6
 8008e92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e94:	231f      	movs	r3, #31
 8008e96:	18fb      	adds	r3, r7, r3
 8008e98:	2200      	movs	r2, #0
 8008e9a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2250      	movs	r2, #80	; 0x50
 8008ea0:	5c9b      	ldrb	r3, [r3, r2]
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d101      	bne.n	8008eaa <HAL_SPI_Transmit+0x26>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e13e      	b.n	8009128 <HAL_SPI_Transmit+0x2a4>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2250      	movs	r2, #80	; 0x50
 8008eae:	2101      	movs	r1, #1
 8008eb0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008eb2:	f7fd fc93 	bl	80067dc <HAL_GetTick>
 8008eb6:	0003      	movs	r3, r0
 8008eb8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008eba:	2316      	movs	r3, #22
 8008ebc:	18fb      	adds	r3, r7, r3
 8008ebe:	1dba      	adds	r2, r7, #6
 8008ec0:	8812      	ldrh	r2, [r2, #0]
 8008ec2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2251      	movs	r2, #81	; 0x51
 8008ec8:	5c9b      	ldrb	r3, [r3, r2]
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d004      	beq.n	8008eda <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008ed0:	231f      	movs	r3, #31
 8008ed2:	18fb      	adds	r3, r7, r3
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ed8:	e11b      	b.n	8009112 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_SPI_Transmit+0x64>
 8008ee0:	1dbb      	adds	r3, r7, #6
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d104      	bne.n	8008ef2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008ee8:	231f      	movs	r3, #31
 8008eea:	18fb      	adds	r3, r7, r3
 8008eec:	2201      	movs	r2, #1
 8008eee:	701a      	strb	r2, [r3, #0]
    goto error;
 8008ef0:	e10f      	b.n	8009112 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2251      	movs	r2, #81	; 0x51
 8008ef6:	2103      	movs	r1, #3
 8008ef8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1dba      	adds	r2, r7, #6
 8008f0a:	8812      	ldrh	r2, [r2, #0]
 8008f0c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1dba      	adds	r2, r7, #6
 8008f12:	8812      	ldrh	r2, [r2, #0]
 8008f14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2200      	movs	r2, #0
 8008f26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d110      	bne.n	8008f62 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2140      	movs	r1, #64	; 0x40
 8008f4c:	438a      	bics	r2, r1
 8008f4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2180      	movs	r1, #128	; 0x80
 8008f5c:	01c9      	lsls	r1, r1, #7
 8008f5e:	430a      	orrs	r2, r1
 8008f60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2240      	movs	r2, #64	; 0x40
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	d007      	beq.n	8008f80 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2140      	movs	r1, #64	; 0x40
 8008f7c:	430a      	orrs	r2, r1
 8008f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	2380      	movs	r3, #128	; 0x80
 8008f86:	011b      	lsls	r3, r3, #4
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d14e      	bne.n	800902a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d004      	beq.n	8008f9e <HAL_SPI_Transmit+0x11a>
 8008f94:	2316      	movs	r3, #22
 8008f96:	18fb      	adds	r3, r7, r3
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d13f      	bne.n	800901e <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa2:	881a      	ldrh	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fae:	1c9a      	adds	r2, r3, #2
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008fc2:	e02c      	b.n	800901e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d112      	bne.n	8008ff8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	881a      	ldrh	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ff6:	e012      	b.n	800901e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ff8:	f7fd fbf0 	bl	80067dc <HAL_GetTick>
 8008ffc:	0002      	movs	r2, r0
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	683a      	ldr	r2, [r7, #0]
 8009004:	429a      	cmp	r2, r3
 8009006:	d802      	bhi.n	800900e <HAL_SPI_Transmit+0x18a>
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	3301      	adds	r3, #1
 800900c:	d102      	bne.n	8009014 <HAL_SPI_Transmit+0x190>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8009014:	231f      	movs	r3, #31
 8009016:	18fb      	adds	r3, r7, r3
 8009018:	2203      	movs	r2, #3
 800901a:	701a      	strb	r2, [r3, #0]
          goto error;
 800901c:	e079      	b.n	8009112 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009022:	b29b      	uxth	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1cd      	bne.n	8008fc4 <HAL_SPI_Transmit+0x140>
 8009028:	e04f      	b.n	80090ca <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d004      	beq.n	800903c <HAL_SPI_Transmit+0x1b8>
 8009032:	2316      	movs	r3, #22
 8009034:	18fb      	adds	r3, r7, r3
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d141      	bne.n	80090c0 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	330c      	adds	r3, #12
 8009046:	7812      	ldrb	r2, [r2, #0]
 8009048:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009058:	b29b      	uxth	r3, r3
 800905a:	3b01      	subs	r3, #1
 800905c:	b29a      	uxth	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009062:	e02d      	b.n	80090c0 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	2202      	movs	r2, #2
 800906c:	4013      	ands	r3, r2
 800906e:	2b02      	cmp	r3, #2
 8009070:	d113      	bne.n	800909a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	330c      	adds	r3, #12
 800907c:	7812      	ldrb	r2, [r2, #0]
 800907e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800908e:	b29b      	uxth	r3, r3
 8009090:	3b01      	subs	r3, #1
 8009092:	b29a      	uxth	r2, r3
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	86da      	strh	r2, [r3, #54]	; 0x36
 8009098:	e012      	b.n	80090c0 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800909a:	f7fd fb9f 	bl	80067dc <HAL_GetTick>
 800909e:	0002      	movs	r2, r0
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d802      	bhi.n	80090b0 <HAL_SPI_Transmit+0x22c>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	3301      	adds	r3, #1
 80090ae:	d102      	bne.n	80090b6 <HAL_SPI_Transmit+0x232>
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d104      	bne.n	80090c0 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80090b6:	231f      	movs	r3, #31
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	2203      	movs	r2, #3
 80090bc:	701a      	strb	r2, [r3, #0]
          goto error;
 80090be:	e028      	b.n	8009112 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1cc      	bne.n	8009064 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	6839      	ldr	r1, [r7, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	0018      	movs	r0, r3
 80090d2:	f000 fa1d 	bl	8009510 <SPI_EndRxTxTransaction>
 80090d6:	1e03      	subs	r3, r0, #0
 80090d8:	d002      	beq.n	80090e0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2220      	movs	r2, #32
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10a      	bne.n	80090fe <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80090e8:	2300      	movs	r3, #0
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	613b      	str	r3, [r7, #16]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	613b      	str	r3, [r7, #16]
 80090fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009102:	2b00      	cmp	r3, #0
 8009104:	d004      	beq.n	8009110 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8009106:	231f      	movs	r3, #31
 8009108:	18fb      	adds	r3, r7, r3
 800910a:	2201      	movs	r2, #1
 800910c:	701a      	strb	r2, [r3, #0]
 800910e:	e000      	b.n	8009112 <HAL_SPI_Transmit+0x28e>
  }

error:
 8009110:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2251      	movs	r2, #81	; 0x51
 8009116:	2101      	movs	r1, #1
 8009118:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2250      	movs	r2, #80	; 0x50
 800911e:	2100      	movs	r1, #0
 8009120:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8009122:	231f      	movs	r3, #31
 8009124:	18fb      	adds	r3, r7, r3
 8009126:	781b      	ldrb	r3, [r3, #0]
}
 8009128:	0018      	movs	r0, r3
 800912a:	46bd      	mov	sp, r7
 800912c:	b008      	add	sp, #32
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	1dbb      	adds	r3, r7, #6
 800913c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800913e:	2317      	movs	r3, #23
 8009140:	18fb      	adds	r3, r7, r3
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2250      	movs	r2, #80	; 0x50
 800914a:	5c9b      	ldrb	r3, [r3, r2]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_SPI_Transmit_DMA+0x24>
 8009150:	2302      	movs	r3, #2
 8009152:	e0a7      	b.n	80092a4 <HAL_SPI_Transmit_DMA+0x174>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2250      	movs	r2, #80	; 0x50
 8009158:	2101      	movs	r1, #1
 800915a:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2251      	movs	r2, #81	; 0x51
 8009160:	5c9b      	ldrb	r3, [r3, r2]
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b01      	cmp	r3, #1
 8009166:	d004      	beq.n	8009172 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 8009168:	2317      	movs	r3, #23
 800916a:	18fb      	adds	r3, r7, r3
 800916c:	2202      	movs	r2, #2
 800916e:	701a      	strb	r2, [r3, #0]
    goto error;
 8009170:	e091      	b.n	8009296 <HAL_SPI_Transmit_DMA+0x166>
  }

  if ((pData == NULL) || (Size == 0U))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d003      	beq.n	8009180 <HAL_SPI_Transmit_DMA+0x50>
 8009178:	1dbb      	adds	r3, r7, #6
 800917a:	881b      	ldrh	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 8009180:	2317      	movs	r3, #23
 8009182:	18fb      	adds	r3, r7, r3
 8009184:	2201      	movs	r2, #1
 8009186:	701a      	strb	r2, [r3, #0]
    goto error;
 8009188:	e085      	b.n	8009296 <HAL_SPI_Transmit_DMA+0x166>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2251      	movs	r2, #81	; 0x51
 800918e:	2103      	movs	r1, #3
 8009190:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1dba      	adds	r2, r7, #6
 80091a2:	8812      	ldrh	r2, [r2, #0]
 80091a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1dba      	adds	r2, r7, #6
 80091aa:	8812      	ldrh	r2, [r2, #0]
 80091ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2200      	movs	r2, #0
 80091b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	2380      	movs	r3, #128	; 0x80
 80091d2:	021b      	lsls	r3, r3, #8
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d110      	bne.n	80091fa <HAL_SPI_Transmit_DMA+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2140      	movs	r1, #64	; 0x40
 80091e4:	438a      	bics	r2, r1
 80091e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2180      	movs	r1, #128	; 0x80
 80091f4:	01c9      	lsls	r1, r1, #7
 80091f6:	430a      	orrs	r2, r1
 80091f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091fe:	4a2b      	ldr	r2, [pc, #172]	; (80092ac <HAL_SPI_Transmit_DMA+0x17c>)
 8009200:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009206:	4a2a      	ldr	r2, [pc, #168]	; (80092b0 <HAL_SPI_Transmit_DMA+0x180>)
 8009208:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800920e:	4a29      	ldr	r2, [pc, #164]	; (80092b4 <HAL_SPI_Transmit_DMA+0x184>)
 8009210:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009216:	2200      	movs	r2, #0
 8009218:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009222:	0019      	movs	r1, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	330c      	adds	r3, #12
 800922a:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009230:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009232:	f7fe f873 	bl	800731c <HAL_DMA_Start_IT>
 8009236:	1e03      	subs	r3, r0, #0
 8009238:	d00e      	beq.n	8009258 <HAL_SPI_Transmit_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800923e:	2210      	movs	r2, #16
 8009240:	431a      	orrs	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009246:	2317      	movs	r3, #23
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	2201      	movs	r2, #1
 800924c:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2251      	movs	r2, #81	; 0x51
 8009252:	2101      	movs	r1, #1
 8009254:	5499      	strb	r1, [r3, r2]
    goto error;
 8009256:	e01e      	b.n	8009296 <HAL_SPI_Transmit_DMA+0x166>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2240      	movs	r2, #64	; 0x40
 8009260:	4013      	ands	r3, r2
 8009262:	2b40      	cmp	r3, #64	; 0x40
 8009264:	d007      	beq.n	8009276 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2140      	movs	r1, #64	; 0x40
 8009272:	430a      	orrs	r2, r1
 8009274:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2120      	movs	r1, #32
 8009282:	430a      	orrs	r2, r1
 8009284:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2102      	movs	r1, #2
 8009292:	430a      	orrs	r2, r1
 8009294:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2250      	movs	r2, #80	; 0x50
 800929a:	2100      	movs	r1, #0
 800929c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800929e:	2317      	movs	r3, #23
 80092a0:	18fb      	adds	r3, r7, r3
 80092a2:	781b      	ldrb	r3, [r3, #0]
}
 80092a4:	0018      	movs	r0, r3
 80092a6:	46bd      	mov	sp, r7
 80092a8:	b006      	add	sp, #24
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	08009395 	.word	0x08009395
 80092b0:	080092e9 	.word	0x080092e9
 80092b4:	080093b3 	.word	0x080093b3

080092b8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80092c0:	46c0      	nop			; (mov r8, r8)
 80092c2:	46bd      	mov	sp, r7
 80092c4:	b002      	add	sp, #8
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80092d0:	46c0      	nop			; (mov r8, r8)
 80092d2:	46bd      	mov	sp, r7
 80092d4:	b002      	add	sp, #8
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80092e0:	46c0      	nop			; (mov r8, r8)
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b002      	add	sp, #8
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092f6:	f7fd fa71 	bl	80067dc <HAL_GetTick>
 80092fa:	0003      	movs	r3, r0
 80092fc:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2220      	movs	r2, #32
 8009306:	4013      	ands	r3, r2
 8009308:	2b20      	cmp	r3, #32
 800930a:	d03c      	beq.n	8009386 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2120      	movs	r1, #32
 8009318:	438a      	bics	r2, r1
 800931a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2102      	movs	r1, #2
 8009328:	438a      	bics	r2, r1
 800932a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2164      	movs	r1, #100	; 0x64
 8009332:	0018      	movs	r0, r3
 8009334:	f000 f8ec 	bl	8009510 <SPI_EndRxTxTransaction>
 8009338:	1e03      	subs	r3, r0, #0
 800933a:	d005      	beq.n	8009348 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009340:	2220      	movs	r2, #32
 8009342:	431a      	orrs	r2, r3
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10a      	bne.n	8009366 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	2251      	movs	r2, #81	; 0x51
 8009370:	2101      	movs	r1, #1
 8009372:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009378:	2b00      	cmp	r3, #0
 800937a:	d004      	beq.n	8009386 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	0018      	movs	r0, r3
 8009380:	f7ff ffaa 	bl	80092d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009384:	e003      	b.n	800938e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	0018      	movs	r0, r3
 800938a:	f7ff ff95 	bl	80092b8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800938e:	46bd      	mov	sp, r7
 8009390:	b006      	add	sp, #24
 8009392:	bd80      	pop	{r7, pc}

08009394 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	0018      	movs	r0, r3
 80093a6:	f7ff ff8f 	bl	80092c8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093aa:	46c0      	nop			; (mov r8, r8)
 80093ac:	46bd      	mov	sp, r7
 80093ae:	b004      	add	sp, #16
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b084      	sub	sp, #16
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093be:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2103      	movs	r1, #3
 80093cc:	438a      	bics	r2, r1
 80093ce:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d4:	2210      	movs	r2, #16
 80093d6:	431a      	orrs	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2251      	movs	r2, #81	; 0x51
 80093e0:	2101      	movs	r1, #1
 80093e2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	0018      	movs	r0, r3
 80093e8:	f7ff ff76 	bl	80092d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80093ec:	46c0      	nop			; (mov r8, r8)
 80093ee:	46bd      	mov	sp, r7
 80093f0:	b004      	add	sp, #16
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b088      	sub	sp, #32
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	1dfb      	adds	r3, r7, #7
 8009402:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009404:	f7fd f9ea 	bl	80067dc <HAL_GetTick>
 8009408:	0002      	movs	r2, r0
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	1a9b      	subs	r3, r3, r2
 800940e:	683a      	ldr	r2, [r7, #0]
 8009410:	18d3      	adds	r3, r2, r3
 8009412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009414:	f7fd f9e2 	bl	80067dc <HAL_GetTick>
 8009418:	0003      	movs	r3, r0
 800941a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800941c:	4b3a      	ldr	r3, [pc, #232]	; (8009508 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	015b      	lsls	r3, r3, #5
 8009422:	0d1b      	lsrs	r3, r3, #20
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	4353      	muls	r3, r2
 8009428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800942a:	e058      	b.n	80094de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	3301      	adds	r3, #1
 8009430:	d055      	beq.n	80094de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009432:	f7fd f9d3 	bl	80067dc <HAL_GetTick>
 8009436:	0002      	movs	r2, r0
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	1ad3      	subs	r3, r2, r3
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	429a      	cmp	r2, r3
 8009440:	d902      	bls.n	8009448 <SPI_WaitFlagStateUntilTimeout+0x54>
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d142      	bne.n	80094ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	21e0      	movs	r1, #224	; 0xe0
 8009454:	438a      	bics	r2, r1
 8009456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	2382      	movs	r3, #130	; 0x82
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	429a      	cmp	r2, r3
 8009462:	d113      	bne.n	800948c <SPI_WaitFlagStateUntilTimeout+0x98>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	689a      	ldr	r2, [r3, #8]
 8009468:	2380      	movs	r3, #128	; 0x80
 800946a:	021b      	lsls	r3, r3, #8
 800946c:	429a      	cmp	r2, r3
 800946e:	d005      	beq.n	800947c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	689a      	ldr	r2, [r3, #8]
 8009474:	2380      	movs	r3, #128	; 0x80
 8009476:	00db      	lsls	r3, r3, #3
 8009478:	429a      	cmp	r2, r3
 800947a:	d107      	bne.n	800948c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2140      	movs	r1, #64	; 0x40
 8009488:	438a      	bics	r2, r1
 800948a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009490:	2380      	movs	r3, #128	; 0x80
 8009492:	019b      	lsls	r3, r3, #6
 8009494:	429a      	cmp	r2, r3
 8009496:	d110      	bne.n	80094ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	491a      	ldr	r1, [pc, #104]	; (800950c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80094a4:	400a      	ands	r2, r1
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2180      	movs	r1, #128	; 0x80
 80094b4:	0189      	lsls	r1, r1, #6
 80094b6:	430a      	orrs	r2, r1
 80094b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2251      	movs	r2, #81	; 0x51
 80094be:	2101      	movs	r1, #1
 80094c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2250      	movs	r2, #80	; 0x50
 80094c6:	2100      	movs	r1, #0
 80094c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e017      	b.n	80094fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d101      	bne.n	80094d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	3b01      	subs	r3, #1
 80094dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	4013      	ands	r3, r2
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	1ad3      	subs	r3, r2, r3
 80094ec:	425a      	negs	r2, r3
 80094ee:	4153      	adcs	r3, r2
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	001a      	movs	r2, r3
 80094f4:	1dfb      	adds	r3, r7, #7
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d197      	bne.n	800942c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	0018      	movs	r0, r3
 8009500:	46bd      	mov	sp, r7
 8009502:	b008      	add	sp, #32
 8009504:	bd80      	pop	{r7, pc}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	20000010 	.word	0x20000010
 800950c:	ffffdfff 	.word	0xffffdfff

08009510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af02      	add	r7, sp, #8
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800951c:	4b1d      	ldr	r3, [pc, #116]	; (8009594 <SPI_EndRxTxTransaction+0x84>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	491d      	ldr	r1, [pc, #116]	; (8009598 <SPI_EndRxTxTransaction+0x88>)
 8009522:	0018      	movs	r0, r3
 8009524:	f7f6 fdfa 	bl	800011c <__udivsi3>
 8009528:	0003      	movs	r3, r0
 800952a:	001a      	movs	r2, r3
 800952c:	0013      	movs	r3, r2
 800952e:	015b      	lsls	r3, r3, #5
 8009530:	1a9b      	subs	r3, r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	189b      	adds	r3, r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	2382      	movs	r3, #130	; 0x82
 8009540:	005b      	lsls	r3, r3, #1
 8009542:	429a      	cmp	r2, r3
 8009544:	d112      	bne.n	800956c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	0013      	movs	r3, r2
 8009550:	2200      	movs	r2, #0
 8009552:	2180      	movs	r1, #128	; 0x80
 8009554:	f7ff ff4e 	bl	80093f4 <SPI_WaitFlagStateUntilTimeout>
 8009558:	1e03      	subs	r3, r0, #0
 800955a:	d016      	beq.n	800958a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009560:	2220      	movs	r2, #32
 8009562:	431a      	orrs	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e00f      	b.n	800958c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00a      	beq.n	8009588 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	3b01      	subs	r3, #1
 8009576:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	2280      	movs	r2, #128	; 0x80
 8009580:	4013      	ands	r3, r2
 8009582:	2b80      	cmp	r3, #128	; 0x80
 8009584:	d0f2      	beq.n	800956c <SPI_EndRxTxTransaction+0x5c>
 8009586:	e000      	b.n	800958a <SPI_EndRxTxTransaction+0x7a>
        break;
 8009588:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	0018      	movs	r0, r3
 800958e:	46bd      	mov	sp, r7
 8009590:	b006      	add	sp, #24
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000010 	.word	0x20000010
 8009598:	016e3600 	.word	0x016e3600

0800959c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	e044      	b.n	8009638 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d107      	bne.n	80095c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2274      	movs	r2, #116	; 0x74
 80095ba:	2100      	movs	r1, #0
 80095bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	0018      	movs	r0, r3
 80095c2:	f7fa fda3 	bl	800410c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2224      	movs	r2, #36	; 0x24
 80095ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2101      	movs	r1, #1
 80095d8:	438a      	bics	r2, r1
 80095da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	0018      	movs	r0, r3
 80095e0:	f000 f830 	bl	8009644 <UART_SetConfig>
 80095e4:	0003      	movs	r3, r0
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d101      	bne.n	80095ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80095ea:	2301      	movs	r3, #1
 80095ec:	e024      	b.n	8009638 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	0018      	movs	r0, r3
 80095fa:	f000 faa7 	bl	8009b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	490d      	ldr	r1, [pc, #52]	; (8009640 <HAL_UART_Init+0xa4>)
 800960a:	400a      	ands	r2, r1
 800960c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	212a      	movs	r1, #42	; 0x2a
 800961a:	438a      	bics	r2, r1
 800961c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2101      	movs	r1, #1
 800962a:	430a      	orrs	r2, r1
 800962c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	0018      	movs	r0, r3
 8009632:	f000 fb3f 	bl	8009cb4 <UART_CheckIdleState>
 8009636:	0003      	movs	r3, r0
}
 8009638:	0018      	movs	r0, r3
 800963a:	46bd      	mov	sp, r7
 800963c:	b002      	add	sp, #8
 800963e:	bd80      	pop	{r7, pc}
 8009640:	ffffb7ff 	.word	0xffffb7ff

08009644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009644:	b5b0      	push	{r4, r5, r7, lr}
 8009646:	b08e      	sub	sp, #56	; 0x38
 8009648:	af00      	add	r7, sp, #0
 800964a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800964c:	231a      	movs	r3, #26
 800964e:	2218      	movs	r2, #24
 8009650:	189b      	adds	r3, r3, r2
 8009652:	19db      	adds	r3, r3, r7
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	431a      	orrs	r2, r3
 8009662:	69fb      	ldr	r3, [r7, #28]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	431a      	orrs	r2, r3
 8009668:	69fb      	ldr	r3, [r7, #28]
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	4313      	orrs	r3, r2
 800966e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4ac6      	ldr	r2, [pc, #792]	; (8009990 <UART_SetConfig+0x34c>)
 8009678:	4013      	ands	r3, r2
 800967a:	0019      	movs	r1, r3
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009682:	430a      	orrs	r2, r1
 8009684:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	4ac1      	ldr	r2, [pc, #772]	; (8009994 <UART_SetConfig+0x350>)
 800968e:	4013      	ands	r3, r2
 8009690:	0019      	movs	r1, r3
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	430a      	orrs	r2, r1
 800969c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800969e:	69fb      	ldr	r3, [r7, #28]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4abb      	ldr	r2, [pc, #748]	; (8009998 <UART_SetConfig+0x354>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d004      	beq.n	80096b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096b4:	4313      	orrs	r3, r2
 80096b6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	4ab7      	ldr	r2, [pc, #732]	; (800999c <UART_SetConfig+0x358>)
 80096c0:	4013      	ands	r3, r2
 80096c2:	0019      	movs	r1, r3
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ca:	430a      	orrs	r2, r1
 80096cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4ab3      	ldr	r2, [pc, #716]	; (80099a0 <UART_SetConfig+0x35c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d131      	bne.n	800973c <UART_SetConfig+0xf8>
 80096d8:	4bb2      	ldr	r3, [pc, #712]	; (80099a4 <UART_SetConfig+0x360>)
 80096da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096dc:	2203      	movs	r2, #3
 80096de:	4013      	ands	r3, r2
 80096e0:	2b03      	cmp	r3, #3
 80096e2:	d01d      	beq.n	8009720 <UART_SetConfig+0xdc>
 80096e4:	d823      	bhi.n	800972e <UART_SetConfig+0xea>
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d00c      	beq.n	8009704 <UART_SetConfig+0xc0>
 80096ea:	d820      	bhi.n	800972e <UART_SetConfig+0xea>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d002      	beq.n	80096f6 <UART_SetConfig+0xb2>
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d00e      	beq.n	8009712 <UART_SetConfig+0xce>
 80096f4:	e01b      	b.n	800972e <UART_SetConfig+0xea>
 80096f6:	231b      	movs	r3, #27
 80096f8:	2218      	movs	r2, #24
 80096fa:	189b      	adds	r3, r3, r2
 80096fc:	19db      	adds	r3, r3, r7
 80096fe:	2201      	movs	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	e09c      	b.n	800983e <UART_SetConfig+0x1fa>
 8009704:	231b      	movs	r3, #27
 8009706:	2218      	movs	r2, #24
 8009708:	189b      	adds	r3, r3, r2
 800970a:	19db      	adds	r3, r3, r7
 800970c:	2202      	movs	r2, #2
 800970e:	701a      	strb	r2, [r3, #0]
 8009710:	e095      	b.n	800983e <UART_SetConfig+0x1fa>
 8009712:	231b      	movs	r3, #27
 8009714:	2218      	movs	r2, #24
 8009716:	189b      	adds	r3, r3, r2
 8009718:	19db      	adds	r3, r3, r7
 800971a:	2204      	movs	r2, #4
 800971c:	701a      	strb	r2, [r3, #0]
 800971e:	e08e      	b.n	800983e <UART_SetConfig+0x1fa>
 8009720:	231b      	movs	r3, #27
 8009722:	2218      	movs	r2, #24
 8009724:	189b      	adds	r3, r3, r2
 8009726:	19db      	adds	r3, r3, r7
 8009728:	2208      	movs	r2, #8
 800972a:	701a      	strb	r2, [r3, #0]
 800972c:	e087      	b.n	800983e <UART_SetConfig+0x1fa>
 800972e:	231b      	movs	r3, #27
 8009730:	2218      	movs	r2, #24
 8009732:	189b      	adds	r3, r3, r2
 8009734:	19db      	adds	r3, r3, r7
 8009736:	2210      	movs	r2, #16
 8009738:	701a      	strb	r2, [r3, #0]
 800973a:	e080      	b.n	800983e <UART_SetConfig+0x1fa>
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a99      	ldr	r2, [pc, #612]	; (80099a8 <UART_SetConfig+0x364>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d131      	bne.n	80097aa <UART_SetConfig+0x166>
 8009746:	4b97      	ldr	r3, [pc, #604]	; (80099a4 <UART_SetConfig+0x360>)
 8009748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974a:	220c      	movs	r2, #12
 800974c:	4013      	ands	r3, r2
 800974e:	2b0c      	cmp	r3, #12
 8009750:	d01d      	beq.n	800978e <UART_SetConfig+0x14a>
 8009752:	d823      	bhi.n	800979c <UART_SetConfig+0x158>
 8009754:	2b08      	cmp	r3, #8
 8009756:	d00c      	beq.n	8009772 <UART_SetConfig+0x12e>
 8009758:	d820      	bhi.n	800979c <UART_SetConfig+0x158>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <UART_SetConfig+0x120>
 800975e:	2b04      	cmp	r3, #4
 8009760:	d00e      	beq.n	8009780 <UART_SetConfig+0x13c>
 8009762:	e01b      	b.n	800979c <UART_SetConfig+0x158>
 8009764:	231b      	movs	r3, #27
 8009766:	2218      	movs	r2, #24
 8009768:	189b      	adds	r3, r3, r2
 800976a:	19db      	adds	r3, r3, r7
 800976c:	2200      	movs	r2, #0
 800976e:	701a      	strb	r2, [r3, #0]
 8009770:	e065      	b.n	800983e <UART_SetConfig+0x1fa>
 8009772:	231b      	movs	r3, #27
 8009774:	2218      	movs	r2, #24
 8009776:	189b      	adds	r3, r3, r2
 8009778:	19db      	adds	r3, r3, r7
 800977a:	2202      	movs	r2, #2
 800977c:	701a      	strb	r2, [r3, #0]
 800977e:	e05e      	b.n	800983e <UART_SetConfig+0x1fa>
 8009780:	231b      	movs	r3, #27
 8009782:	2218      	movs	r2, #24
 8009784:	189b      	adds	r3, r3, r2
 8009786:	19db      	adds	r3, r3, r7
 8009788:	2204      	movs	r2, #4
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	e057      	b.n	800983e <UART_SetConfig+0x1fa>
 800978e:	231b      	movs	r3, #27
 8009790:	2218      	movs	r2, #24
 8009792:	189b      	adds	r3, r3, r2
 8009794:	19db      	adds	r3, r3, r7
 8009796:	2208      	movs	r2, #8
 8009798:	701a      	strb	r2, [r3, #0]
 800979a:	e050      	b.n	800983e <UART_SetConfig+0x1fa>
 800979c:	231b      	movs	r3, #27
 800979e:	2218      	movs	r2, #24
 80097a0:	189b      	adds	r3, r3, r2
 80097a2:	19db      	adds	r3, r3, r7
 80097a4:	2210      	movs	r2, #16
 80097a6:	701a      	strb	r2, [r3, #0]
 80097a8:	e049      	b.n	800983e <UART_SetConfig+0x1fa>
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a7a      	ldr	r2, [pc, #488]	; (8009998 <UART_SetConfig+0x354>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d13e      	bne.n	8009832 <UART_SetConfig+0x1ee>
 80097b4:	4b7b      	ldr	r3, [pc, #492]	; (80099a4 <UART_SetConfig+0x360>)
 80097b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097b8:	23c0      	movs	r3, #192	; 0xc0
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	4013      	ands	r3, r2
 80097be:	22c0      	movs	r2, #192	; 0xc0
 80097c0:	0112      	lsls	r2, r2, #4
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d027      	beq.n	8009816 <UART_SetConfig+0x1d2>
 80097c6:	22c0      	movs	r2, #192	; 0xc0
 80097c8:	0112      	lsls	r2, r2, #4
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d82a      	bhi.n	8009824 <UART_SetConfig+0x1e0>
 80097ce:	2280      	movs	r2, #128	; 0x80
 80097d0:	0112      	lsls	r2, r2, #4
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d011      	beq.n	80097fa <UART_SetConfig+0x1b6>
 80097d6:	2280      	movs	r2, #128	; 0x80
 80097d8:	0112      	lsls	r2, r2, #4
 80097da:	4293      	cmp	r3, r2
 80097dc:	d822      	bhi.n	8009824 <UART_SetConfig+0x1e0>
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d004      	beq.n	80097ec <UART_SetConfig+0x1a8>
 80097e2:	2280      	movs	r2, #128	; 0x80
 80097e4:	00d2      	lsls	r2, r2, #3
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d00e      	beq.n	8009808 <UART_SetConfig+0x1c4>
 80097ea:	e01b      	b.n	8009824 <UART_SetConfig+0x1e0>
 80097ec:	231b      	movs	r3, #27
 80097ee:	2218      	movs	r2, #24
 80097f0:	189b      	adds	r3, r3, r2
 80097f2:	19db      	adds	r3, r3, r7
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	e021      	b.n	800983e <UART_SetConfig+0x1fa>
 80097fa:	231b      	movs	r3, #27
 80097fc:	2218      	movs	r2, #24
 80097fe:	189b      	adds	r3, r3, r2
 8009800:	19db      	adds	r3, r3, r7
 8009802:	2202      	movs	r2, #2
 8009804:	701a      	strb	r2, [r3, #0]
 8009806:	e01a      	b.n	800983e <UART_SetConfig+0x1fa>
 8009808:	231b      	movs	r3, #27
 800980a:	2218      	movs	r2, #24
 800980c:	189b      	adds	r3, r3, r2
 800980e:	19db      	adds	r3, r3, r7
 8009810:	2204      	movs	r2, #4
 8009812:	701a      	strb	r2, [r3, #0]
 8009814:	e013      	b.n	800983e <UART_SetConfig+0x1fa>
 8009816:	231b      	movs	r3, #27
 8009818:	2218      	movs	r2, #24
 800981a:	189b      	adds	r3, r3, r2
 800981c:	19db      	adds	r3, r3, r7
 800981e:	2208      	movs	r2, #8
 8009820:	701a      	strb	r2, [r3, #0]
 8009822:	e00c      	b.n	800983e <UART_SetConfig+0x1fa>
 8009824:	231b      	movs	r3, #27
 8009826:	2218      	movs	r2, #24
 8009828:	189b      	adds	r3, r3, r2
 800982a:	19db      	adds	r3, r3, r7
 800982c:	2210      	movs	r2, #16
 800982e:	701a      	strb	r2, [r3, #0]
 8009830:	e005      	b.n	800983e <UART_SetConfig+0x1fa>
 8009832:	231b      	movs	r3, #27
 8009834:	2218      	movs	r2, #24
 8009836:	189b      	adds	r3, r3, r2
 8009838:	19db      	adds	r3, r3, r7
 800983a:	2210      	movs	r2, #16
 800983c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a55      	ldr	r2, [pc, #340]	; (8009998 <UART_SetConfig+0x354>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d000      	beq.n	800984a <UART_SetConfig+0x206>
 8009848:	e084      	b.n	8009954 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800984a:	231b      	movs	r3, #27
 800984c:	2218      	movs	r2, #24
 800984e:	189b      	adds	r3, r3, r2
 8009850:	19db      	adds	r3, r3, r7
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	2b08      	cmp	r3, #8
 8009856:	d01d      	beq.n	8009894 <UART_SetConfig+0x250>
 8009858:	dc20      	bgt.n	800989c <UART_SetConfig+0x258>
 800985a:	2b04      	cmp	r3, #4
 800985c:	d015      	beq.n	800988a <UART_SetConfig+0x246>
 800985e:	dc1d      	bgt.n	800989c <UART_SetConfig+0x258>
 8009860:	2b00      	cmp	r3, #0
 8009862:	d002      	beq.n	800986a <UART_SetConfig+0x226>
 8009864:	2b02      	cmp	r3, #2
 8009866:	d005      	beq.n	8009874 <UART_SetConfig+0x230>
 8009868:	e018      	b.n	800989c <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800986a:	f7fe fdc5 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800986e:	0003      	movs	r3, r0
 8009870:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009872:	e01c      	b.n	80098ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009874:	4b4b      	ldr	r3, [pc, #300]	; (80099a4 <UART_SetConfig+0x360>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2210      	movs	r2, #16
 800987a:	4013      	ands	r3, r2
 800987c:	d002      	beq.n	8009884 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800987e:	4b4b      	ldr	r3, [pc, #300]	; (80099ac <UART_SetConfig+0x368>)
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009882:	e014      	b.n	80098ae <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8009884:	4b4a      	ldr	r3, [pc, #296]	; (80099b0 <UART_SetConfig+0x36c>)
 8009886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009888:	e011      	b.n	80098ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800988a:	f7fe fd05 	bl	8008298 <HAL_RCC_GetSysClockFreq>
 800988e:	0003      	movs	r3, r0
 8009890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009892:	e00c      	b.n	80098ae <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009894:	2380      	movs	r3, #128	; 0x80
 8009896:	021b      	lsls	r3, r3, #8
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800989a:	e008      	b.n	80098ae <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 800989c:	2300      	movs	r3, #0
 800989e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80098a0:	231a      	movs	r3, #26
 80098a2:	2218      	movs	r2, #24
 80098a4:	189b      	adds	r3, r3, r2
 80098a6:	19db      	adds	r3, r3, r7
 80098a8:	2201      	movs	r2, #1
 80098aa:	701a      	strb	r2, [r3, #0]
        break;
 80098ac:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d100      	bne.n	80098b6 <UART_SetConfig+0x272>
 80098b4:	e133      	b.n	8009b1e <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	0013      	movs	r3, r2
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	189b      	adds	r3, r3, r2
 80098c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d305      	bcc.n	80098d2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80098cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d906      	bls.n	80098e0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80098d2:	231a      	movs	r3, #26
 80098d4:	2218      	movs	r2, #24
 80098d6:	189b      	adds	r3, r3, r2
 80098d8:	19db      	adds	r3, r3, r7
 80098da:	2201      	movs	r2, #1
 80098dc:	701a      	strb	r2, [r3, #0]
 80098de:	e11e      	b.n	8009b1e <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]
 80098e8:	6939      	ldr	r1, [r7, #16]
 80098ea:	697a      	ldr	r2, [r7, #20]
 80098ec:	000b      	movs	r3, r1
 80098ee:	0e1b      	lsrs	r3, r3, #24
 80098f0:	0010      	movs	r0, r2
 80098f2:	0205      	lsls	r5, r0, #8
 80098f4:	431d      	orrs	r5, r3
 80098f6:	000b      	movs	r3, r1
 80098f8:	021c      	lsls	r4, r3, #8
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	085b      	lsrs	r3, r3, #1
 8009900:	60bb      	str	r3, [r7, #8]
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	68b8      	ldr	r0, [r7, #8]
 8009908:	68f9      	ldr	r1, [r7, #12]
 800990a:	1900      	adds	r0, r0, r4
 800990c:	4169      	adcs	r1, r5
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	603b      	str	r3, [r7, #0]
 8009914:	2300      	movs	r3, #0
 8009916:	607b      	str	r3, [r7, #4]
 8009918:	683a      	ldr	r2, [r7, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f7f6 fdb2 	bl	8000484 <__aeabi_uldivmod>
 8009920:	0002      	movs	r2, r0
 8009922:	000b      	movs	r3, r1
 8009924:	0013      	movs	r3, r2
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800992a:	23c0      	movs	r3, #192	; 0xc0
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	429a      	cmp	r2, r3
 8009930:	d309      	bcc.n	8009946 <UART_SetConfig+0x302>
 8009932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	035b      	lsls	r3, r3, #13
 8009938:	429a      	cmp	r2, r3
 800993a:	d204      	bcs.n	8009946 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009942:	60da      	str	r2, [r3, #12]
 8009944:	e0eb      	b.n	8009b1e <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8009946:	231a      	movs	r3, #26
 8009948:	2218      	movs	r2, #24
 800994a:	189b      	adds	r3, r3, r2
 800994c:	19db      	adds	r3, r3, r7
 800994e:	2201      	movs	r2, #1
 8009950:	701a      	strb	r2, [r3, #0]
 8009952:	e0e4      	b.n	8009b1e <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	69da      	ldr	r2, [r3, #28]
 8009958:	2380      	movs	r3, #128	; 0x80
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	429a      	cmp	r2, r3
 800995e:	d000      	beq.n	8009962 <UART_SetConfig+0x31e>
 8009960:	e086      	b.n	8009a70 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8009962:	231b      	movs	r3, #27
 8009964:	2218      	movs	r2, #24
 8009966:	189b      	adds	r3, r3, r2
 8009968:	19db      	adds	r3, r3, r7
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b08      	cmp	r3, #8
 800996e:	d837      	bhi.n	80099e0 <UART_SetConfig+0x39c>
 8009970:	009a      	lsls	r2, r3, #2
 8009972:	4b10      	ldr	r3, [pc, #64]	; (80099b4 <UART_SetConfig+0x370>)
 8009974:	18d3      	adds	r3, r2, r3
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800997a:	f7fe fd3d 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 800997e:	0003      	movs	r3, r0
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009982:	e036      	b.n	80099f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009984:	f7fe fd4e 	bl	8008424 <HAL_RCC_GetPCLK2Freq>
 8009988:	0003      	movs	r3, r0
 800998a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800998c:	e031      	b.n	80099f2 <UART_SetConfig+0x3ae>
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	efff69f3 	.word	0xefff69f3
 8009994:	ffffcfff 	.word	0xffffcfff
 8009998:	40004800 	.word	0x40004800
 800999c:	fffff4ff 	.word	0xfffff4ff
 80099a0:	40013800 	.word	0x40013800
 80099a4:	40021000 	.word	0x40021000
 80099a8:	40004400 	.word	0x40004400
 80099ac:	003d0900 	.word	0x003d0900
 80099b0:	00f42400 	.word	0x00f42400
 80099b4:	0800e2e8 	.word	0x0800e2e8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099b8:	4b60      	ldr	r3, [pc, #384]	; (8009b3c <UART_SetConfig+0x4f8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2210      	movs	r2, #16
 80099be:	4013      	ands	r3, r2
 80099c0:	d002      	beq.n	80099c8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80099c2:	4b5f      	ldr	r3, [pc, #380]	; (8009b40 <UART_SetConfig+0x4fc>)
 80099c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099c6:	e014      	b.n	80099f2 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80099c8:	4b5e      	ldr	r3, [pc, #376]	; (8009b44 <UART_SetConfig+0x500>)
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099cc:	e011      	b.n	80099f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ce:	f7fe fc63 	bl	8008298 <HAL_RCC_GetSysClockFreq>
 80099d2:	0003      	movs	r3, r0
 80099d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099d6:	e00c      	b.n	80099f2 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	021b      	lsls	r3, r3, #8
 80099dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80099de:	e008      	b.n	80099f2 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80099e4:	231a      	movs	r3, #26
 80099e6:	2218      	movs	r2, #24
 80099e8:	189b      	adds	r3, r3, r2
 80099ea:	19db      	adds	r3, r3, r7
 80099ec:	2201      	movs	r2, #1
 80099ee:	701a      	strb	r2, [r3, #0]
        break;
 80099f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d100      	bne.n	80099fa <UART_SetConfig+0x3b6>
 80099f8:	e091      	b.n	8009b1e <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80099fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fc:	005a      	lsls	r2, r3, #1
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	18d2      	adds	r2, r2, r3
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	0019      	movs	r1, r3
 8009a0c:	0010      	movs	r0, r2
 8009a0e:	f7f6 fb85 	bl	800011c <__udivsi3>
 8009a12:	0003      	movs	r3, r0
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	2b0f      	cmp	r3, #15
 8009a1c:	d921      	bls.n	8009a62 <UART_SetConfig+0x41e>
 8009a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	025b      	lsls	r3, r3, #9
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d21c      	bcs.n	8009a62 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	200e      	movs	r0, #14
 8009a2e:	2418      	movs	r4, #24
 8009a30:	1903      	adds	r3, r0, r4
 8009a32:	19db      	adds	r3, r3, r7
 8009a34:	210f      	movs	r1, #15
 8009a36:	438a      	bics	r2, r1
 8009a38:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	085b      	lsrs	r3, r3, #1
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	2207      	movs	r2, #7
 8009a42:	4013      	ands	r3, r2
 8009a44:	b299      	uxth	r1, r3
 8009a46:	1903      	adds	r3, r0, r4
 8009a48:	19db      	adds	r3, r3, r7
 8009a4a:	1902      	adds	r2, r0, r4
 8009a4c:	19d2      	adds	r2, r2, r7
 8009a4e:	8812      	ldrh	r2, [r2, #0]
 8009a50:	430a      	orrs	r2, r1
 8009a52:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	1902      	adds	r2, r0, r4
 8009a5a:	19d2      	adds	r2, r2, r7
 8009a5c:	8812      	ldrh	r2, [r2, #0]
 8009a5e:	60da      	str	r2, [r3, #12]
 8009a60:	e05d      	b.n	8009b1e <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8009a62:	231a      	movs	r3, #26
 8009a64:	2218      	movs	r2, #24
 8009a66:	189b      	adds	r3, r3, r2
 8009a68:	19db      	adds	r3, r3, r7
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e056      	b.n	8009b1e <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009a70:	231b      	movs	r3, #27
 8009a72:	2218      	movs	r2, #24
 8009a74:	189b      	adds	r3, r3, r2
 8009a76:	19db      	adds	r3, r3, r7
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b08      	cmp	r3, #8
 8009a7c:	d822      	bhi.n	8009ac4 <UART_SetConfig+0x480>
 8009a7e:	009a      	lsls	r2, r3, #2
 8009a80:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <UART_SetConfig+0x504>)
 8009a82:	18d3      	adds	r3, r2, r3
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a88:	f7fe fcb6 	bl	80083f8 <HAL_RCC_GetPCLK1Freq>
 8009a8c:	0003      	movs	r3, r0
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a90:	e021      	b.n	8009ad6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a92:	f7fe fcc7 	bl	8008424 <HAL_RCC_GetPCLK2Freq>
 8009a96:	0003      	movs	r3, r0
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009a9a:	e01c      	b.n	8009ad6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a9c:	4b27      	ldr	r3, [pc, #156]	; (8009b3c <UART_SetConfig+0x4f8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	2210      	movs	r2, #16
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	d002      	beq.n	8009aac <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8009aa6:	4b26      	ldr	r3, [pc, #152]	; (8009b40 <UART_SetConfig+0x4fc>)
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009aaa:	e014      	b.n	8009ad6 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8009aac:	4b25      	ldr	r3, [pc, #148]	; (8009b44 <UART_SetConfig+0x500>)
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ab0:	e011      	b.n	8009ad6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ab2:	f7fe fbf1 	bl	8008298 <HAL_RCC_GetSysClockFreq>
 8009ab6:	0003      	movs	r3, r0
 8009ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009aba:	e00c      	b.n	8009ad6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009abc:	2380      	movs	r3, #128	; 0x80
 8009abe:	021b      	lsls	r3, r3, #8
 8009ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ac2:	e008      	b.n	8009ad6 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ac8:	231a      	movs	r3, #26
 8009aca:	2218      	movs	r2, #24
 8009acc:	189b      	adds	r3, r3, r2
 8009ace:	19db      	adds	r3, r3, r7
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	701a      	strb	r2, [r3, #0]
        break;
 8009ad4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d020      	beq.n	8009b1e <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	085a      	lsrs	r2, r3, #1
 8009ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae4:	18d2      	adds	r2, r2, r3
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	0019      	movs	r1, r3
 8009aec:	0010      	movs	r0, r2
 8009aee:	f7f6 fb15 	bl	800011c <__udivsi3>
 8009af2:	0003      	movs	r3, r0
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	2b0f      	cmp	r3, #15
 8009afc:	d909      	bls.n	8009b12 <UART_SetConfig+0x4ce>
 8009afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	025b      	lsls	r3, r3, #9
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d204      	bcs.n	8009b12 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b0e:	60da      	str	r2, [r3, #12]
 8009b10:	e005      	b.n	8009b1e <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8009b12:	231a      	movs	r3, #26
 8009b14:	2218      	movs	r2, #24
 8009b16:	189b      	adds	r3, r3, r2
 8009b18:	19db      	adds	r3, r3, r7
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	2200      	movs	r2, #0
 8009b22:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	2200      	movs	r2, #0
 8009b28:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009b2a:	231a      	movs	r3, #26
 8009b2c:	2218      	movs	r2, #24
 8009b2e:	189b      	adds	r3, r3, r2
 8009b30:	19db      	adds	r3, r3, r7
 8009b32:	781b      	ldrb	r3, [r3, #0]
}
 8009b34:	0018      	movs	r0, r3
 8009b36:	46bd      	mov	sp, r7
 8009b38:	b00e      	add	sp, #56	; 0x38
 8009b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	003d0900 	.word	0x003d0900
 8009b44:	00f42400 	.word	0x00f42400
 8009b48:	0800e30c 	.word	0x0800e30c

08009b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	2201      	movs	r2, #1
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	d00b      	beq.n	8009b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	4a4a      	ldr	r2, [pc, #296]	; (8009c90 <UART_AdvFeatureConfig+0x144>)
 8009b66:	4013      	ands	r3, r2
 8009b68:	0019      	movs	r1, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	430a      	orrs	r2, r1
 8009b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d00b      	beq.n	8009b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	4a43      	ldr	r2, [pc, #268]	; (8009c94 <UART_AdvFeatureConfig+0x148>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	0019      	movs	r1, r3
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	430a      	orrs	r2, r1
 8009b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2204      	movs	r2, #4
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	d00b      	beq.n	8009bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	4a3b      	ldr	r2, [pc, #236]	; (8009c98 <UART_AdvFeatureConfig+0x14c>)
 8009baa:	4013      	ands	r3, r2
 8009bac:	0019      	movs	r1, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbe:	2208      	movs	r2, #8
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	d00b      	beq.n	8009bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	4a34      	ldr	r2, [pc, #208]	; (8009c9c <UART_AdvFeatureConfig+0x150>)
 8009bcc:	4013      	ands	r3, r2
 8009bce:	0019      	movs	r1, r3
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be0:	2210      	movs	r2, #16
 8009be2:	4013      	ands	r3, r2
 8009be4:	d00b      	beq.n	8009bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	4a2c      	ldr	r2, [pc, #176]	; (8009ca0 <UART_AdvFeatureConfig+0x154>)
 8009bee:	4013      	ands	r3, r2
 8009bf0:	0019      	movs	r1, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	430a      	orrs	r2, r1
 8009bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c02:	2220      	movs	r2, #32
 8009c04:	4013      	ands	r3, r2
 8009c06:	d00b      	beq.n	8009c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	4a25      	ldr	r2, [pc, #148]	; (8009ca4 <UART_AdvFeatureConfig+0x158>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	0019      	movs	r1, r3
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c24:	2240      	movs	r2, #64	; 0x40
 8009c26:	4013      	ands	r3, r2
 8009c28:	d01d      	beq.n	8009c66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	4a1d      	ldr	r2, [pc, #116]	; (8009ca8 <UART_AdvFeatureConfig+0x15c>)
 8009c32:	4013      	ands	r3, r2
 8009c34:	0019      	movs	r1, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c46:	2380      	movs	r3, #128	; 0x80
 8009c48:	035b      	lsls	r3, r3, #13
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d10b      	bne.n	8009c66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	4a15      	ldr	r2, [pc, #84]	; (8009cac <UART_AdvFeatureConfig+0x160>)
 8009c56:	4013      	ands	r3, r2
 8009c58:	0019      	movs	r1, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c6a:	2280      	movs	r2, #128	; 0x80
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	d00b      	beq.n	8009c88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	4a0e      	ldr	r2, [pc, #56]	; (8009cb0 <UART_AdvFeatureConfig+0x164>)
 8009c78:	4013      	ands	r3, r2
 8009c7a:	0019      	movs	r1, r3
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	605a      	str	r2, [r3, #4]
  }
}
 8009c88:	46c0      	nop			; (mov r8, r8)
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	b002      	add	sp, #8
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	fffdffff 	.word	0xfffdffff
 8009c94:	fffeffff 	.word	0xfffeffff
 8009c98:	fffbffff 	.word	0xfffbffff
 8009c9c:	ffff7fff 	.word	0xffff7fff
 8009ca0:	ffffefff 	.word	0xffffefff
 8009ca4:	ffffdfff 	.word	0xffffdfff
 8009ca8:	ffefffff 	.word	0xffefffff
 8009cac:	ff9fffff 	.word	0xff9fffff
 8009cb0:	fff7ffff 	.word	0xfff7ffff

08009cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2280      	movs	r2, #128	; 0x80
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cc4:	f7fc fd8a 	bl	80067dc <HAL_GetTick>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2208      	movs	r2, #8
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d10c      	bne.n	8009cf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2280      	movs	r2, #128	; 0x80
 8009cde:	0391      	lsls	r1, r2, #14
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	4a17      	ldr	r2, [pc, #92]	; (8009d40 <UART_CheckIdleState+0x8c>)
 8009ce4:	9200      	str	r2, [sp, #0]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f000 f82c 	bl	8009d44 <UART_WaitOnFlagUntilTimeout>
 8009cec:	1e03      	subs	r3, r0, #0
 8009cee:	d001      	beq.n	8009cf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	e021      	b.n	8009d38 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2204      	movs	r2, #4
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d10c      	bne.n	8009d1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2280      	movs	r2, #128	; 0x80
 8009d06:	03d1      	lsls	r1, r2, #15
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	4a0d      	ldr	r2, [pc, #52]	; (8009d40 <UART_CheckIdleState+0x8c>)
 8009d0c:	9200      	str	r2, [sp, #0]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f000 f818 	bl	8009d44 <UART_WaitOnFlagUntilTimeout>
 8009d14:	1e03      	subs	r3, r0, #0
 8009d16:	d001      	beq.n	8009d1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e00d      	b.n	8009d38 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2220      	movs	r2, #32
 8009d26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2274      	movs	r2, #116	; 0x74
 8009d32:	2100      	movs	r1, #0
 8009d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	0018      	movs	r0, r3
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	b004      	add	sp, #16
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	01ffffff 	.word	0x01ffffff

08009d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b094      	sub	sp, #80	; 0x50
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	1dfb      	adds	r3, r7, #7
 8009d52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d54:	e0a3      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d58:	3301      	adds	r3, #1
 8009d5a:	d100      	bne.n	8009d5e <UART_WaitOnFlagUntilTimeout+0x1a>
 8009d5c:	e09f      	b.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d5e:	f7fc fd3d 	bl	80067dc <HAL_GetTick>
 8009d62:	0002      	movs	r2, r0
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d302      	bcc.n	8009d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8009d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d13d      	bne.n	8009df0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d74:	f3ef 8310 	mrs	r3, PRIMASK
 8009d78:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8009d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8009d7e:	2301      	movs	r3, #1
 8009d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d84:	f383 8810 	msr	PRIMASK, r3
}
 8009d88:	46c0      	nop			; (mov r8, r8)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	494c      	ldr	r1, [pc, #304]	; (8009ec8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8009d96:	400a      	ands	r2, r1
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d9c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	f383 8810 	msr	PRIMASK, r3
}
 8009da4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da6:	f3ef 8310 	mrs	r3, PRIMASK
 8009daa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8009dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dae:	643b      	str	r3, [r7, #64]	; 0x40
 8009db0:	2301      	movs	r3, #1
 8009db2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db6:	f383 8810 	msr	PRIMASK, r3
}
 8009dba:	46c0      	nop			; (mov r8, r8)
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	689a      	ldr	r2, [r3, #8]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	438a      	bics	r2, r1
 8009dca:	609a      	str	r2, [r3, #8]
 8009dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dd2:	f383 8810 	msr	PRIMASK, r3
}
 8009dd6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2220      	movs	r2, #32
 8009ddc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2220      	movs	r2, #32
 8009de2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	2274      	movs	r2, #116	; 0x74
 8009de8:	2100      	movs	r1, #0
 8009dea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009dec:	2303      	movs	r3, #3
 8009dee:	e067      	b.n	8009ec0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2204      	movs	r2, #4
 8009df8:	4013      	ands	r3, r2
 8009dfa:	d050      	beq.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	69da      	ldr	r2, [r3, #28]
 8009e02:	2380      	movs	r3, #128	; 0x80
 8009e04:	011b      	lsls	r3, r3, #4
 8009e06:	401a      	ands	r2, r3
 8009e08:	2380      	movs	r3, #128	; 0x80
 8009e0a:	011b      	lsls	r3, r3, #4
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d146      	bne.n	8009e9e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2280      	movs	r2, #128	; 0x80
 8009e16:	0112      	lsls	r2, r2, #4
 8009e18:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8009e1e:	613b      	str	r3, [r7, #16]
  return(result);
 8009e20:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e24:	2301      	movs	r3, #1
 8009e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	f383 8810 	msr	PRIMASK, r3
}
 8009e2e:	46c0      	nop			; (mov r8, r8)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4923      	ldr	r1, [pc, #140]	; (8009ec8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8009e3c:	400a      	ands	r2, r1
 8009e3e:	601a      	str	r2, [r3, #0]
 8009e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	f383 8810 	msr	PRIMASK, r3
}
 8009e4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8009e52:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e54:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e56:	2301      	movs	r3, #1
 8009e58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	f383 8810 	msr	PRIMASK, r3
}
 8009e60:	46c0      	nop			; (mov r8, r8)
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	438a      	bics	r2, r1
 8009e70:	609a      	str	r2, [r3, #8]
 8009e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	f383 8810 	msr	PRIMASK, r3
}
 8009e7c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2220      	movs	r2, #32
 8009e82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2220      	movs	r2, #32
 8009e88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2280      	movs	r2, #128	; 0x80
 8009e8e:	2120      	movs	r1, #32
 8009e90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2274      	movs	r2, #116	; 0x74
 8009e96:	2100      	movs	r1, #0
 8009e98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e010      	b.n	8009ec0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	68ba      	ldr	r2, [r7, #8]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	425a      	negs	r2, r3
 8009eae:	4153      	adcs	r3, r2
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	001a      	movs	r2, r3
 8009eb4:	1dfb      	adds	r3, r7, #7
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d100      	bne.n	8009ebe <UART_WaitOnFlagUntilTimeout+0x17a>
 8009ebc:	e74b      	b.n	8009d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	0018      	movs	r0, r3
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	b014      	add	sp, #80	; 0x50
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	fffffe5f 	.word	0xfffffe5f

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	46c0      	nop			; (mov r8, r8)
 8009ed4:	2000001c 	.word	0x2000001c

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	2600      	movs	r6, #0
 8009edc:	4d0c      	ldr	r5, [pc, #48]	; (8009f10 <__libc_init_array+0x38>)
 8009ede:	4c0d      	ldr	r4, [pc, #52]	; (8009f14 <__libc_init_array+0x3c>)
 8009ee0:	1b64      	subs	r4, r4, r5
 8009ee2:	10a4      	asrs	r4, r4, #2
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	2600      	movs	r6, #0
 8009eea:	f001 fcd9 	bl	800b8a0 <_init>
 8009eee:	4d0a      	ldr	r5, [pc, #40]	; (8009f18 <__libc_init_array+0x40>)
 8009ef0:	4c0a      	ldr	r4, [pc, #40]	; (8009f1c <__libc_init_array+0x44>)
 8009ef2:	1b64      	subs	r4, r4, r5
 8009ef4:	10a4      	asrs	r4, r4, #2
 8009ef6:	42a6      	cmp	r6, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	00b3      	lsls	r3, r6, #2
 8009efe:	58eb      	ldr	r3, [r5, r3]
 8009f00:	4798      	blx	r3
 8009f02:	3601      	adds	r6, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	00b3      	lsls	r3, r6, #2
 8009f08:	58eb      	ldr	r3, [r5, r3]
 8009f0a:	4798      	blx	r3
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	0800e5a8 	.word	0x0800e5a8
 8009f14:	0800e5a8 	.word	0x0800e5a8
 8009f18:	0800e5a8 	.word	0x0800e5a8
 8009f1c:	0800e5ac 	.word	0x0800e5ac

08009f20 <memset>:
 8009f20:	0003      	movs	r3, r0
 8009f22:	1882      	adds	r2, r0, r2
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d100      	bne.n	8009f2a <memset+0xa>
 8009f28:	4770      	bx	lr
 8009f2a:	7019      	strb	r1, [r3, #0]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	e7f9      	b.n	8009f24 <memset+0x4>

08009f30 <_free_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	0005      	movs	r5, r0
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d010      	beq.n	8009f5a <_free_r+0x2a>
 8009f38:	1f0c      	subs	r4, r1, #4
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da00      	bge.n	8009f42 <_free_r+0x12>
 8009f40:	18e4      	adds	r4, r4, r3
 8009f42:	0028      	movs	r0, r5
 8009f44:	f000 f90a 	bl	800a15c <__malloc_lock>
 8009f48:	4a1d      	ldr	r2, [pc, #116]	; (8009fc0 <_free_r+0x90>)
 8009f4a:	6813      	ldr	r3, [r2, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d105      	bne.n	8009f5c <_free_r+0x2c>
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	6014      	str	r4, [r2, #0]
 8009f54:	0028      	movs	r0, r5
 8009f56:	f000 f909 	bl	800a16c <__malloc_unlock>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	d908      	bls.n	8009f72 <_free_r+0x42>
 8009f60:	6821      	ldr	r1, [r4, #0]
 8009f62:	1860      	adds	r0, r4, r1
 8009f64:	4283      	cmp	r3, r0
 8009f66:	d1f3      	bne.n	8009f50 <_free_r+0x20>
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	1841      	adds	r1, r0, r1
 8009f6e:	6021      	str	r1, [r4, #0]
 8009f70:	e7ee      	b.n	8009f50 <_free_r+0x20>
 8009f72:	001a      	movs	r2, r3
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <_free_r+0x4e>
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	d9f9      	bls.n	8009f72 <_free_r+0x42>
 8009f7e:	6811      	ldr	r1, [r2, #0]
 8009f80:	1850      	adds	r0, r2, r1
 8009f82:	42a0      	cmp	r0, r4
 8009f84:	d10b      	bne.n	8009f9e <_free_r+0x6e>
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	1809      	adds	r1, r1, r0
 8009f8a:	1850      	adds	r0, r2, r1
 8009f8c:	6011      	str	r1, [r2, #0]
 8009f8e:	4283      	cmp	r3, r0
 8009f90:	d1e0      	bne.n	8009f54 <_free_r+0x24>
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	1841      	adds	r1, r0, r1
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	6053      	str	r3, [r2, #4]
 8009f9c:	e7da      	b.n	8009f54 <_free_r+0x24>
 8009f9e:	42a0      	cmp	r0, r4
 8009fa0:	d902      	bls.n	8009fa8 <_free_r+0x78>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	602b      	str	r3, [r5, #0]
 8009fa6:	e7d5      	b.n	8009f54 <_free_r+0x24>
 8009fa8:	6821      	ldr	r1, [r4, #0]
 8009faa:	1860      	adds	r0, r4, r1
 8009fac:	4283      	cmp	r3, r0
 8009fae:	d103      	bne.n	8009fb8 <_free_r+0x88>
 8009fb0:	6818      	ldr	r0, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	1841      	adds	r1, r0, r1
 8009fb6:	6021      	str	r1, [r4, #0]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	6054      	str	r4, [r2, #4]
 8009fbc:	e7ca      	b.n	8009f54 <_free_r+0x24>
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	20000724 	.word	0x20000724

08009fc4 <sbrk_aligned>:
 8009fc4:	b570      	push	{r4, r5, r6, lr}
 8009fc6:	4e0f      	ldr	r6, [pc, #60]	; (800a004 <sbrk_aligned+0x40>)
 8009fc8:	000d      	movs	r5, r1
 8009fca:	6831      	ldr	r1, [r6, #0]
 8009fcc:	0004      	movs	r4, r0
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	d102      	bne.n	8009fd8 <sbrk_aligned+0x14>
 8009fd2:	f000 f88f 	bl	800a0f4 <_sbrk_r>
 8009fd6:	6030      	str	r0, [r6, #0]
 8009fd8:	0029      	movs	r1, r5
 8009fda:	0020      	movs	r0, r4
 8009fdc:	f000 f88a 	bl	800a0f4 <_sbrk_r>
 8009fe0:	1c43      	adds	r3, r0, #1
 8009fe2:	d00a      	beq.n	8009ffa <sbrk_aligned+0x36>
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	1cc5      	adds	r5, r0, #3
 8009fe8:	439d      	bics	r5, r3
 8009fea:	42a8      	cmp	r0, r5
 8009fec:	d007      	beq.n	8009ffe <sbrk_aligned+0x3a>
 8009fee:	1a29      	subs	r1, r5, r0
 8009ff0:	0020      	movs	r0, r4
 8009ff2:	f000 f87f 	bl	800a0f4 <_sbrk_r>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	d101      	bne.n	8009ffe <sbrk_aligned+0x3a>
 8009ffa:	2501      	movs	r5, #1
 8009ffc:	426d      	negs	r5, r5
 8009ffe:	0028      	movs	r0, r5
 800a000:	bd70      	pop	{r4, r5, r6, pc}
 800a002:	46c0      	nop			; (mov r8, r8)
 800a004:	20000728 	.word	0x20000728

0800a008 <_malloc_r>:
 800a008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a00a:	2203      	movs	r2, #3
 800a00c:	1ccb      	adds	r3, r1, #3
 800a00e:	4393      	bics	r3, r2
 800a010:	3308      	adds	r3, #8
 800a012:	0006      	movs	r6, r0
 800a014:	001f      	movs	r7, r3
 800a016:	2b0c      	cmp	r3, #12
 800a018:	d232      	bcs.n	800a080 <_malloc_r+0x78>
 800a01a:	270c      	movs	r7, #12
 800a01c:	42b9      	cmp	r1, r7
 800a01e:	d831      	bhi.n	800a084 <_malloc_r+0x7c>
 800a020:	0030      	movs	r0, r6
 800a022:	f000 f89b 	bl	800a15c <__malloc_lock>
 800a026:	4d32      	ldr	r5, [pc, #200]	; (800a0f0 <_malloc_r+0xe8>)
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	001c      	movs	r4, r3
 800a02c:	2c00      	cmp	r4, #0
 800a02e:	d12e      	bne.n	800a08e <_malloc_r+0x86>
 800a030:	0039      	movs	r1, r7
 800a032:	0030      	movs	r0, r6
 800a034:	f7ff ffc6 	bl	8009fc4 <sbrk_aligned>
 800a038:	0004      	movs	r4, r0
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	d11e      	bne.n	800a07c <_malloc_r+0x74>
 800a03e:	682c      	ldr	r4, [r5, #0]
 800a040:	0025      	movs	r5, r4
 800a042:	2d00      	cmp	r5, #0
 800a044:	d14a      	bne.n	800a0dc <_malloc_r+0xd4>
 800a046:	6823      	ldr	r3, [r4, #0]
 800a048:	0029      	movs	r1, r5
 800a04a:	18e3      	adds	r3, r4, r3
 800a04c:	0030      	movs	r0, r6
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	f000 f850 	bl	800a0f4 <_sbrk_r>
 800a054:	9b01      	ldr	r3, [sp, #4]
 800a056:	4283      	cmp	r3, r0
 800a058:	d143      	bne.n	800a0e2 <_malloc_r+0xda>
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	3703      	adds	r7, #3
 800a05e:	1aff      	subs	r7, r7, r3
 800a060:	2303      	movs	r3, #3
 800a062:	439f      	bics	r7, r3
 800a064:	3708      	adds	r7, #8
 800a066:	2f0c      	cmp	r7, #12
 800a068:	d200      	bcs.n	800a06c <_malloc_r+0x64>
 800a06a:	270c      	movs	r7, #12
 800a06c:	0039      	movs	r1, r7
 800a06e:	0030      	movs	r0, r6
 800a070:	f7ff ffa8 	bl	8009fc4 <sbrk_aligned>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d034      	beq.n	800a0e2 <_malloc_r+0xda>
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	19df      	adds	r7, r3, r7
 800a07c:	6027      	str	r7, [r4, #0]
 800a07e:	e013      	b.n	800a0a8 <_malloc_r+0xa0>
 800a080:	2b00      	cmp	r3, #0
 800a082:	dacb      	bge.n	800a01c <_malloc_r+0x14>
 800a084:	230c      	movs	r3, #12
 800a086:	2500      	movs	r5, #0
 800a088:	6033      	str	r3, [r6, #0]
 800a08a:	0028      	movs	r0, r5
 800a08c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a08e:	6822      	ldr	r2, [r4, #0]
 800a090:	1bd1      	subs	r1, r2, r7
 800a092:	d420      	bmi.n	800a0d6 <_malloc_r+0xce>
 800a094:	290b      	cmp	r1, #11
 800a096:	d917      	bls.n	800a0c8 <_malloc_r+0xc0>
 800a098:	19e2      	adds	r2, r4, r7
 800a09a:	6027      	str	r7, [r4, #0]
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d111      	bne.n	800a0c4 <_malloc_r+0xbc>
 800a0a0:	602a      	str	r2, [r5, #0]
 800a0a2:	6863      	ldr	r3, [r4, #4]
 800a0a4:	6011      	str	r1, [r2, #0]
 800a0a6:	6053      	str	r3, [r2, #4]
 800a0a8:	0030      	movs	r0, r6
 800a0aa:	0025      	movs	r5, r4
 800a0ac:	f000 f85e 	bl	800a16c <__malloc_unlock>
 800a0b0:	2207      	movs	r2, #7
 800a0b2:	350b      	adds	r5, #11
 800a0b4:	1d23      	adds	r3, r4, #4
 800a0b6:	4395      	bics	r5, r2
 800a0b8:	1aea      	subs	r2, r5, r3
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	d0e5      	beq.n	800a08a <_malloc_r+0x82>
 800a0be:	1b5b      	subs	r3, r3, r5
 800a0c0:	50a3      	str	r3, [r4, r2]
 800a0c2:	e7e2      	b.n	800a08a <_malloc_r+0x82>
 800a0c4:	605a      	str	r2, [r3, #4]
 800a0c6:	e7ec      	b.n	800a0a2 <_malloc_r+0x9a>
 800a0c8:	6862      	ldr	r2, [r4, #4]
 800a0ca:	42a3      	cmp	r3, r4
 800a0cc:	d101      	bne.n	800a0d2 <_malloc_r+0xca>
 800a0ce:	602a      	str	r2, [r5, #0]
 800a0d0:	e7ea      	b.n	800a0a8 <_malloc_r+0xa0>
 800a0d2:	605a      	str	r2, [r3, #4]
 800a0d4:	e7e8      	b.n	800a0a8 <_malloc_r+0xa0>
 800a0d6:	0023      	movs	r3, r4
 800a0d8:	6864      	ldr	r4, [r4, #4]
 800a0da:	e7a7      	b.n	800a02c <_malloc_r+0x24>
 800a0dc:	002c      	movs	r4, r5
 800a0de:	686d      	ldr	r5, [r5, #4]
 800a0e0:	e7af      	b.n	800a042 <_malloc_r+0x3a>
 800a0e2:	230c      	movs	r3, #12
 800a0e4:	0030      	movs	r0, r6
 800a0e6:	6033      	str	r3, [r6, #0]
 800a0e8:	f000 f840 	bl	800a16c <__malloc_unlock>
 800a0ec:	e7cd      	b.n	800a08a <_malloc_r+0x82>
 800a0ee:	46c0      	nop			; (mov r8, r8)
 800a0f0:	20000724 	.word	0x20000724

0800a0f4 <_sbrk_r>:
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	b570      	push	{r4, r5, r6, lr}
 800a0f8:	4d06      	ldr	r5, [pc, #24]	; (800a114 <_sbrk_r+0x20>)
 800a0fa:	0004      	movs	r4, r0
 800a0fc:	0008      	movs	r0, r1
 800a0fe:	602b      	str	r3, [r5, #0]
 800a100:	f7fa f8e2 	bl	80042c8 <_sbrk>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d103      	bne.n	800a110 <_sbrk_r+0x1c>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d000      	beq.n	800a110 <_sbrk_r+0x1c>
 800a10e:	6023      	str	r3, [r4, #0]
 800a110:	bd70      	pop	{r4, r5, r6, pc}
 800a112:	46c0      	nop			; (mov r8, r8)
 800a114:	20000730 	.word	0x20000730

0800a118 <siprintf>:
 800a118:	b40e      	push	{r1, r2, r3}
 800a11a:	b500      	push	{lr}
 800a11c:	490b      	ldr	r1, [pc, #44]	; (800a14c <siprintf+0x34>)
 800a11e:	b09c      	sub	sp, #112	; 0x70
 800a120:	ab1d      	add	r3, sp, #116	; 0x74
 800a122:	9002      	str	r0, [sp, #8]
 800a124:	9006      	str	r0, [sp, #24]
 800a126:	9107      	str	r1, [sp, #28]
 800a128:	9104      	str	r1, [sp, #16]
 800a12a:	4809      	ldr	r0, [pc, #36]	; (800a150 <siprintf+0x38>)
 800a12c:	4909      	ldr	r1, [pc, #36]	; (800a154 <siprintf+0x3c>)
 800a12e:	cb04      	ldmia	r3!, {r2}
 800a130:	9105      	str	r1, [sp, #20]
 800a132:	6800      	ldr	r0, [r0, #0]
 800a134:	a902      	add	r1, sp, #8
 800a136:	9301      	str	r3, [sp, #4]
 800a138:	f000 f882 	bl	800a240 <_svfiprintf_r>
 800a13c:	2300      	movs	r3, #0
 800a13e:	9a02      	ldr	r2, [sp, #8]
 800a140:	7013      	strb	r3, [r2, #0]
 800a142:	b01c      	add	sp, #112	; 0x70
 800a144:	bc08      	pop	{r3}
 800a146:	b003      	add	sp, #12
 800a148:	4718      	bx	r3
 800a14a:	46c0      	nop			; (mov r8, r8)
 800a14c:	7fffffff 	.word	0x7fffffff
 800a150:	2000001c 	.word	0x2000001c
 800a154:	ffff0208 	.word	0xffff0208

0800a158 <__retarget_lock_acquire_recursive>:
 800a158:	4770      	bx	lr

0800a15a <__retarget_lock_release_recursive>:
 800a15a:	4770      	bx	lr

0800a15c <__malloc_lock>:
 800a15c:	b510      	push	{r4, lr}
 800a15e:	4802      	ldr	r0, [pc, #8]	; (800a168 <__malloc_lock+0xc>)
 800a160:	f7ff fffa 	bl	800a158 <__retarget_lock_acquire_recursive>
 800a164:	bd10      	pop	{r4, pc}
 800a166:	46c0      	nop			; (mov r8, r8)
 800a168:	2000072c 	.word	0x2000072c

0800a16c <__malloc_unlock>:
 800a16c:	b510      	push	{r4, lr}
 800a16e:	4802      	ldr	r0, [pc, #8]	; (800a178 <__malloc_unlock+0xc>)
 800a170:	f7ff fff3 	bl	800a15a <__retarget_lock_release_recursive>
 800a174:	bd10      	pop	{r4, pc}
 800a176:	46c0      	nop			; (mov r8, r8)
 800a178:	2000072c 	.word	0x2000072c

0800a17c <__ssputs_r>:
 800a17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a17e:	688e      	ldr	r6, [r1, #8]
 800a180:	b085      	sub	sp, #20
 800a182:	0007      	movs	r7, r0
 800a184:	000c      	movs	r4, r1
 800a186:	9203      	str	r2, [sp, #12]
 800a188:	9301      	str	r3, [sp, #4]
 800a18a:	429e      	cmp	r6, r3
 800a18c:	d83c      	bhi.n	800a208 <__ssputs_r+0x8c>
 800a18e:	2390      	movs	r3, #144	; 0x90
 800a190:	898a      	ldrh	r2, [r1, #12]
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	421a      	tst	r2, r3
 800a196:	d034      	beq.n	800a202 <__ssputs_r+0x86>
 800a198:	6909      	ldr	r1, [r1, #16]
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	6960      	ldr	r0, [r4, #20]
 800a19e:	1a5b      	subs	r3, r3, r1
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	4343      	muls	r3, r0
 800a1a6:	0fdd      	lsrs	r5, r3, #31
 800a1a8:	18ed      	adds	r5, r5, r3
 800a1aa:	9b01      	ldr	r3, [sp, #4]
 800a1ac:	9802      	ldr	r0, [sp, #8]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	181b      	adds	r3, r3, r0
 800a1b2:	106d      	asrs	r5, r5, #1
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	d900      	bls.n	800a1ba <__ssputs_r+0x3e>
 800a1b8:	001d      	movs	r5, r3
 800a1ba:	0553      	lsls	r3, r2, #21
 800a1bc:	d532      	bpl.n	800a224 <__ssputs_r+0xa8>
 800a1be:	0029      	movs	r1, r5
 800a1c0:	0038      	movs	r0, r7
 800a1c2:	f7ff ff21 	bl	800a008 <_malloc_r>
 800a1c6:	1e06      	subs	r6, r0, #0
 800a1c8:	d109      	bne.n	800a1de <__ssputs_r+0x62>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	603b      	str	r3, [r7, #0]
 800a1ce:	2340      	movs	r3, #64	; 0x40
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	89a2      	ldrh	r2, [r4, #12]
 800a1d4:	4240      	negs	r0, r0
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	81a3      	strh	r3, [r4, #12]
 800a1da:	b005      	add	sp, #20
 800a1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1de:	9a02      	ldr	r2, [sp, #8]
 800a1e0:	6921      	ldr	r1, [r4, #16]
 800a1e2:	f000 faba 	bl	800a75a <memcpy>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	4a14      	ldr	r2, [pc, #80]	; (800a23c <__ssputs_r+0xc0>)
 800a1ea:	401a      	ands	r2, r3
 800a1ec:	2380      	movs	r3, #128	; 0x80
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	81a3      	strh	r3, [r4, #12]
 800a1f2:	9b02      	ldr	r3, [sp, #8]
 800a1f4:	6126      	str	r6, [r4, #16]
 800a1f6:	18f6      	adds	r6, r6, r3
 800a1f8:	6026      	str	r6, [r4, #0]
 800a1fa:	6165      	str	r5, [r4, #20]
 800a1fc:	9e01      	ldr	r6, [sp, #4]
 800a1fe:	1aed      	subs	r5, r5, r3
 800a200:	60a5      	str	r5, [r4, #8]
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	429e      	cmp	r6, r3
 800a206:	d900      	bls.n	800a20a <__ssputs_r+0x8e>
 800a208:	9e01      	ldr	r6, [sp, #4]
 800a20a:	0032      	movs	r2, r6
 800a20c:	9903      	ldr	r1, [sp, #12]
 800a20e:	6820      	ldr	r0, [r4, #0]
 800a210:	f000 faac 	bl	800a76c <memmove>
 800a214:	68a3      	ldr	r3, [r4, #8]
 800a216:	2000      	movs	r0, #0
 800a218:	1b9b      	subs	r3, r3, r6
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	199e      	adds	r6, r3, r6
 800a220:	6026      	str	r6, [r4, #0]
 800a222:	e7da      	b.n	800a1da <__ssputs_r+0x5e>
 800a224:	002a      	movs	r2, r5
 800a226:	0038      	movs	r0, r7
 800a228:	f000 fab3 	bl	800a792 <_realloc_r>
 800a22c:	1e06      	subs	r6, r0, #0
 800a22e:	d1e0      	bne.n	800a1f2 <__ssputs_r+0x76>
 800a230:	0038      	movs	r0, r7
 800a232:	6921      	ldr	r1, [r4, #16]
 800a234:	f7ff fe7c 	bl	8009f30 <_free_r>
 800a238:	e7c7      	b.n	800a1ca <__ssputs_r+0x4e>
 800a23a:	46c0      	nop			; (mov r8, r8)
 800a23c:	fffffb7f 	.word	0xfffffb7f

0800a240 <_svfiprintf_r>:
 800a240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a242:	b0a1      	sub	sp, #132	; 0x84
 800a244:	9003      	str	r0, [sp, #12]
 800a246:	001d      	movs	r5, r3
 800a248:	898b      	ldrh	r3, [r1, #12]
 800a24a:	000f      	movs	r7, r1
 800a24c:	0016      	movs	r6, r2
 800a24e:	061b      	lsls	r3, r3, #24
 800a250:	d511      	bpl.n	800a276 <_svfiprintf_r+0x36>
 800a252:	690b      	ldr	r3, [r1, #16]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d10e      	bne.n	800a276 <_svfiprintf_r+0x36>
 800a258:	2140      	movs	r1, #64	; 0x40
 800a25a:	f7ff fed5 	bl	800a008 <_malloc_r>
 800a25e:	6038      	str	r0, [r7, #0]
 800a260:	6138      	str	r0, [r7, #16]
 800a262:	2800      	cmp	r0, #0
 800a264:	d105      	bne.n	800a272 <_svfiprintf_r+0x32>
 800a266:	230c      	movs	r3, #12
 800a268:	9a03      	ldr	r2, [sp, #12]
 800a26a:	3801      	subs	r0, #1
 800a26c:	6013      	str	r3, [r2, #0]
 800a26e:	b021      	add	sp, #132	; 0x84
 800a270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a272:	2340      	movs	r3, #64	; 0x40
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	2300      	movs	r3, #0
 800a278:	ac08      	add	r4, sp, #32
 800a27a:	6163      	str	r3, [r4, #20]
 800a27c:	3320      	adds	r3, #32
 800a27e:	7663      	strb	r3, [r4, #25]
 800a280:	3310      	adds	r3, #16
 800a282:	76a3      	strb	r3, [r4, #26]
 800a284:	9507      	str	r5, [sp, #28]
 800a286:	0035      	movs	r5, r6
 800a288:	782b      	ldrb	r3, [r5, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d001      	beq.n	800a292 <_svfiprintf_r+0x52>
 800a28e:	2b25      	cmp	r3, #37	; 0x25
 800a290:	d147      	bne.n	800a322 <_svfiprintf_r+0xe2>
 800a292:	1bab      	subs	r3, r5, r6
 800a294:	9305      	str	r3, [sp, #20]
 800a296:	42b5      	cmp	r5, r6
 800a298:	d00c      	beq.n	800a2b4 <_svfiprintf_r+0x74>
 800a29a:	0032      	movs	r2, r6
 800a29c:	0039      	movs	r1, r7
 800a29e:	9803      	ldr	r0, [sp, #12]
 800a2a0:	f7ff ff6c 	bl	800a17c <__ssputs_r>
 800a2a4:	1c43      	adds	r3, r0, #1
 800a2a6:	d100      	bne.n	800a2aa <_svfiprintf_r+0x6a>
 800a2a8:	e0ae      	b.n	800a408 <_svfiprintf_r+0x1c8>
 800a2aa:	6962      	ldr	r2, [r4, #20]
 800a2ac:	9b05      	ldr	r3, [sp, #20]
 800a2ae:	4694      	mov	ip, r2
 800a2b0:	4463      	add	r3, ip
 800a2b2:	6163      	str	r3, [r4, #20]
 800a2b4:	782b      	ldrb	r3, [r5, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d100      	bne.n	800a2bc <_svfiprintf_r+0x7c>
 800a2ba:	e0a5      	b.n	800a408 <_svfiprintf_r+0x1c8>
 800a2bc:	2201      	movs	r2, #1
 800a2be:	2300      	movs	r3, #0
 800a2c0:	4252      	negs	r2, r2
 800a2c2:	6062      	str	r2, [r4, #4]
 800a2c4:	a904      	add	r1, sp, #16
 800a2c6:	3254      	adds	r2, #84	; 0x54
 800a2c8:	1852      	adds	r2, r2, r1
 800a2ca:	1c6e      	adds	r6, r5, #1
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	60e3      	str	r3, [r4, #12]
 800a2d0:	60a3      	str	r3, [r4, #8]
 800a2d2:	7013      	strb	r3, [r2, #0]
 800a2d4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a2d6:	2205      	movs	r2, #5
 800a2d8:	7831      	ldrb	r1, [r6, #0]
 800a2da:	4854      	ldr	r0, [pc, #336]	; (800a42c <_svfiprintf_r+0x1ec>)
 800a2dc:	f000 fa32 	bl	800a744 <memchr>
 800a2e0:	1c75      	adds	r5, r6, #1
 800a2e2:	2800      	cmp	r0, #0
 800a2e4:	d11f      	bne.n	800a326 <_svfiprintf_r+0xe6>
 800a2e6:	6822      	ldr	r2, [r4, #0]
 800a2e8:	06d3      	lsls	r3, r2, #27
 800a2ea:	d504      	bpl.n	800a2f6 <_svfiprintf_r+0xb6>
 800a2ec:	2353      	movs	r3, #83	; 0x53
 800a2ee:	a904      	add	r1, sp, #16
 800a2f0:	185b      	adds	r3, r3, r1
 800a2f2:	2120      	movs	r1, #32
 800a2f4:	7019      	strb	r1, [r3, #0]
 800a2f6:	0713      	lsls	r3, r2, #28
 800a2f8:	d504      	bpl.n	800a304 <_svfiprintf_r+0xc4>
 800a2fa:	2353      	movs	r3, #83	; 0x53
 800a2fc:	a904      	add	r1, sp, #16
 800a2fe:	185b      	adds	r3, r3, r1
 800a300:	212b      	movs	r1, #43	; 0x2b
 800a302:	7019      	strb	r1, [r3, #0]
 800a304:	7833      	ldrb	r3, [r6, #0]
 800a306:	2b2a      	cmp	r3, #42	; 0x2a
 800a308:	d016      	beq.n	800a338 <_svfiprintf_r+0xf8>
 800a30a:	0035      	movs	r5, r6
 800a30c:	2100      	movs	r1, #0
 800a30e:	200a      	movs	r0, #10
 800a310:	68e3      	ldr	r3, [r4, #12]
 800a312:	782a      	ldrb	r2, [r5, #0]
 800a314:	1c6e      	adds	r6, r5, #1
 800a316:	3a30      	subs	r2, #48	; 0x30
 800a318:	2a09      	cmp	r2, #9
 800a31a:	d94e      	bls.n	800a3ba <_svfiprintf_r+0x17a>
 800a31c:	2900      	cmp	r1, #0
 800a31e:	d111      	bne.n	800a344 <_svfiprintf_r+0x104>
 800a320:	e017      	b.n	800a352 <_svfiprintf_r+0x112>
 800a322:	3501      	adds	r5, #1
 800a324:	e7b0      	b.n	800a288 <_svfiprintf_r+0x48>
 800a326:	4b41      	ldr	r3, [pc, #260]	; (800a42c <_svfiprintf_r+0x1ec>)
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	1ac0      	subs	r0, r0, r3
 800a32c:	2301      	movs	r3, #1
 800a32e:	4083      	lsls	r3, r0
 800a330:	4313      	orrs	r3, r2
 800a332:	002e      	movs	r6, r5
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	e7ce      	b.n	800a2d6 <_svfiprintf_r+0x96>
 800a338:	9b07      	ldr	r3, [sp, #28]
 800a33a:	1d19      	adds	r1, r3, #4
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	9107      	str	r1, [sp, #28]
 800a340:	2b00      	cmp	r3, #0
 800a342:	db01      	blt.n	800a348 <_svfiprintf_r+0x108>
 800a344:	930b      	str	r3, [sp, #44]	; 0x2c
 800a346:	e004      	b.n	800a352 <_svfiprintf_r+0x112>
 800a348:	425b      	negs	r3, r3
 800a34a:	60e3      	str	r3, [r4, #12]
 800a34c:	2302      	movs	r3, #2
 800a34e:	4313      	orrs	r3, r2
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	782b      	ldrb	r3, [r5, #0]
 800a354:	2b2e      	cmp	r3, #46	; 0x2e
 800a356:	d10a      	bne.n	800a36e <_svfiprintf_r+0x12e>
 800a358:	786b      	ldrb	r3, [r5, #1]
 800a35a:	2b2a      	cmp	r3, #42	; 0x2a
 800a35c:	d135      	bne.n	800a3ca <_svfiprintf_r+0x18a>
 800a35e:	9b07      	ldr	r3, [sp, #28]
 800a360:	3502      	adds	r5, #2
 800a362:	1d1a      	adds	r2, r3, #4
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	9207      	str	r2, [sp, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	db2b      	blt.n	800a3c4 <_svfiprintf_r+0x184>
 800a36c:	9309      	str	r3, [sp, #36]	; 0x24
 800a36e:	4e30      	ldr	r6, [pc, #192]	; (800a430 <_svfiprintf_r+0x1f0>)
 800a370:	2203      	movs	r2, #3
 800a372:	0030      	movs	r0, r6
 800a374:	7829      	ldrb	r1, [r5, #0]
 800a376:	f000 f9e5 	bl	800a744 <memchr>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	d006      	beq.n	800a38c <_svfiprintf_r+0x14c>
 800a37e:	2340      	movs	r3, #64	; 0x40
 800a380:	1b80      	subs	r0, r0, r6
 800a382:	4083      	lsls	r3, r0
 800a384:	6822      	ldr	r2, [r4, #0]
 800a386:	3501      	adds	r5, #1
 800a388:	4313      	orrs	r3, r2
 800a38a:	6023      	str	r3, [r4, #0]
 800a38c:	7829      	ldrb	r1, [r5, #0]
 800a38e:	2206      	movs	r2, #6
 800a390:	4828      	ldr	r0, [pc, #160]	; (800a434 <_svfiprintf_r+0x1f4>)
 800a392:	1c6e      	adds	r6, r5, #1
 800a394:	7621      	strb	r1, [r4, #24]
 800a396:	f000 f9d5 	bl	800a744 <memchr>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d03c      	beq.n	800a418 <_svfiprintf_r+0x1d8>
 800a39e:	4b26      	ldr	r3, [pc, #152]	; (800a438 <_svfiprintf_r+0x1f8>)
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d125      	bne.n	800a3f0 <_svfiprintf_r+0x1b0>
 800a3a4:	2207      	movs	r2, #7
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	3307      	adds	r3, #7
 800a3aa:	4393      	bics	r3, r2
 800a3ac:	3308      	adds	r3, #8
 800a3ae:	9307      	str	r3, [sp, #28]
 800a3b0:	6963      	ldr	r3, [r4, #20]
 800a3b2:	9a04      	ldr	r2, [sp, #16]
 800a3b4:	189b      	adds	r3, r3, r2
 800a3b6:	6163      	str	r3, [r4, #20]
 800a3b8:	e765      	b.n	800a286 <_svfiprintf_r+0x46>
 800a3ba:	4343      	muls	r3, r0
 800a3bc:	0035      	movs	r5, r6
 800a3be:	2101      	movs	r1, #1
 800a3c0:	189b      	adds	r3, r3, r2
 800a3c2:	e7a6      	b.n	800a312 <_svfiprintf_r+0xd2>
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	425b      	negs	r3, r3
 800a3c8:	e7d0      	b.n	800a36c <_svfiprintf_r+0x12c>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	200a      	movs	r0, #10
 800a3ce:	001a      	movs	r2, r3
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	6063      	str	r3, [r4, #4]
 800a3d4:	7829      	ldrb	r1, [r5, #0]
 800a3d6:	1c6e      	adds	r6, r5, #1
 800a3d8:	3930      	subs	r1, #48	; 0x30
 800a3da:	2909      	cmp	r1, #9
 800a3dc:	d903      	bls.n	800a3e6 <_svfiprintf_r+0x1a6>
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d0c5      	beq.n	800a36e <_svfiprintf_r+0x12e>
 800a3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800a3e4:	e7c3      	b.n	800a36e <_svfiprintf_r+0x12e>
 800a3e6:	4342      	muls	r2, r0
 800a3e8:	0035      	movs	r5, r6
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	1852      	adds	r2, r2, r1
 800a3ee:	e7f1      	b.n	800a3d4 <_svfiprintf_r+0x194>
 800a3f0:	ab07      	add	r3, sp, #28
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	003a      	movs	r2, r7
 800a3f6:	0021      	movs	r1, r4
 800a3f8:	4b10      	ldr	r3, [pc, #64]	; (800a43c <_svfiprintf_r+0x1fc>)
 800a3fa:	9803      	ldr	r0, [sp, #12]
 800a3fc:	e000      	b.n	800a400 <_svfiprintf_r+0x1c0>
 800a3fe:	bf00      	nop
 800a400:	9004      	str	r0, [sp, #16]
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	3301      	adds	r3, #1
 800a406:	d1d3      	bne.n	800a3b0 <_svfiprintf_r+0x170>
 800a408:	89bb      	ldrh	r3, [r7, #12]
 800a40a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a40c:	065b      	lsls	r3, r3, #25
 800a40e:	d400      	bmi.n	800a412 <_svfiprintf_r+0x1d2>
 800a410:	e72d      	b.n	800a26e <_svfiprintf_r+0x2e>
 800a412:	2001      	movs	r0, #1
 800a414:	4240      	negs	r0, r0
 800a416:	e72a      	b.n	800a26e <_svfiprintf_r+0x2e>
 800a418:	ab07      	add	r3, sp, #28
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	003a      	movs	r2, r7
 800a41e:	0021      	movs	r1, r4
 800a420:	4b06      	ldr	r3, [pc, #24]	; (800a43c <_svfiprintf_r+0x1fc>)
 800a422:	9803      	ldr	r0, [sp, #12]
 800a424:	f000 f87c 	bl	800a520 <_printf_i>
 800a428:	e7ea      	b.n	800a400 <_svfiprintf_r+0x1c0>
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	0800e390 	.word	0x0800e390
 800a430:	0800e396 	.word	0x0800e396
 800a434:	0800e39a 	.word	0x0800e39a
 800a438:	00000000 	.word	0x00000000
 800a43c:	0800a17d 	.word	0x0800a17d

0800a440 <_printf_common>:
 800a440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a442:	0015      	movs	r5, r2
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	688a      	ldr	r2, [r1, #8]
 800a448:	690b      	ldr	r3, [r1, #16]
 800a44a:	000c      	movs	r4, r1
 800a44c:	9000      	str	r0, [sp, #0]
 800a44e:	4293      	cmp	r3, r2
 800a450:	da00      	bge.n	800a454 <_printf_common+0x14>
 800a452:	0013      	movs	r3, r2
 800a454:	0022      	movs	r2, r4
 800a456:	602b      	str	r3, [r5, #0]
 800a458:	3243      	adds	r2, #67	; 0x43
 800a45a:	7812      	ldrb	r2, [r2, #0]
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	d001      	beq.n	800a464 <_printf_common+0x24>
 800a460:	3301      	adds	r3, #1
 800a462:	602b      	str	r3, [r5, #0]
 800a464:	6823      	ldr	r3, [r4, #0]
 800a466:	069b      	lsls	r3, r3, #26
 800a468:	d502      	bpl.n	800a470 <_printf_common+0x30>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	3302      	adds	r3, #2
 800a46e:	602b      	str	r3, [r5, #0]
 800a470:	6822      	ldr	r2, [r4, #0]
 800a472:	2306      	movs	r3, #6
 800a474:	0017      	movs	r7, r2
 800a476:	401f      	ands	r7, r3
 800a478:	421a      	tst	r2, r3
 800a47a:	d027      	beq.n	800a4cc <_printf_common+0x8c>
 800a47c:	0023      	movs	r3, r4
 800a47e:	3343      	adds	r3, #67	; 0x43
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	1e5a      	subs	r2, r3, #1
 800a484:	4193      	sbcs	r3, r2
 800a486:	6822      	ldr	r2, [r4, #0]
 800a488:	0692      	lsls	r2, r2, #26
 800a48a:	d430      	bmi.n	800a4ee <_printf_common+0xae>
 800a48c:	0022      	movs	r2, r4
 800a48e:	9901      	ldr	r1, [sp, #4]
 800a490:	9800      	ldr	r0, [sp, #0]
 800a492:	9e08      	ldr	r6, [sp, #32]
 800a494:	3243      	adds	r2, #67	; 0x43
 800a496:	47b0      	blx	r6
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d025      	beq.n	800a4e8 <_printf_common+0xa8>
 800a49c:	2306      	movs	r3, #6
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	682a      	ldr	r2, [r5, #0]
 800a4a2:	68e1      	ldr	r1, [r4, #12]
 800a4a4:	2500      	movs	r5, #0
 800a4a6:	4003      	ands	r3, r0
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	d103      	bne.n	800a4b4 <_printf_common+0x74>
 800a4ac:	1a8d      	subs	r5, r1, r2
 800a4ae:	43eb      	mvns	r3, r5
 800a4b0:	17db      	asrs	r3, r3, #31
 800a4b2:	401d      	ands	r5, r3
 800a4b4:	68a3      	ldr	r3, [r4, #8]
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	dd01      	ble.n	800a4c0 <_printf_common+0x80>
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	18ed      	adds	r5, r5, r3
 800a4c0:	2700      	movs	r7, #0
 800a4c2:	42bd      	cmp	r5, r7
 800a4c4:	d120      	bne.n	800a508 <_printf_common+0xc8>
 800a4c6:	2000      	movs	r0, #0
 800a4c8:	e010      	b.n	800a4ec <_printf_common+0xac>
 800a4ca:	3701      	adds	r7, #1
 800a4cc:	68e3      	ldr	r3, [r4, #12]
 800a4ce:	682a      	ldr	r2, [r5, #0]
 800a4d0:	1a9b      	subs	r3, r3, r2
 800a4d2:	42bb      	cmp	r3, r7
 800a4d4:	ddd2      	ble.n	800a47c <_printf_common+0x3c>
 800a4d6:	0022      	movs	r2, r4
 800a4d8:	2301      	movs	r3, #1
 800a4da:	9901      	ldr	r1, [sp, #4]
 800a4dc:	9800      	ldr	r0, [sp, #0]
 800a4de:	9e08      	ldr	r6, [sp, #32]
 800a4e0:	3219      	adds	r2, #25
 800a4e2:	47b0      	blx	r6
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d1f0      	bne.n	800a4ca <_printf_common+0x8a>
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	4240      	negs	r0, r0
 800a4ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4ee:	2030      	movs	r0, #48	; 0x30
 800a4f0:	18e1      	adds	r1, r4, r3
 800a4f2:	3143      	adds	r1, #67	; 0x43
 800a4f4:	7008      	strb	r0, [r1, #0]
 800a4f6:	0021      	movs	r1, r4
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	3145      	adds	r1, #69	; 0x45
 800a4fc:	7809      	ldrb	r1, [r1, #0]
 800a4fe:	18a2      	adds	r2, r4, r2
 800a500:	3243      	adds	r2, #67	; 0x43
 800a502:	3302      	adds	r3, #2
 800a504:	7011      	strb	r1, [r2, #0]
 800a506:	e7c1      	b.n	800a48c <_printf_common+0x4c>
 800a508:	0022      	movs	r2, r4
 800a50a:	2301      	movs	r3, #1
 800a50c:	9901      	ldr	r1, [sp, #4]
 800a50e:	9800      	ldr	r0, [sp, #0]
 800a510:	9e08      	ldr	r6, [sp, #32]
 800a512:	321a      	adds	r2, #26
 800a514:	47b0      	blx	r6
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d0e6      	beq.n	800a4e8 <_printf_common+0xa8>
 800a51a:	3701      	adds	r7, #1
 800a51c:	e7d1      	b.n	800a4c2 <_printf_common+0x82>
	...

0800a520 <_printf_i>:
 800a520:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a522:	b08b      	sub	sp, #44	; 0x2c
 800a524:	9206      	str	r2, [sp, #24]
 800a526:	000a      	movs	r2, r1
 800a528:	3243      	adds	r2, #67	; 0x43
 800a52a:	9307      	str	r3, [sp, #28]
 800a52c:	9005      	str	r0, [sp, #20]
 800a52e:	9204      	str	r2, [sp, #16]
 800a530:	7e0a      	ldrb	r2, [r1, #24]
 800a532:	000c      	movs	r4, r1
 800a534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a536:	2a78      	cmp	r2, #120	; 0x78
 800a538:	d807      	bhi.n	800a54a <_printf_i+0x2a>
 800a53a:	2a62      	cmp	r2, #98	; 0x62
 800a53c:	d809      	bhi.n	800a552 <_printf_i+0x32>
 800a53e:	2a00      	cmp	r2, #0
 800a540:	d100      	bne.n	800a544 <_printf_i+0x24>
 800a542:	e0c1      	b.n	800a6c8 <_printf_i+0x1a8>
 800a544:	2a58      	cmp	r2, #88	; 0x58
 800a546:	d100      	bne.n	800a54a <_printf_i+0x2a>
 800a548:	e08c      	b.n	800a664 <_printf_i+0x144>
 800a54a:	0026      	movs	r6, r4
 800a54c:	3642      	adds	r6, #66	; 0x42
 800a54e:	7032      	strb	r2, [r6, #0]
 800a550:	e022      	b.n	800a598 <_printf_i+0x78>
 800a552:	0010      	movs	r0, r2
 800a554:	3863      	subs	r0, #99	; 0x63
 800a556:	2815      	cmp	r0, #21
 800a558:	d8f7      	bhi.n	800a54a <_printf_i+0x2a>
 800a55a:	f7f5 fdd5 	bl	8000108 <__gnu_thumb1_case_shi>
 800a55e:	0016      	.short	0x0016
 800a560:	fff6001f 	.word	0xfff6001f
 800a564:	fff6fff6 	.word	0xfff6fff6
 800a568:	001ffff6 	.word	0x001ffff6
 800a56c:	fff6fff6 	.word	0xfff6fff6
 800a570:	fff6fff6 	.word	0xfff6fff6
 800a574:	003600a8 	.word	0x003600a8
 800a578:	fff6009a 	.word	0xfff6009a
 800a57c:	00b9fff6 	.word	0x00b9fff6
 800a580:	0036fff6 	.word	0x0036fff6
 800a584:	fff6fff6 	.word	0xfff6fff6
 800a588:	009e      	.short	0x009e
 800a58a:	0026      	movs	r6, r4
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	3642      	adds	r6, #66	; 0x42
 800a590:	1d11      	adds	r1, r2, #4
 800a592:	6019      	str	r1, [r3, #0]
 800a594:	6813      	ldr	r3, [r2, #0]
 800a596:	7033      	strb	r3, [r6, #0]
 800a598:	2301      	movs	r3, #1
 800a59a:	e0a7      	b.n	800a6ec <_printf_i+0x1cc>
 800a59c:	6808      	ldr	r0, [r1, #0]
 800a59e:	6819      	ldr	r1, [r3, #0]
 800a5a0:	1d0a      	adds	r2, r1, #4
 800a5a2:	0605      	lsls	r5, r0, #24
 800a5a4:	d50b      	bpl.n	800a5be <_printf_i+0x9e>
 800a5a6:	680d      	ldr	r5, [r1, #0]
 800a5a8:	601a      	str	r2, [r3, #0]
 800a5aa:	2d00      	cmp	r5, #0
 800a5ac:	da03      	bge.n	800a5b6 <_printf_i+0x96>
 800a5ae:	232d      	movs	r3, #45	; 0x2d
 800a5b0:	9a04      	ldr	r2, [sp, #16]
 800a5b2:	426d      	negs	r5, r5
 800a5b4:	7013      	strb	r3, [r2, #0]
 800a5b6:	4b61      	ldr	r3, [pc, #388]	; (800a73c <_printf_i+0x21c>)
 800a5b8:	270a      	movs	r7, #10
 800a5ba:	9303      	str	r3, [sp, #12]
 800a5bc:	e01b      	b.n	800a5f6 <_printf_i+0xd6>
 800a5be:	680d      	ldr	r5, [r1, #0]
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	0641      	lsls	r1, r0, #25
 800a5c4:	d5f1      	bpl.n	800a5aa <_printf_i+0x8a>
 800a5c6:	b22d      	sxth	r5, r5
 800a5c8:	e7ef      	b.n	800a5aa <_printf_i+0x8a>
 800a5ca:	680d      	ldr	r5, [r1, #0]
 800a5cc:	6819      	ldr	r1, [r3, #0]
 800a5ce:	1d08      	adds	r0, r1, #4
 800a5d0:	6018      	str	r0, [r3, #0]
 800a5d2:	062e      	lsls	r6, r5, #24
 800a5d4:	d501      	bpl.n	800a5da <_printf_i+0xba>
 800a5d6:	680d      	ldr	r5, [r1, #0]
 800a5d8:	e003      	b.n	800a5e2 <_printf_i+0xc2>
 800a5da:	066d      	lsls	r5, r5, #25
 800a5dc:	d5fb      	bpl.n	800a5d6 <_printf_i+0xb6>
 800a5de:	680d      	ldr	r5, [r1, #0]
 800a5e0:	b2ad      	uxth	r5, r5
 800a5e2:	4b56      	ldr	r3, [pc, #344]	; (800a73c <_printf_i+0x21c>)
 800a5e4:	2708      	movs	r7, #8
 800a5e6:	9303      	str	r3, [sp, #12]
 800a5e8:	2a6f      	cmp	r2, #111	; 0x6f
 800a5ea:	d000      	beq.n	800a5ee <_printf_i+0xce>
 800a5ec:	3702      	adds	r7, #2
 800a5ee:	0023      	movs	r3, r4
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	3343      	adds	r3, #67	; 0x43
 800a5f4:	701a      	strb	r2, [r3, #0]
 800a5f6:	6863      	ldr	r3, [r4, #4]
 800a5f8:	60a3      	str	r3, [r4, #8]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db03      	blt.n	800a606 <_printf_i+0xe6>
 800a5fe:	2204      	movs	r2, #4
 800a600:	6821      	ldr	r1, [r4, #0]
 800a602:	4391      	bics	r1, r2
 800a604:	6021      	str	r1, [r4, #0]
 800a606:	2d00      	cmp	r5, #0
 800a608:	d102      	bne.n	800a610 <_printf_i+0xf0>
 800a60a:	9e04      	ldr	r6, [sp, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00c      	beq.n	800a62a <_printf_i+0x10a>
 800a610:	9e04      	ldr	r6, [sp, #16]
 800a612:	0028      	movs	r0, r5
 800a614:	0039      	movs	r1, r7
 800a616:	f7f5 fe07 	bl	8000228 <__aeabi_uidivmod>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	3e01      	subs	r6, #1
 800a61e:	5c5b      	ldrb	r3, [r3, r1]
 800a620:	7033      	strb	r3, [r6, #0]
 800a622:	002b      	movs	r3, r5
 800a624:	0005      	movs	r5, r0
 800a626:	429f      	cmp	r7, r3
 800a628:	d9f3      	bls.n	800a612 <_printf_i+0xf2>
 800a62a:	2f08      	cmp	r7, #8
 800a62c:	d109      	bne.n	800a642 <_printf_i+0x122>
 800a62e:	6823      	ldr	r3, [r4, #0]
 800a630:	07db      	lsls	r3, r3, #31
 800a632:	d506      	bpl.n	800a642 <_printf_i+0x122>
 800a634:	6863      	ldr	r3, [r4, #4]
 800a636:	6922      	ldr	r2, [r4, #16]
 800a638:	4293      	cmp	r3, r2
 800a63a:	dc02      	bgt.n	800a642 <_printf_i+0x122>
 800a63c:	2330      	movs	r3, #48	; 0x30
 800a63e:	3e01      	subs	r6, #1
 800a640:	7033      	strb	r3, [r6, #0]
 800a642:	9b04      	ldr	r3, [sp, #16]
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	6123      	str	r3, [r4, #16]
 800a648:	9b07      	ldr	r3, [sp, #28]
 800a64a:	0021      	movs	r1, r4
 800a64c:	9300      	str	r3, [sp, #0]
 800a64e:	9805      	ldr	r0, [sp, #20]
 800a650:	9b06      	ldr	r3, [sp, #24]
 800a652:	aa09      	add	r2, sp, #36	; 0x24
 800a654:	f7ff fef4 	bl	800a440 <_printf_common>
 800a658:	1c43      	adds	r3, r0, #1
 800a65a:	d14c      	bne.n	800a6f6 <_printf_i+0x1d6>
 800a65c:	2001      	movs	r0, #1
 800a65e:	4240      	negs	r0, r0
 800a660:	b00b      	add	sp, #44	; 0x2c
 800a662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a664:	3145      	adds	r1, #69	; 0x45
 800a666:	700a      	strb	r2, [r1, #0]
 800a668:	4a34      	ldr	r2, [pc, #208]	; (800a73c <_printf_i+0x21c>)
 800a66a:	9203      	str	r2, [sp, #12]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	6821      	ldr	r1, [r4, #0]
 800a670:	ca20      	ldmia	r2!, {r5}
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	0608      	lsls	r0, r1, #24
 800a676:	d516      	bpl.n	800a6a6 <_printf_i+0x186>
 800a678:	07cb      	lsls	r3, r1, #31
 800a67a:	d502      	bpl.n	800a682 <_printf_i+0x162>
 800a67c:	2320      	movs	r3, #32
 800a67e:	4319      	orrs	r1, r3
 800a680:	6021      	str	r1, [r4, #0]
 800a682:	2710      	movs	r7, #16
 800a684:	2d00      	cmp	r5, #0
 800a686:	d1b2      	bne.n	800a5ee <_printf_i+0xce>
 800a688:	2320      	movs	r3, #32
 800a68a:	6822      	ldr	r2, [r4, #0]
 800a68c:	439a      	bics	r2, r3
 800a68e:	6022      	str	r2, [r4, #0]
 800a690:	e7ad      	b.n	800a5ee <_printf_i+0xce>
 800a692:	2220      	movs	r2, #32
 800a694:	6809      	ldr	r1, [r1, #0]
 800a696:	430a      	orrs	r2, r1
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	0022      	movs	r2, r4
 800a69c:	2178      	movs	r1, #120	; 0x78
 800a69e:	3245      	adds	r2, #69	; 0x45
 800a6a0:	7011      	strb	r1, [r2, #0]
 800a6a2:	4a27      	ldr	r2, [pc, #156]	; (800a740 <_printf_i+0x220>)
 800a6a4:	e7e1      	b.n	800a66a <_printf_i+0x14a>
 800a6a6:	0648      	lsls	r0, r1, #25
 800a6a8:	d5e6      	bpl.n	800a678 <_printf_i+0x158>
 800a6aa:	b2ad      	uxth	r5, r5
 800a6ac:	e7e4      	b.n	800a678 <_printf_i+0x158>
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	680d      	ldr	r5, [r1, #0]
 800a6b2:	1d10      	adds	r0, r2, #4
 800a6b4:	6949      	ldr	r1, [r1, #20]
 800a6b6:	6018      	str	r0, [r3, #0]
 800a6b8:	6813      	ldr	r3, [r2, #0]
 800a6ba:	062e      	lsls	r6, r5, #24
 800a6bc:	d501      	bpl.n	800a6c2 <_printf_i+0x1a2>
 800a6be:	6019      	str	r1, [r3, #0]
 800a6c0:	e002      	b.n	800a6c8 <_printf_i+0x1a8>
 800a6c2:	066d      	lsls	r5, r5, #25
 800a6c4:	d5fb      	bpl.n	800a6be <_printf_i+0x19e>
 800a6c6:	8019      	strh	r1, [r3, #0]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9e04      	ldr	r6, [sp, #16]
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	e7bb      	b.n	800a648 <_printf_i+0x128>
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	1d11      	adds	r1, r2, #4
 800a6d4:	6019      	str	r1, [r3, #0]
 800a6d6:	6816      	ldr	r6, [r2, #0]
 800a6d8:	2100      	movs	r1, #0
 800a6da:	0030      	movs	r0, r6
 800a6dc:	6862      	ldr	r2, [r4, #4]
 800a6de:	f000 f831 	bl	800a744 <memchr>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d001      	beq.n	800a6ea <_printf_i+0x1ca>
 800a6e6:	1b80      	subs	r0, r0, r6
 800a6e8:	6060      	str	r0, [r4, #4]
 800a6ea:	6863      	ldr	r3, [r4, #4]
 800a6ec:	6123      	str	r3, [r4, #16]
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	9a04      	ldr	r2, [sp, #16]
 800a6f2:	7013      	strb	r3, [r2, #0]
 800a6f4:	e7a8      	b.n	800a648 <_printf_i+0x128>
 800a6f6:	6923      	ldr	r3, [r4, #16]
 800a6f8:	0032      	movs	r2, r6
 800a6fa:	9906      	ldr	r1, [sp, #24]
 800a6fc:	9805      	ldr	r0, [sp, #20]
 800a6fe:	9d07      	ldr	r5, [sp, #28]
 800a700:	47a8      	blx	r5
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d0aa      	beq.n	800a65c <_printf_i+0x13c>
 800a706:	6823      	ldr	r3, [r4, #0]
 800a708:	079b      	lsls	r3, r3, #30
 800a70a:	d415      	bmi.n	800a738 <_printf_i+0x218>
 800a70c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a70e:	68e0      	ldr	r0, [r4, #12]
 800a710:	4298      	cmp	r0, r3
 800a712:	daa5      	bge.n	800a660 <_printf_i+0x140>
 800a714:	0018      	movs	r0, r3
 800a716:	e7a3      	b.n	800a660 <_printf_i+0x140>
 800a718:	0022      	movs	r2, r4
 800a71a:	2301      	movs	r3, #1
 800a71c:	9906      	ldr	r1, [sp, #24]
 800a71e:	9805      	ldr	r0, [sp, #20]
 800a720:	9e07      	ldr	r6, [sp, #28]
 800a722:	3219      	adds	r2, #25
 800a724:	47b0      	blx	r6
 800a726:	1c43      	adds	r3, r0, #1
 800a728:	d098      	beq.n	800a65c <_printf_i+0x13c>
 800a72a:	3501      	adds	r5, #1
 800a72c:	68e3      	ldr	r3, [r4, #12]
 800a72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a730:	1a9b      	subs	r3, r3, r2
 800a732:	42ab      	cmp	r3, r5
 800a734:	dcf0      	bgt.n	800a718 <_printf_i+0x1f8>
 800a736:	e7e9      	b.n	800a70c <_printf_i+0x1ec>
 800a738:	2500      	movs	r5, #0
 800a73a:	e7f7      	b.n	800a72c <_printf_i+0x20c>
 800a73c:	0800e3a1 	.word	0x0800e3a1
 800a740:	0800e3b2 	.word	0x0800e3b2

0800a744 <memchr>:
 800a744:	b2c9      	uxtb	r1, r1
 800a746:	1882      	adds	r2, r0, r2
 800a748:	4290      	cmp	r0, r2
 800a74a:	d101      	bne.n	800a750 <memchr+0xc>
 800a74c:	2000      	movs	r0, #0
 800a74e:	4770      	bx	lr
 800a750:	7803      	ldrb	r3, [r0, #0]
 800a752:	428b      	cmp	r3, r1
 800a754:	d0fb      	beq.n	800a74e <memchr+0xa>
 800a756:	3001      	adds	r0, #1
 800a758:	e7f6      	b.n	800a748 <memchr+0x4>

0800a75a <memcpy>:
 800a75a:	2300      	movs	r3, #0
 800a75c:	b510      	push	{r4, lr}
 800a75e:	429a      	cmp	r2, r3
 800a760:	d100      	bne.n	800a764 <memcpy+0xa>
 800a762:	bd10      	pop	{r4, pc}
 800a764:	5ccc      	ldrb	r4, [r1, r3]
 800a766:	54c4      	strb	r4, [r0, r3]
 800a768:	3301      	adds	r3, #1
 800a76a:	e7f8      	b.n	800a75e <memcpy+0x4>

0800a76c <memmove>:
 800a76c:	b510      	push	{r4, lr}
 800a76e:	4288      	cmp	r0, r1
 800a770:	d902      	bls.n	800a778 <memmove+0xc>
 800a772:	188b      	adds	r3, r1, r2
 800a774:	4298      	cmp	r0, r3
 800a776:	d303      	bcc.n	800a780 <memmove+0x14>
 800a778:	2300      	movs	r3, #0
 800a77a:	e007      	b.n	800a78c <memmove+0x20>
 800a77c:	5c8b      	ldrb	r3, [r1, r2]
 800a77e:	5483      	strb	r3, [r0, r2]
 800a780:	3a01      	subs	r2, #1
 800a782:	d2fb      	bcs.n	800a77c <memmove+0x10>
 800a784:	bd10      	pop	{r4, pc}
 800a786:	5ccc      	ldrb	r4, [r1, r3]
 800a788:	54c4      	strb	r4, [r0, r3]
 800a78a:	3301      	adds	r3, #1
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d1fa      	bne.n	800a786 <memmove+0x1a>
 800a790:	e7f8      	b.n	800a784 <memmove+0x18>

0800a792 <_realloc_r>:
 800a792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a794:	0007      	movs	r7, r0
 800a796:	000e      	movs	r6, r1
 800a798:	0014      	movs	r4, r2
 800a79a:	2900      	cmp	r1, #0
 800a79c:	d105      	bne.n	800a7aa <_realloc_r+0x18>
 800a79e:	0011      	movs	r1, r2
 800a7a0:	f7ff fc32 	bl	800a008 <_malloc_r>
 800a7a4:	0005      	movs	r5, r0
 800a7a6:	0028      	movs	r0, r5
 800a7a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a7aa:	2a00      	cmp	r2, #0
 800a7ac:	d103      	bne.n	800a7b6 <_realloc_r+0x24>
 800a7ae:	f7ff fbbf 	bl	8009f30 <_free_r>
 800a7b2:	0025      	movs	r5, r4
 800a7b4:	e7f7      	b.n	800a7a6 <_realloc_r+0x14>
 800a7b6:	f000 f81b 	bl	800a7f0 <_malloc_usable_size_r>
 800a7ba:	9001      	str	r0, [sp, #4]
 800a7bc:	4284      	cmp	r4, r0
 800a7be:	d803      	bhi.n	800a7c8 <_realloc_r+0x36>
 800a7c0:	0035      	movs	r5, r6
 800a7c2:	0843      	lsrs	r3, r0, #1
 800a7c4:	42a3      	cmp	r3, r4
 800a7c6:	d3ee      	bcc.n	800a7a6 <_realloc_r+0x14>
 800a7c8:	0021      	movs	r1, r4
 800a7ca:	0038      	movs	r0, r7
 800a7cc:	f7ff fc1c 	bl	800a008 <_malloc_r>
 800a7d0:	1e05      	subs	r5, r0, #0
 800a7d2:	d0e8      	beq.n	800a7a6 <_realloc_r+0x14>
 800a7d4:	9b01      	ldr	r3, [sp, #4]
 800a7d6:	0022      	movs	r2, r4
 800a7d8:	429c      	cmp	r4, r3
 800a7da:	d900      	bls.n	800a7de <_realloc_r+0x4c>
 800a7dc:	001a      	movs	r2, r3
 800a7de:	0031      	movs	r1, r6
 800a7e0:	0028      	movs	r0, r5
 800a7e2:	f7ff ffba 	bl	800a75a <memcpy>
 800a7e6:	0031      	movs	r1, r6
 800a7e8:	0038      	movs	r0, r7
 800a7ea:	f7ff fba1 	bl	8009f30 <_free_r>
 800a7ee:	e7da      	b.n	800a7a6 <_realloc_r+0x14>

0800a7f0 <_malloc_usable_size_r>:
 800a7f0:	1f0b      	subs	r3, r1, #4
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	1f18      	subs	r0, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	da01      	bge.n	800a7fe <_malloc_usable_size_r+0xe>
 800a7fa:	580b      	ldr	r3, [r1, r0]
 800a7fc:	18c0      	adds	r0, r0, r3
 800a7fe:	4770      	bx	lr

0800a800 <cos>:
 800a800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a802:	4a1e      	ldr	r2, [pc, #120]	; (800a87c <cos+0x7c>)
 800a804:	004b      	lsls	r3, r1, #1
 800a806:	b087      	sub	sp, #28
 800a808:	085b      	lsrs	r3, r3, #1
 800a80a:	4293      	cmp	r3, r2
 800a80c:	dc04      	bgt.n	800a818 <cos+0x18>
 800a80e:	2200      	movs	r2, #0
 800a810:	2300      	movs	r3, #0
 800a812:	f000 fa6d 	bl	800acf0 <__kernel_cos>
 800a816:	e006      	b.n	800a826 <cos+0x26>
 800a818:	4a19      	ldr	r2, [pc, #100]	; (800a880 <cos+0x80>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	dd05      	ble.n	800a82a <cos+0x2a>
 800a81e:	0002      	movs	r2, r0
 800a820:	000b      	movs	r3, r1
 800a822:	f7f7 f911 	bl	8001a48 <__aeabi_dsub>
 800a826:	b007      	add	sp, #28
 800a828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82a:	aa02      	add	r2, sp, #8
 800a82c:	f000 f870 	bl	800a910 <__ieee754_rem_pio2>
 800a830:	9c04      	ldr	r4, [sp, #16]
 800a832:	9d05      	ldr	r5, [sp, #20]
 800a834:	2303      	movs	r3, #3
 800a836:	4003      	ands	r3, r0
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d008      	beq.n	800a84e <cos+0x4e>
 800a83c:	9802      	ldr	r0, [sp, #8]
 800a83e:	9903      	ldr	r1, [sp, #12]
 800a840:	2b02      	cmp	r3, #2
 800a842:	d00f      	beq.n	800a864 <cos+0x64>
 800a844:	2b00      	cmp	r3, #0
 800a846:	d112      	bne.n	800a86e <cos+0x6e>
 800a848:	0022      	movs	r2, r4
 800a84a:	002b      	movs	r3, r5
 800a84c:	e7e1      	b.n	800a812 <cos+0x12>
 800a84e:	9300      	str	r3, [sp, #0]
 800a850:	0022      	movs	r2, r4
 800a852:	9802      	ldr	r0, [sp, #8]
 800a854:	9903      	ldr	r1, [sp, #12]
 800a856:	002b      	movs	r3, r5
 800a858:	f000 fe74 	bl	800b544 <__kernel_sin>
 800a85c:	2380      	movs	r3, #128	; 0x80
 800a85e:	061b      	lsls	r3, r3, #24
 800a860:	18c9      	adds	r1, r1, r3
 800a862:	e7e0      	b.n	800a826 <cos+0x26>
 800a864:	0022      	movs	r2, r4
 800a866:	002b      	movs	r3, r5
 800a868:	f000 fa42 	bl	800acf0 <__kernel_cos>
 800a86c:	e7f6      	b.n	800a85c <cos+0x5c>
 800a86e:	2301      	movs	r3, #1
 800a870:	0022      	movs	r2, r4
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	002b      	movs	r3, r5
 800a876:	f000 fe65 	bl	800b544 <__kernel_sin>
 800a87a:	e7d4      	b.n	800a826 <cos+0x26>
 800a87c:	3fe921fb 	.word	0x3fe921fb
 800a880:	7fefffff 	.word	0x7fefffff

0800a884 <sin>:
 800a884:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a886:	4a20      	ldr	r2, [pc, #128]	; (800a908 <sin+0x84>)
 800a888:	004b      	lsls	r3, r1, #1
 800a88a:	b087      	sub	sp, #28
 800a88c:	085b      	lsrs	r3, r3, #1
 800a88e:	4293      	cmp	r3, r2
 800a890:	dc06      	bgt.n	800a8a0 <sin+0x1c>
 800a892:	2300      	movs	r3, #0
 800a894:	2200      	movs	r2, #0
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	2300      	movs	r3, #0
 800a89a:	f000 fe53 	bl	800b544 <__kernel_sin>
 800a89e:	e006      	b.n	800a8ae <sin+0x2a>
 800a8a0:	4a1a      	ldr	r2, [pc, #104]	; (800a90c <sin+0x88>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	dd05      	ble.n	800a8b2 <sin+0x2e>
 800a8a6:	0002      	movs	r2, r0
 800a8a8:	000b      	movs	r3, r1
 800a8aa:	f7f7 f8cd 	bl	8001a48 <__aeabi_dsub>
 800a8ae:	b007      	add	sp, #28
 800a8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8b2:	aa02      	add	r2, sp, #8
 800a8b4:	f000 f82c 	bl	800a910 <__ieee754_rem_pio2>
 800a8b8:	9c04      	ldr	r4, [sp, #16]
 800a8ba:	9d05      	ldr	r5, [sp, #20]
 800a8bc:	2303      	movs	r3, #3
 800a8be:	4003      	ands	r3, r0
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d00a      	beq.n	800a8da <sin+0x56>
 800a8c4:	9802      	ldr	r0, [sp, #8]
 800a8c6:	9903      	ldr	r1, [sp, #12]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d00d      	beq.n	800a8e8 <sin+0x64>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d115      	bne.n	800a8fc <sin+0x78>
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	0022      	movs	r2, r4
 800a8d6:	002b      	movs	r3, r5
 800a8d8:	e7df      	b.n	800a89a <sin+0x16>
 800a8da:	0022      	movs	r2, r4
 800a8dc:	9802      	ldr	r0, [sp, #8]
 800a8de:	9903      	ldr	r1, [sp, #12]
 800a8e0:	002b      	movs	r3, r5
 800a8e2:	f000 fa05 	bl	800acf0 <__kernel_cos>
 800a8e6:	e7e2      	b.n	800a8ae <sin+0x2a>
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	0022      	movs	r2, r4
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	002b      	movs	r3, r5
 800a8f0:	f000 fe28 	bl	800b544 <__kernel_sin>
 800a8f4:	2380      	movs	r3, #128	; 0x80
 800a8f6:	061b      	lsls	r3, r3, #24
 800a8f8:	18c9      	adds	r1, r1, r3
 800a8fa:	e7d8      	b.n	800a8ae <sin+0x2a>
 800a8fc:	0022      	movs	r2, r4
 800a8fe:	002b      	movs	r3, r5
 800a900:	f000 f9f6 	bl	800acf0 <__kernel_cos>
 800a904:	e7f6      	b.n	800a8f4 <sin+0x70>
 800a906:	46c0      	nop			; (mov r8, r8)
 800a908:	3fe921fb 	.word	0x3fe921fb
 800a90c:	7fefffff 	.word	0x7fefffff

0800a910 <__ieee754_rem_pio2>:
 800a910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a912:	004b      	lsls	r3, r1, #1
 800a914:	b091      	sub	sp, #68	; 0x44
 800a916:	085b      	lsrs	r3, r3, #1
 800a918:	9302      	str	r3, [sp, #8]
 800a91a:	0017      	movs	r7, r2
 800a91c:	4bb6      	ldr	r3, [pc, #728]	; (800abf8 <__ieee754_rem_pio2+0x2e8>)
 800a91e:	9a02      	ldr	r2, [sp, #8]
 800a920:	0004      	movs	r4, r0
 800a922:	000d      	movs	r5, r1
 800a924:	9109      	str	r1, [sp, #36]	; 0x24
 800a926:	429a      	cmp	r2, r3
 800a928:	dc09      	bgt.n	800a93e <__ieee754_rem_pio2+0x2e>
 800a92a:	0002      	movs	r2, r0
 800a92c:	000b      	movs	r3, r1
 800a92e:	603a      	str	r2, [r7, #0]
 800a930:	607b      	str	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	60ba      	str	r2, [r7, #8]
 800a938:	60fb      	str	r3, [r7, #12]
 800a93a:	2600      	movs	r6, #0
 800a93c:	e025      	b.n	800a98a <__ieee754_rem_pio2+0x7a>
 800a93e:	4baf      	ldr	r3, [pc, #700]	; (800abfc <__ieee754_rem_pio2+0x2ec>)
 800a940:	9a02      	ldr	r2, [sp, #8]
 800a942:	429a      	cmp	r2, r3
 800a944:	dd00      	ble.n	800a948 <__ieee754_rem_pio2+0x38>
 800a946:	e06e      	b.n	800aa26 <__ieee754_rem_pio2+0x116>
 800a948:	4ead      	ldr	r6, [pc, #692]	; (800ac00 <__ieee754_rem_pio2+0x2f0>)
 800a94a:	4aae      	ldr	r2, [pc, #696]	; (800ac04 <__ieee754_rem_pio2+0x2f4>)
 800a94c:	2d00      	cmp	r5, #0
 800a94e:	dd35      	ble.n	800a9bc <__ieee754_rem_pio2+0xac>
 800a950:	0020      	movs	r0, r4
 800a952:	0029      	movs	r1, r5
 800a954:	4baa      	ldr	r3, [pc, #680]	; (800ac00 <__ieee754_rem_pio2+0x2f0>)
 800a956:	f7f7 f877 	bl	8001a48 <__aeabi_dsub>
 800a95a:	9b02      	ldr	r3, [sp, #8]
 800a95c:	0004      	movs	r4, r0
 800a95e:	000d      	movs	r5, r1
 800a960:	42b3      	cmp	r3, r6
 800a962:	d015      	beq.n	800a990 <__ieee754_rem_pio2+0x80>
 800a964:	4aa8      	ldr	r2, [pc, #672]	; (800ac08 <__ieee754_rem_pio2+0x2f8>)
 800a966:	4ba9      	ldr	r3, [pc, #676]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800a968:	f7f7 f86e 	bl	8001a48 <__aeabi_dsub>
 800a96c:	0002      	movs	r2, r0
 800a96e:	000b      	movs	r3, r1
 800a970:	0020      	movs	r0, r4
 800a972:	603a      	str	r2, [r7, #0]
 800a974:	607b      	str	r3, [r7, #4]
 800a976:	0029      	movs	r1, r5
 800a978:	f7f7 f866 	bl	8001a48 <__aeabi_dsub>
 800a97c:	4aa2      	ldr	r2, [pc, #648]	; (800ac08 <__ieee754_rem_pio2+0x2f8>)
 800a97e:	4ba3      	ldr	r3, [pc, #652]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800a980:	f7f7 f862 	bl	8001a48 <__aeabi_dsub>
 800a984:	2601      	movs	r6, #1
 800a986:	60b8      	str	r0, [r7, #8]
 800a988:	60f9      	str	r1, [r7, #12]
 800a98a:	0030      	movs	r0, r6
 800a98c:	b011      	add	sp, #68	; 0x44
 800a98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a990:	22d3      	movs	r2, #211	; 0xd3
 800a992:	4b9e      	ldr	r3, [pc, #632]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800a994:	0552      	lsls	r2, r2, #21
 800a996:	f7f7 f857 	bl	8001a48 <__aeabi_dsub>
 800a99a:	4a9d      	ldr	r2, [pc, #628]	; (800ac10 <__ieee754_rem_pio2+0x300>)
 800a99c:	4b9d      	ldr	r3, [pc, #628]	; (800ac14 <__ieee754_rem_pio2+0x304>)
 800a99e:	0004      	movs	r4, r0
 800a9a0:	000d      	movs	r5, r1
 800a9a2:	f7f7 f851 	bl	8001a48 <__aeabi_dsub>
 800a9a6:	0002      	movs	r2, r0
 800a9a8:	000b      	movs	r3, r1
 800a9aa:	0020      	movs	r0, r4
 800a9ac:	603a      	str	r2, [r7, #0]
 800a9ae:	607b      	str	r3, [r7, #4]
 800a9b0:	0029      	movs	r1, r5
 800a9b2:	f7f7 f849 	bl	8001a48 <__aeabi_dsub>
 800a9b6:	4a96      	ldr	r2, [pc, #600]	; (800ac10 <__ieee754_rem_pio2+0x300>)
 800a9b8:	4b96      	ldr	r3, [pc, #600]	; (800ac14 <__ieee754_rem_pio2+0x304>)
 800a9ba:	e7e1      	b.n	800a980 <__ieee754_rem_pio2+0x70>
 800a9bc:	0020      	movs	r0, r4
 800a9be:	0029      	movs	r1, r5
 800a9c0:	4b8f      	ldr	r3, [pc, #572]	; (800ac00 <__ieee754_rem_pio2+0x2f0>)
 800a9c2:	f7f5 fe97 	bl	80006f4 <__aeabi_dadd>
 800a9c6:	9b02      	ldr	r3, [sp, #8]
 800a9c8:	0004      	movs	r4, r0
 800a9ca:	000d      	movs	r5, r1
 800a9cc:	42b3      	cmp	r3, r6
 800a9ce:	d014      	beq.n	800a9fa <__ieee754_rem_pio2+0xea>
 800a9d0:	4a8d      	ldr	r2, [pc, #564]	; (800ac08 <__ieee754_rem_pio2+0x2f8>)
 800a9d2:	4b8e      	ldr	r3, [pc, #568]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800a9d4:	f7f5 fe8e 	bl	80006f4 <__aeabi_dadd>
 800a9d8:	0002      	movs	r2, r0
 800a9da:	000b      	movs	r3, r1
 800a9dc:	0020      	movs	r0, r4
 800a9de:	603a      	str	r2, [r7, #0]
 800a9e0:	607b      	str	r3, [r7, #4]
 800a9e2:	0029      	movs	r1, r5
 800a9e4:	f7f7 f830 	bl	8001a48 <__aeabi_dsub>
 800a9e8:	4a87      	ldr	r2, [pc, #540]	; (800ac08 <__ieee754_rem_pio2+0x2f8>)
 800a9ea:	4b88      	ldr	r3, [pc, #544]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800a9ec:	f7f5 fe82 	bl	80006f4 <__aeabi_dadd>
 800a9f0:	2601      	movs	r6, #1
 800a9f2:	60b8      	str	r0, [r7, #8]
 800a9f4:	60f9      	str	r1, [r7, #12]
 800a9f6:	4276      	negs	r6, r6
 800a9f8:	e7c7      	b.n	800a98a <__ieee754_rem_pio2+0x7a>
 800a9fa:	22d3      	movs	r2, #211	; 0xd3
 800a9fc:	4b83      	ldr	r3, [pc, #524]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800a9fe:	0552      	lsls	r2, r2, #21
 800aa00:	f7f5 fe78 	bl	80006f4 <__aeabi_dadd>
 800aa04:	4a82      	ldr	r2, [pc, #520]	; (800ac10 <__ieee754_rem_pio2+0x300>)
 800aa06:	4b83      	ldr	r3, [pc, #524]	; (800ac14 <__ieee754_rem_pio2+0x304>)
 800aa08:	0004      	movs	r4, r0
 800aa0a:	000d      	movs	r5, r1
 800aa0c:	f7f5 fe72 	bl	80006f4 <__aeabi_dadd>
 800aa10:	0002      	movs	r2, r0
 800aa12:	000b      	movs	r3, r1
 800aa14:	0020      	movs	r0, r4
 800aa16:	603a      	str	r2, [r7, #0]
 800aa18:	607b      	str	r3, [r7, #4]
 800aa1a:	0029      	movs	r1, r5
 800aa1c:	f7f7 f814 	bl	8001a48 <__aeabi_dsub>
 800aa20:	4a7b      	ldr	r2, [pc, #492]	; (800ac10 <__ieee754_rem_pio2+0x300>)
 800aa22:	4b7c      	ldr	r3, [pc, #496]	; (800ac14 <__ieee754_rem_pio2+0x304>)
 800aa24:	e7e2      	b.n	800a9ec <__ieee754_rem_pio2+0xdc>
 800aa26:	4b7c      	ldr	r3, [pc, #496]	; (800ac18 <__ieee754_rem_pio2+0x308>)
 800aa28:	9a02      	ldr	r2, [sp, #8]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	dd00      	ble.n	800aa30 <__ieee754_rem_pio2+0x120>
 800aa2e:	e0d3      	b.n	800abd8 <__ieee754_rem_pio2+0x2c8>
 800aa30:	0020      	movs	r0, r4
 800aa32:	0029      	movs	r1, r5
 800aa34:	f000 fe32 	bl	800b69c <fabs>
 800aa38:	4a78      	ldr	r2, [pc, #480]	; (800ac1c <__ieee754_rem_pio2+0x30c>)
 800aa3a:	4b79      	ldr	r3, [pc, #484]	; (800ac20 <__ieee754_rem_pio2+0x310>)
 800aa3c:	0004      	movs	r4, r0
 800aa3e:	000d      	movs	r5, r1
 800aa40:	f7f6 fd96 	bl	8001570 <__aeabi_dmul>
 800aa44:	2200      	movs	r2, #0
 800aa46:	4b77      	ldr	r3, [pc, #476]	; (800ac24 <__ieee754_rem_pio2+0x314>)
 800aa48:	f7f5 fe54 	bl	80006f4 <__aeabi_dadd>
 800aa4c:	f7f7 fb8e 	bl	800216c <__aeabi_d2iz>
 800aa50:	0006      	movs	r6, r0
 800aa52:	f7f7 fbc1 	bl	80021d8 <__aeabi_i2d>
 800aa56:	4a6b      	ldr	r2, [pc, #428]	; (800ac04 <__ieee754_rem_pio2+0x2f4>)
 800aa58:	4b69      	ldr	r3, [pc, #420]	; (800ac00 <__ieee754_rem_pio2+0x2f0>)
 800aa5a:	9006      	str	r0, [sp, #24]
 800aa5c:	9107      	str	r1, [sp, #28]
 800aa5e:	f7f6 fd87 	bl	8001570 <__aeabi_dmul>
 800aa62:	0002      	movs	r2, r0
 800aa64:	000b      	movs	r3, r1
 800aa66:	0020      	movs	r0, r4
 800aa68:	0029      	movs	r1, r5
 800aa6a:	f7f6 ffed 	bl	8001a48 <__aeabi_dsub>
 800aa6e:	4a66      	ldr	r2, [pc, #408]	; (800ac08 <__ieee754_rem_pio2+0x2f8>)
 800aa70:	9004      	str	r0, [sp, #16]
 800aa72:	9105      	str	r1, [sp, #20]
 800aa74:	9806      	ldr	r0, [sp, #24]
 800aa76:	9907      	ldr	r1, [sp, #28]
 800aa78:	4b64      	ldr	r3, [pc, #400]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800aa7a:	f7f6 fd79 	bl	8001570 <__aeabi_dmul>
 800aa7e:	0004      	movs	r4, r0
 800aa80:	000d      	movs	r5, r1
 800aa82:	2e1f      	cmp	r6, #31
 800aa84:	dc0f      	bgt.n	800aaa6 <__ieee754_rem_pio2+0x196>
 800aa86:	4a68      	ldr	r2, [pc, #416]	; (800ac28 <__ieee754_rem_pio2+0x318>)
 800aa88:	1e73      	subs	r3, r6, #1
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	589b      	ldr	r3, [r3, r2]
 800aa8e:	9a02      	ldr	r2, [sp, #8]
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d008      	beq.n	800aaa6 <__ieee754_rem_pio2+0x196>
 800aa94:	9804      	ldr	r0, [sp, #16]
 800aa96:	9905      	ldr	r1, [sp, #20]
 800aa98:	0022      	movs	r2, r4
 800aa9a:	002b      	movs	r3, r5
 800aa9c:	f7f6 ffd4 	bl	8001a48 <__aeabi_dsub>
 800aaa0:	6038      	str	r0, [r7, #0]
 800aaa2:	6079      	str	r1, [r7, #4]
 800aaa4:	e012      	b.n	800aacc <__ieee754_rem_pio2+0x1bc>
 800aaa6:	0022      	movs	r2, r4
 800aaa8:	9804      	ldr	r0, [sp, #16]
 800aaaa:	9905      	ldr	r1, [sp, #20]
 800aaac:	002b      	movs	r3, r5
 800aaae:	f7f6 ffcb 	bl	8001a48 <__aeabi_dsub>
 800aab2:	9b02      	ldr	r3, [sp, #8]
 800aab4:	151b      	asrs	r3, r3, #20
 800aab6:	9308      	str	r3, [sp, #32]
 800aab8:	9a08      	ldr	r2, [sp, #32]
 800aaba:	004b      	lsls	r3, r1, #1
 800aabc:	0d5b      	lsrs	r3, r3, #21
 800aabe:	1ad3      	subs	r3, r2, r3
 800aac0:	2b10      	cmp	r3, #16
 800aac2:	dc21      	bgt.n	800ab08 <__ieee754_rem_pio2+0x1f8>
 800aac4:	0002      	movs	r2, r0
 800aac6:	000b      	movs	r3, r1
 800aac8:	603a      	str	r2, [r7, #0]
 800aaca:	607b      	str	r3, [r7, #4]
 800aacc:	9804      	ldr	r0, [sp, #16]
 800aace:	9905      	ldr	r1, [sp, #20]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	9302      	str	r3, [sp, #8]
 800aad6:	9b02      	ldr	r3, [sp, #8]
 800aad8:	f7f6 ffb6 	bl	8001a48 <__aeabi_dsub>
 800aadc:	0022      	movs	r2, r4
 800aade:	002b      	movs	r3, r5
 800aae0:	f7f6 ffb2 	bl	8001a48 <__aeabi_dsub>
 800aae4:	000b      	movs	r3, r1
 800aae6:	0002      	movs	r2, r0
 800aae8:	60ba      	str	r2, [r7, #8]
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	db00      	blt.n	800aaf4 <__ieee754_rem_pio2+0x1e4>
 800aaf2:	e74a      	b.n	800a98a <__ieee754_rem_pio2+0x7a>
 800aaf4:	2380      	movs	r3, #128	; 0x80
 800aaf6:	061b      	lsls	r3, r3, #24
 800aaf8:	469c      	mov	ip, r3
 800aafa:	9c02      	ldr	r4, [sp, #8]
 800aafc:	18c9      	adds	r1, r1, r3
 800aafe:	4464      	add	r4, ip
 800ab00:	607c      	str	r4, [r7, #4]
 800ab02:	60b8      	str	r0, [r7, #8]
 800ab04:	60f9      	str	r1, [r7, #12]
 800ab06:	e776      	b.n	800a9f6 <__ieee754_rem_pio2+0xe6>
 800ab08:	22d3      	movs	r2, #211	; 0xd3
 800ab0a:	9806      	ldr	r0, [sp, #24]
 800ab0c:	9907      	ldr	r1, [sp, #28]
 800ab0e:	4b3f      	ldr	r3, [pc, #252]	; (800ac0c <__ieee754_rem_pio2+0x2fc>)
 800ab10:	0552      	lsls	r2, r2, #21
 800ab12:	f7f6 fd2d 	bl	8001570 <__aeabi_dmul>
 800ab16:	0004      	movs	r4, r0
 800ab18:	000d      	movs	r5, r1
 800ab1a:	0002      	movs	r2, r0
 800ab1c:	000b      	movs	r3, r1
 800ab1e:	9804      	ldr	r0, [sp, #16]
 800ab20:	9905      	ldr	r1, [sp, #20]
 800ab22:	f7f6 ff91 	bl	8001a48 <__aeabi_dsub>
 800ab26:	0002      	movs	r2, r0
 800ab28:	000b      	movs	r3, r1
 800ab2a:	9002      	str	r0, [sp, #8]
 800ab2c:	9103      	str	r1, [sp, #12]
 800ab2e:	9804      	ldr	r0, [sp, #16]
 800ab30:	9905      	ldr	r1, [sp, #20]
 800ab32:	f7f6 ff89 	bl	8001a48 <__aeabi_dsub>
 800ab36:	0022      	movs	r2, r4
 800ab38:	002b      	movs	r3, r5
 800ab3a:	f7f6 ff85 	bl	8001a48 <__aeabi_dsub>
 800ab3e:	0004      	movs	r4, r0
 800ab40:	000d      	movs	r5, r1
 800ab42:	9806      	ldr	r0, [sp, #24]
 800ab44:	9907      	ldr	r1, [sp, #28]
 800ab46:	4a32      	ldr	r2, [pc, #200]	; (800ac10 <__ieee754_rem_pio2+0x300>)
 800ab48:	4b32      	ldr	r3, [pc, #200]	; (800ac14 <__ieee754_rem_pio2+0x304>)
 800ab4a:	f7f6 fd11 	bl	8001570 <__aeabi_dmul>
 800ab4e:	0022      	movs	r2, r4
 800ab50:	002b      	movs	r3, r5
 800ab52:	f7f6 ff79 	bl	8001a48 <__aeabi_dsub>
 800ab56:	0002      	movs	r2, r0
 800ab58:	000b      	movs	r3, r1
 800ab5a:	0004      	movs	r4, r0
 800ab5c:	000d      	movs	r5, r1
 800ab5e:	9802      	ldr	r0, [sp, #8]
 800ab60:	9903      	ldr	r1, [sp, #12]
 800ab62:	f7f6 ff71 	bl	8001a48 <__aeabi_dsub>
 800ab66:	9a08      	ldr	r2, [sp, #32]
 800ab68:	004b      	lsls	r3, r1, #1
 800ab6a:	0d5b      	lsrs	r3, r3, #21
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b31      	cmp	r3, #49	; 0x31
 800ab70:	dc08      	bgt.n	800ab84 <__ieee754_rem_pio2+0x274>
 800ab72:	0002      	movs	r2, r0
 800ab74:	000b      	movs	r3, r1
 800ab76:	603a      	str	r2, [r7, #0]
 800ab78:	607b      	str	r3, [r7, #4]
 800ab7a:	9a02      	ldr	r2, [sp, #8]
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	9204      	str	r2, [sp, #16]
 800ab80:	9305      	str	r3, [sp, #20]
 800ab82:	e7a3      	b.n	800aacc <__ieee754_rem_pio2+0x1bc>
 800ab84:	22b8      	movs	r2, #184	; 0xb8
 800ab86:	9806      	ldr	r0, [sp, #24]
 800ab88:	9907      	ldr	r1, [sp, #28]
 800ab8a:	4b22      	ldr	r3, [pc, #136]	; (800ac14 <__ieee754_rem_pio2+0x304>)
 800ab8c:	0592      	lsls	r2, r2, #22
 800ab8e:	f7f6 fcef 	bl	8001570 <__aeabi_dmul>
 800ab92:	0004      	movs	r4, r0
 800ab94:	000d      	movs	r5, r1
 800ab96:	0002      	movs	r2, r0
 800ab98:	000b      	movs	r3, r1
 800ab9a:	9802      	ldr	r0, [sp, #8]
 800ab9c:	9903      	ldr	r1, [sp, #12]
 800ab9e:	f7f6 ff53 	bl	8001a48 <__aeabi_dsub>
 800aba2:	0002      	movs	r2, r0
 800aba4:	000b      	movs	r3, r1
 800aba6:	9004      	str	r0, [sp, #16]
 800aba8:	9105      	str	r1, [sp, #20]
 800abaa:	9802      	ldr	r0, [sp, #8]
 800abac:	9903      	ldr	r1, [sp, #12]
 800abae:	f7f6 ff4b 	bl	8001a48 <__aeabi_dsub>
 800abb2:	0022      	movs	r2, r4
 800abb4:	002b      	movs	r3, r5
 800abb6:	f7f6 ff47 	bl	8001a48 <__aeabi_dsub>
 800abba:	0004      	movs	r4, r0
 800abbc:	000d      	movs	r5, r1
 800abbe:	9806      	ldr	r0, [sp, #24]
 800abc0:	9907      	ldr	r1, [sp, #28]
 800abc2:	4a1a      	ldr	r2, [pc, #104]	; (800ac2c <__ieee754_rem_pio2+0x31c>)
 800abc4:	4b1a      	ldr	r3, [pc, #104]	; (800ac30 <__ieee754_rem_pio2+0x320>)
 800abc6:	f7f6 fcd3 	bl	8001570 <__aeabi_dmul>
 800abca:	0022      	movs	r2, r4
 800abcc:	002b      	movs	r3, r5
 800abce:	f7f6 ff3b 	bl	8001a48 <__aeabi_dsub>
 800abd2:	0004      	movs	r4, r0
 800abd4:	000d      	movs	r5, r1
 800abd6:	e75d      	b.n	800aa94 <__ieee754_rem_pio2+0x184>
 800abd8:	4b16      	ldr	r3, [pc, #88]	; (800ac34 <__ieee754_rem_pio2+0x324>)
 800abda:	9a02      	ldr	r2, [sp, #8]
 800abdc:	429a      	cmp	r2, r3
 800abde:	dd2b      	ble.n	800ac38 <__ieee754_rem_pio2+0x328>
 800abe0:	0022      	movs	r2, r4
 800abe2:	002b      	movs	r3, r5
 800abe4:	0020      	movs	r0, r4
 800abe6:	0029      	movs	r1, r5
 800abe8:	f7f6 ff2e 	bl	8001a48 <__aeabi_dsub>
 800abec:	60b8      	str	r0, [r7, #8]
 800abee:	60f9      	str	r1, [r7, #12]
 800abf0:	6038      	str	r0, [r7, #0]
 800abf2:	6079      	str	r1, [r7, #4]
 800abf4:	e6a1      	b.n	800a93a <__ieee754_rem_pio2+0x2a>
 800abf6:	46c0      	nop			; (mov r8, r8)
 800abf8:	3fe921fb 	.word	0x3fe921fb
 800abfc:	4002d97b 	.word	0x4002d97b
 800ac00:	3ff921fb 	.word	0x3ff921fb
 800ac04:	54400000 	.word	0x54400000
 800ac08:	1a626331 	.word	0x1a626331
 800ac0c:	3dd0b461 	.word	0x3dd0b461
 800ac10:	2e037073 	.word	0x2e037073
 800ac14:	3ba3198a 	.word	0x3ba3198a
 800ac18:	413921fb 	.word	0x413921fb
 800ac1c:	6dc9c883 	.word	0x6dc9c883
 800ac20:	3fe45f30 	.word	0x3fe45f30
 800ac24:	3fe00000 	.word	0x3fe00000
 800ac28:	0800e3c4 	.word	0x0800e3c4
 800ac2c:	252049c1 	.word	0x252049c1
 800ac30:	397b839a 	.word	0x397b839a
 800ac34:	7fefffff 	.word	0x7fefffff
 800ac38:	9a02      	ldr	r2, [sp, #8]
 800ac3a:	0020      	movs	r0, r4
 800ac3c:	1516      	asrs	r6, r2, #20
 800ac3e:	4a29      	ldr	r2, [pc, #164]	; (800ace4 <__ieee754_rem_pio2+0x3d4>)
 800ac40:	18b6      	adds	r6, r6, r2
 800ac42:	9a02      	ldr	r2, [sp, #8]
 800ac44:	0533      	lsls	r3, r6, #20
 800ac46:	1ad5      	subs	r5, r2, r3
 800ac48:	0029      	movs	r1, r5
 800ac4a:	f7f7 fa8f 	bl	800216c <__aeabi_d2iz>
 800ac4e:	f7f7 fac3 	bl	80021d8 <__aeabi_i2d>
 800ac52:	0002      	movs	r2, r0
 800ac54:	000b      	movs	r3, r1
 800ac56:	0020      	movs	r0, r4
 800ac58:	0029      	movs	r1, r5
 800ac5a:	920a      	str	r2, [sp, #40]	; 0x28
 800ac5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac5e:	f7f6 fef3 	bl	8001a48 <__aeabi_dsub>
 800ac62:	2200      	movs	r2, #0
 800ac64:	4b20      	ldr	r3, [pc, #128]	; (800ace8 <__ieee754_rem_pio2+0x3d8>)
 800ac66:	f7f6 fc83 	bl	8001570 <__aeabi_dmul>
 800ac6a:	000d      	movs	r5, r1
 800ac6c:	0004      	movs	r4, r0
 800ac6e:	f7f7 fa7d 	bl	800216c <__aeabi_d2iz>
 800ac72:	f7f7 fab1 	bl	80021d8 <__aeabi_i2d>
 800ac76:	0002      	movs	r2, r0
 800ac78:	000b      	movs	r3, r1
 800ac7a:	0020      	movs	r0, r4
 800ac7c:	0029      	movs	r1, r5
 800ac7e:	920c      	str	r2, [sp, #48]	; 0x30
 800ac80:	930d      	str	r3, [sp, #52]	; 0x34
 800ac82:	f7f6 fee1 	bl	8001a48 <__aeabi_dsub>
 800ac86:	2200      	movs	r2, #0
 800ac88:	4b17      	ldr	r3, [pc, #92]	; (800ace8 <__ieee754_rem_pio2+0x3d8>)
 800ac8a:	f7f6 fc71 	bl	8001570 <__aeabi_dmul>
 800ac8e:	2503      	movs	r5, #3
 800ac90:	900e      	str	r0, [sp, #56]	; 0x38
 800ac92:	910f      	str	r1, [sp, #60]	; 0x3c
 800ac94:	ac0a      	add	r4, sp, #40	; 0x28
 800ac96:	2200      	movs	r2, #0
 800ac98:	6920      	ldr	r0, [r4, #16]
 800ac9a:	6961      	ldr	r1, [r4, #20]
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9502      	str	r5, [sp, #8]
 800aca0:	3c08      	subs	r4, #8
 800aca2:	3d01      	subs	r5, #1
 800aca4:	f7f5 fbc0 	bl	8000428 <__aeabi_dcmpeq>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d1f4      	bne.n	800ac96 <__ieee754_rem_pio2+0x386>
 800acac:	4b0f      	ldr	r3, [pc, #60]	; (800acec <__ieee754_rem_pio2+0x3dc>)
 800acae:	0032      	movs	r2, r6
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	2302      	movs	r3, #2
 800acb4:	0039      	movs	r1, r7
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	a80a      	add	r0, sp, #40	; 0x28
 800acba:	9b02      	ldr	r3, [sp, #8]
 800acbc:	f000 f8d8 	bl	800ae70 <__kernel_rem_pio2>
 800acc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc2:	0006      	movs	r6, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	db00      	blt.n	800acca <__ieee754_rem_pio2+0x3ba>
 800acc8:	e65f      	b.n	800a98a <__ieee754_rem_pio2+0x7a>
 800acca:	2180      	movs	r1, #128	; 0x80
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	0609      	lsls	r1, r1, #24
 800acd2:	1843      	adds	r3, r0, r1
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	603a      	str	r2, [r7, #0]
 800acd8:	607b      	str	r3, [r7, #4]
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	1843      	adds	r3, r0, r1
 800acde:	60ba      	str	r2, [r7, #8]
 800ace0:	60fb      	str	r3, [r7, #12]
 800ace2:	e688      	b.n	800a9f6 <__ieee754_rem_pio2+0xe6>
 800ace4:	fffffbea 	.word	0xfffffbea
 800ace8:	41700000 	.word	0x41700000
 800acec:	0800e444 	.word	0x0800e444

0800acf0 <__kernel_cos>:
 800acf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acf2:	b087      	sub	sp, #28
 800acf4:	9204      	str	r2, [sp, #16]
 800acf6:	9305      	str	r3, [sp, #20]
 800acf8:	004b      	lsls	r3, r1, #1
 800acfa:	085b      	lsrs	r3, r3, #1
 800acfc:	9300      	str	r3, [sp, #0]
 800acfe:	23f9      	movs	r3, #249	; 0xf9
 800ad00:	9a00      	ldr	r2, [sp, #0]
 800ad02:	0007      	movs	r7, r0
 800ad04:	000e      	movs	r6, r1
 800ad06:	059b      	lsls	r3, r3, #22
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	da04      	bge.n	800ad16 <__kernel_cos+0x26>
 800ad0c:	f7f7 fa2e 	bl	800216c <__aeabi_d2iz>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	d100      	bne.n	800ad16 <__kernel_cos+0x26>
 800ad14:	e084      	b.n	800ae20 <__kernel_cos+0x130>
 800ad16:	003a      	movs	r2, r7
 800ad18:	0033      	movs	r3, r6
 800ad1a:	0038      	movs	r0, r7
 800ad1c:	0031      	movs	r1, r6
 800ad1e:	f7f6 fc27 	bl	8001570 <__aeabi_dmul>
 800ad22:	2200      	movs	r2, #0
 800ad24:	4b40      	ldr	r3, [pc, #256]	; (800ae28 <__kernel_cos+0x138>)
 800ad26:	0004      	movs	r4, r0
 800ad28:	000d      	movs	r5, r1
 800ad2a:	f7f6 fc21 	bl	8001570 <__aeabi_dmul>
 800ad2e:	4a3f      	ldr	r2, [pc, #252]	; (800ae2c <__kernel_cos+0x13c>)
 800ad30:	9002      	str	r0, [sp, #8]
 800ad32:	9103      	str	r1, [sp, #12]
 800ad34:	4b3e      	ldr	r3, [pc, #248]	; (800ae30 <__kernel_cos+0x140>)
 800ad36:	0020      	movs	r0, r4
 800ad38:	0029      	movs	r1, r5
 800ad3a:	f7f6 fc19 	bl	8001570 <__aeabi_dmul>
 800ad3e:	4a3d      	ldr	r2, [pc, #244]	; (800ae34 <__kernel_cos+0x144>)
 800ad40:	4b3d      	ldr	r3, [pc, #244]	; (800ae38 <__kernel_cos+0x148>)
 800ad42:	f7f5 fcd7 	bl	80006f4 <__aeabi_dadd>
 800ad46:	0022      	movs	r2, r4
 800ad48:	002b      	movs	r3, r5
 800ad4a:	f7f6 fc11 	bl	8001570 <__aeabi_dmul>
 800ad4e:	4a3b      	ldr	r2, [pc, #236]	; (800ae3c <__kernel_cos+0x14c>)
 800ad50:	4b3b      	ldr	r3, [pc, #236]	; (800ae40 <__kernel_cos+0x150>)
 800ad52:	f7f6 fe79 	bl	8001a48 <__aeabi_dsub>
 800ad56:	0022      	movs	r2, r4
 800ad58:	002b      	movs	r3, r5
 800ad5a:	f7f6 fc09 	bl	8001570 <__aeabi_dmul>
 800ad5e:	4a39      	ldr	r2, [pc, #228]	; (800ae44 <__kernel_cos+0x154>)
 800ad60:	4b39      	ldr	r3, [pc, #228]	; (800ae48 <__kernel_cos+0x158>)
 800ad62:	f7f5 fcc7 	bl	80006f4 <__aeabi_dadd>
 800ad66:	0022      	movs	r2, r4
 800ad68:	002b      	movs	r3, r5
 800ad6a:	f7f6 fc01 	bl	8001570 <__aeabi_dmul>
 800ad6e:	4a37      	ldr	r2, [pc, #220]	; (800ae4c <__kernel_cos+0x15c>)
 800ad70:	4b37      	ldr	r3, [pc, #220]	; (800ae50 <__kernel_cos+0x160>)
 800ad72:	f7f6 fe69 	bl	8001a48 <__aeabi_dsub>
 800ad76:	0022      	movs	r2, r4
 800ad78:	002b      	movs	r3, r5
 800ad7a:	f7f6 fbf9 	bl	8001570 <__aeabi_dmul>
 800ad7e:	4a35      	ldr	r2, [pc, #212]	; (800ae54 <__kernel_cos+0x164>)
 800ad80:	4b35      	ldr	r3, [pc, #212]	; (800ae58 <__kernel_cos+0x168>)
 800ad82:	f7f5 fcb7 	bl	80006f4 <__aeabi_dadd>
 800ad86:	0022      	movs	r2, r4
 800ad88:	002b      	movs	r3, r5
 800ad8a:	f7f6 fbf1 	bl	8001570 <__aeabi_dmul>
 800ad8e:	0022      	movs	r2, r4
 800ad90:	002b      	movs	r3, r5
 800ad92:	f7f6 fbed 	bl	8001570 <__aeabi_dmul>
 800ad96:	9a04      	ldr	r2, [sp, #16]
 800ad98:	9b05      	ldr	r3, [sp, #20]
 800ad9a:	0004      	movs	r4, r0
 800ad9c:	000d      	movs	r5, r1
 800ad9e:	0038      	movs	r0, r7
 800ada0:	0031      	movs	r1, r6
 800ada2:	f7f6 fbe5 	bl	8001570 <__aeabi_dmul>
 800ada6:	0002      	movs	r2, r0
 800ada8:	000b      	movs	r3, r1
 800adaa:	0020      	movs	r0, r4
 800adac:	0029      	movs	r1, r5
 800adae:	f7f6 fe4b 	bl	8001a48 <__aeabi_dsub>
 800adb2:	4b2a      	ldr	r3, [pc, #168]	; (800ae5c <__kernel_cos+0x16c>)
 800adb4:	9a00      	ldr	r2, [sp, #0]
 800adb6:	0004      	movs	r4, r0
 800adb8:	000d      	movs	r5, r1
 800adba:	429a      	cmp	r2, r3
 800adbc:	dc0d      	bgt.n	800adda <__kernel_cos+0xea>
 800adbe:	0002      	movs	r2, r0
 800adc0:	000b      	movs	r3, r1
 800adc2:	9802      	ldr	r0, [sp, #8]
 800adc4:	9903      	ldr	r1, [sp, #12]
 800adc6:	f7f6 fe3f 	bl	8001a48 <__aeabi_dsub>
 800adca:	0002      	movs	r2, r0
 800adcc:	2000      	movs	r0, #0
 800adce:	000b      	movs	r3, r1
 800add0:	4923      	ldr	r1, [pc, #140]	; (800ae60 <__kernel_cos+0x170>)
 800add2:	f7f6 fe39 	bl	8001a48 <__aeabi_dsub>
 800add6:	b007      	add	sp, #28
 800add8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adda:	4b22      	ldr	r3, [pc, #136]	; (800ae64 <__kernel_cos+0x174>)
 800addc:	9a00      	ldr	r2, [sp, #0]
 800adde:	2600      	movs	r6, #0
 800ade0:	429a      	cmp	r2, r3
 800ade2:	dc1b      	bgt.n	800ae1c <__kernel_cos+0x12c>
 800ade4:	0013      	movs	r3, r2
 800ade6:	4a20      	ldr	r2, [pc, #128]	; (800ae68 <__kernel_cos+0x178>)
 800ade8:	4694      	mov	ip, r2
 800adea:	4463      	add	r3, ip
 800adec:	001f      	movs	r7, r3
 800adee:	0032      	movs	r2, r6
 800adf0:	003b      	movs	r3, r7
 800adf2:	2000      	movs	r0, #0
 800adf4:	491a      	ldr	r1, [pc, #104]	; (800ae60 <__kernel_cos+0x170>)
 800adf6:	f7f6 fe27 	bl	8001a48 <__aeabi_dsub>
 800adfa:	0032      	movs	r2, r6
 800adfc:	003b      	movs	r3, r7
 800adfe:	9000      	str	r0, [sp, #0]
 800ae00:	9101      	str	r1, [sp, #4]
 800ae02:	9802      	ldr	r0, [sp, #8]
 800ae04:	9903      	ldr	r1, [sp, #12]
 800ae06:	f7f6 fe1f 	bl	8001a48 <__aeabi_dsub>
 800ae0a:	0022      	movs	r2, r4
 800ae0c:	002b      	movs	r3, r5
 800ae0e:	f7f6 fe1b 	bl	8001a48 <__aeabi_dsub>
 800ae12:	0002      	movs	r2, r0
 800ae14:	000b      	movs	r3, r1
 800ae16:	9800      	ldr	r0, [sp, #0]
 800ae18:	9901      	ldr	r1, [sp, #4]
 800ae1a:	e7da      	b.n	800add2 <__kernel_cos+0xe2>
 800ae1c:	4f13      	ldr	r7, [pc, #76]	; (800ae6c <__kernel_cos+0x17c>)
 800ae1e:	e7e6      	b.n	800adee <__kernel_cos+0xfe>
 800ae20:	2000      	movs	r0, #0
 800ae22:	490f      	ldr	r1, [pc, #60]	; (800ae60 <__kernel_cos+0x170>)
 800ae24:	e7d7      	b.n	800add6 <__kernel_cos+0xe6>
 800ae26:	46c0      	nop			; (mov r8, r8)
 800ae28:	3fe00000 	.word	0x3fe00000
 800ae2c:	be8838d4 	.word	0xbe8838d4
 800ae30:	bda8fae9 	.word	0xbda8fae9
 800ae34:	bdb4b1c4 	.word	0xbdb4b1c4
 800ae38:	3e21ee9e 	.word	0x3e21ee9e
 800ae3c:	809c52ad 	.word	0x809c52ad
 800ae40:	3e927e4f 	.word	0x3e927e4f
 800ae44:	19cb1590 	.word	0x19cb1590
 800ae48:	3efa01a0 	.word	0x3efa01a0
 800ae4c:	16c15177 	.word	0x16c15177
 800ae50:	3f56c16c 	.word	0x3f56c16c
 800ae54:	5555554c 	.word	0x5555554c
 800ae58:	3fa55555 	.word	0x3fa55555
 800ae5c:	3fd33332 	.word	0x3fd33332
 800ae60:	3ff00000 	.word	0x3ff00000
 800ae64:	3fe90000 	.word	0x3fe90000
 800ae68:	ffe00000 	.word	0xffe00000
 800ae6c:	3fd20000 	.word	0x3fd20000

0800ae70 <__kernel_rem_pio2>:
 800ae70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae72:	4ccb      	ldr	r4, [pc, #812]	; (800b1a0 <__kernel_rem_pio2+0x330>)
 800ae74:	44a5      	add	sp, r4
 800ae76:	930d      	str	r3, [sp, #52]	; 0x34
 800ae78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ae7a:	0014      	movs	r4, r2
 800ae7c:	009a      	lsls	r2, r3, #2
 800ae7e:	4bc9      	ldr	r3, [pc, #804]	; (800b1a4 <__kernel_rem_pio2+0x334>)
 800ae80:	900e      	str	r0, [sp, #56]	; 0x38
 800ae82:	58d3      	ldr	r3, [r2, r3]
 800ae84:	9107      	str	r1, [sp, #28]
 800ae86:	930a      	str	r3, [sp, #40]	; 0x28
 800ae88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae8e:	2300      	movs	r3, #0
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	0023      	movs	r3, r4
 800ae94:	3314      	adds	r3, #20
 800ae96:	db04      	blt.n	800aea2 <__kernel_rem_pio2+0x32>
 800ae98:	2118      	movs	r1, #24
 800ae9a:	1ee0      	subs	r0, r4, #3
 800ae9c:	f7f5 f9c8 	bl	8000230 <__divsi3>
 800aea0:	9000      	str	r0, [sp, #0]
 800aea2:	2218      	movs	r2, #24
 800aea4:	9b00      	ldr	r3, [sp, #0]
 800aea6:	4252      	negs	r2, r2
 800aea8:	3301      	adds	r3, #1
 800aeaa:	435a      	muls	r2, r3
 800aeac:	1913      	adds	r3, r2, r4
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeb2:	9b00      	ldr	r3, [sp, #0]
 800aeb4:	ae26      	add	r6, sp, #152	; 0x98
 800aeb6:	1a9d      	subs	r5, r3, r2
 800aeb8:	002c      	movs	r4, r5
 800aeba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aebc:	189f      	adds	r7, r3, r2
 800aebe:	1b63      	subs	r3, r4, r5
 800aec0:	429f      	cmp	r7, r3
 800aec2:	da0f      	bge.n	800aee4 <__kernel_rem_pio2+0x74>
 800aec4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800aec6:	af76      	add	r7, sp, #472	; 0x1d8
 800aec8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aecc:	1af3      	subs	r3, r6, r3
 800aece:	429a      	cmp	r2, r3
 800aed0:	db30      	blt.n	800af34 <__kernel_rem_pio2+0xc4>
 800aed2:	ab26      	add	r3, sp, #152	; 0x98
 800aed4:	00f4      	lsls	r4, r6, #3
 800aed6:	2200      	movs	r2, #0
 800aed8:	18e4      	adds	r4, r4, r3
 800aeda:	2300      	movs	r3, #0
 800aedc:	2500      	movs	r5, #0
 800aede:	9204      	str	r2, [sp, #16]
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	e01e      	b.n	800af22 <__kernel_rem_pio2+0xb2>
 800aee4:	2c00      	cmp	r4, #0
 800aee6:	db07      	blt.n	800aef8 <__kernel_rem_pio2+0x88>
 800aee8:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800aeea:	00a3      	lsls	r3, r4, #2
 800aeec:	58d0      	ldr	r0, [r2, r3]
 800aeee:	f7f7 f973 	bl	80021d8 <__aeabi_i2d>
 800aef2:	c603      	stmia	r6!, {r0, r1}
 800aef4:	3401      	adds	r4, #1
 800aef6:	e7e2      	b.n	800aebe <__kernel_rem_pio2+0x4e>
 800aef8:	2000      	movs	r0, #0
 800aefa:	2100      	movs	r1, #0
 800aefc:	e7f9      	b.n	800aef2 <__kernel_rem_pio2+0x82>
 800aefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af00:	00e9      	lsls	r1, r5, #3
 800af02:	1859      	adds	r1, r3, r1
 800af04:	6808      	ldr	r0, [r1, #0]
 800af06:	6849      	ldr	r1, [r1, #4]
 800af08:	6822      	ldr	r2, [r4, #0]
 800af0a:	6863      	ldr	r3, [r4, #4]
 800af0c:	f7f6 fb30 	bl	8001570 <__aeabi_dmul>
 800af10:	0002      	movs	r2, r0
 800af12:	000b      	movs	r3, r1
 800af14:	9804      	ldr	r0, [sp, #16]
 800af16:	9905      	ldr	r1, [sp, #20]
 800af18:	f7f5 fbec 	bl	80006f4 <__aeabi_dadd>
 800af1c:	9004      	str	r0, [sp, #16]
 800af1e:	9105      	str	r1, [sp, #20]
 800af20:	3501      	adds	r5, #1
 800af22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af24:	3c08      	subs	r4, #8
 800af26:	429d      	cmp	r5, r3
 800af28:	dde9      	ble.n	800aefe <__kernel_rem_pio2+0x8e>
 800af2a:	9b04      	ldr	r3, [sp, #16]
 800af2c:	9c05      	ldr	r4, [sp, #20]
 800af2e:	3601      	adds	r6, #1
 800af30:	c718      	stmia	r7!, {r3, r4}
 800af32:	e7c9      	b.n	800aec8 <__kernel_rem_pio2+0x58>
 800af34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af36:	aa12      	add	r2, sp, #72	; 0x48
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	189b      	adds	r3, r3, r2
 800af3c:	9310      	str	r3, [sp, #64]	; 0x40
 800af3e:	9b00      	ldr	r3, [sp, #0]
 800af40:	0098      	lsls	r0, r3, #2
 800af42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800af44:	181b      	adds	r3, r3, r0
 800af46:	930f      	str	r3, [sp, #60]	; 0x3c
 800af48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	9b04      	ldr	r3, [sp, #16]
 800af4e:	aa76      	add	r2, sp, #472	; 0x1d8
 800af50:	00db      	lsls	r3, r3, #3
 800af52:	18d3      	adds	r3, r2, r3
 800af54:	681c      	ldr	r4, [r3, #0]
 800af56:	685d      	ldr	r5, [r3, #4]
 800af58:	ab12      	add	r3, sp, #72	; 0x48
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	9309      	str	r3, [sp, #36]	; 0x24
 800af5e:	9b04      	ldr	r3, [sp, #16]
 800af60:	9211      	str	r2, [sp, #68]	; 0x44
 800af62:	9308      	str	r3, [sp, #32]
 800af64:	9b08      	ldr	r3, [sp, #32]
 800af66:	2b00      	cmp	r3, #0
 800af68:	dc74      	bgt.n	800b054 <__kernel_rem_pio2+0x1e4>
 800af6a:	0020      	movs	r0, r4
 800af6c:	0029      	movs	r1, r5
 800af6e:	9a02      	ldr	r2, [sp, #8]
 800af70:	f000 fc22 	bl	800b7b8 <scalbn>
 800af74:	23ff      	movs	r3, #255	; 0xff
 800af76:	2200      	movs	r2, #0
 800af78:	059b      	lsls	r3, r3, #22
 800af7a:	0004      	movs	r4, r0
 800af7c:	000d      	movs	r5, r1
 800af7e:	f7f6 faf7 	bl	8001570 <__aeabi_dmul>
 800af82:	f000 fb8f 	bl	800b6a4 <floor>
 800af86:	2200      	movs	r2, #0
 800af88:	4b87      	ldr	r3, [pc, #540]	; (800b1a8 <__kernel_rem_pio2+0x338>)
 800af8a:	f7f6 faf1 	bl	8001570 <__aeabi_dmul>
 800af8e:	0002      	movs	r2, r0
 800af90:	000b      	movs	r3, r1
 800af92:	0020      	movs	r0, r4
 800af94:	0029      	movs	r1, r5
 800af96:	f7f6 fd57 	bl	8001a48 <__aeabi_dsub>
 800af9a:	000d      	movs	r5, r1
 800af9c:	0004      	movs	r4, r0
 800af9e:	f7f7 f8e5 	bl	800216c <__aeabi_d2iz>
 800afa2:	9009      	str	r0, [sp, #36]	; 0x24
 800afa4:	f7f7 f918 	bl	80021d8 <__aeabi_i2d>
 800afa8:	000b      	movs	r3, r1
 800afaa:	0002      	movs	r2, r0
 800afac:	0029      	movs	r1, r5
 800afae:	0020      	movs	r0, r4
 800afb0:	f7f6 fd4a 	bl	8001a48 <__aeabi_dsub>
 800afb4:	9b02      	ldr	r3, [sp, #8]
 800afb6:	0006      	movs	r6, r0
 800afb8:	000f      	movs	r7, r1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	dd74      	ble.n	800b0a8 <__kernel_rem_pio2+0x238>
 800afbe:	2118      	movs	r1, #24
 800afc0:	9b04      	ldr	r3, [sp, #16]
 800afc2:	aa12      	add	r2, sp, #72	; 0x48
 800afc4:	3b01      	subs	r3, #1
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	589a      	ldr	r2, [r3, r2]
 800afca:	9802      	ldr	r0, [sp, #8]
 800afcc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800afce:	1a09      	subs	r1, r1, r0
 800afd0:	0010      	movs	r0, r2
 800afd2:	4108      	asrs	r0, r1
 800afd4:	1824      	adds	r4, r4, r0
 800afd6:	4088      	lsls	r0, r1
 800afd8:	a912      	add	r1, sp, #72	; 0x48
 800afda:	1a12      	subs	r2, r2, r0
 800afdc:	505a      	str	r2, [r3, r1]
 800afde:	2317      	movs	r3, #23
 800afe0:	9902      	ldr	r1, [sp, #8]
 800afe2:	9409      	str	r4, [sp, #36]	; 0x24
 800afe4:	1a5b      	subs	r3, r3, r1
 800afe6:	411a      	asrs	r2, r3
 800afe8:	9208      	str	r2, [sp, #32]
 800afea:	9b08      	ldr	r3, [sp, #32]
 800afec:	2b00      	cmp	r3, #0
 800afee:	dd6d      	ble.n	800b0cc <__kernel_rem_pio2+0x25c>
 800aff0:	2200      	movs	r2, #0
 800aff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff4:	2080      	movs	r0, #128	; 0x80
 800aff6:	3301      	adds	r3, #1
 800aff8:	9309      	str	r3, [sp, #36]	; 0x24
 800affa:	4b6c      	ldr	r3, [pc, #432]	; (800b1ac <__kernel_rem_pio2+0x33c>)
 800affc:	0014      	movs	r4, r2
 800affe:	469c      	mov	ip, r3
 800b000:	2501      	movs	r5, #1
 800b002:	0440      	lsls	r0, r0, #17
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	4293      	cmp	r3, r2
 800b008:	dd00      	ble.n	800b00c <__kernel_rem_pio2+0x19c>
 800b00a:	e099      	b.n	800b140 <__kernel_rem_pio2+0x2d0>
 800b00c:	9b02      	ldr	r3, [sp, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	dd05      	ble.n	800b01e <__kernel_rem_pio2+0x1ae>
 800b012:	2b01      	cmp	r3, #1
 800b014:	d100      	bne.n	800b018 <__kernel_rem_pio2+0x1a8>
 800b016:	e0a9      	b.n	800b16c <__kernel_rem_pio2+0x2fc>
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d100      	bne.n	800b01e <__kernel_rem_pio2+0x1ae>
 800b01c:	e0b1      	b.n	800b182 <__kernel_rem_pio2+0x312>
 800b01e:	9b08      	ldr	r3, [sp, #32]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d153      	bne.n	800b0cc <__kernel_rem_pio2+0x25c>
 800b024:	0032      	movs	r2, r6
 800b026:	003b      	movs	r3, r7
 800b028:	2000      	movs	r0, #0
 800b02a:	4961      	ldr	r1, [pc, #388]	; (800b1b0 <__kernel_rem_pio2+0x340>)
 800b02c:	f7f6 fd0c 	bl	8001a48 <__aeabi_dsub>
 800b030:	0006      	movs	r6, r0
 800b032:	000f      	movs	r7, r1
 800b034:	2c00      	cmp	r4, #0
 800b036:	d049      	beq.n	800b0cc <__kernel_rem_pio2+0x25c>
 800b038:	9a02      	ldr	r2, [sp, #8]
 800b03a:	2000      	movs	r0, #0
 800b03c:	495c      	ldr	r1, [pc, #368]	; (800b1b0 <__kernel_rem_pio2+0x340>)
 800b03e:	f000 fbbb 	bl	800b7b8 <scalbn>
 800b042:	0002      	movs	r2, r0
 800b044:	000b      	movs	r3, r1
 800b046:	0030      	movs	r0, r6
 800b048:	0039      	movs	r1, r7
 800b04a:	f7f6 fcfd 	bl	8001a48 <__aeabi_dsub>
 800b04e:	0006      	movs	r6, r0
 800b050:	000f      	movs	r7, r1
 800b052:	e03b      	b.n	800b0cc <__kernel_rem_pio2+0x25c>
 800b054:	2200      	movs	r2, #0
 800b056:	4b57      	ldr	r3, [pc, #348]	; (800b1b4 <__kernel_rem_pio2+0x344>)
 800b058:	0020      	movs	r0, r4
 800b05a:	0029      	movs	r1, r5
 800b05c:	f7f6 fa88 	bl	8001570 <__aeabi_dmul>
 800b060:	f7f7 f884 	bl	800216c <__aeabi_d2iz>
 800b064:	f7f7 f8b8 	bl	80021d8 <__aeabi_i2d>
 800b068:	2200      	movs	r2, #0
 800b06a:	4b53      	ldr	r3, [pc, #332]	; (800b1b8 <__kernel_rem_pio2+0x348>)
 800b06c:	0006      	movs	r6, r0
 800b06e:	000f      	movs	r7, r1
 800b070:	f7f6 fa7e 	bl	8001570 <__aeabi_dmul>
 800b074:	0002      	movs	r2, r0
 800b076:	000b      	movs	r3, r1
 800b078:	0020      	movs	r0, r4
 800b07a:	0029      	movs	r1, r5
 800b07c:	f7f6 fce4 	bl	8001a48 <__aeabi_dsub>
 800b080:	f7f7 f874 	bl	800216c <__aeabi_d2iz>
 800b084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b086:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b088:	c301      	stmia	r3!, {r0}
 800b08a:	9309      	str	r3, [sp, #36]	; 0x24
 800b08c:	9b08      	ldr	r3, [sp, #32]
 800b08e:	0030      	movs	r0, r6
 800b090:	3b01      	subs	r3, #1
 800b092:	9308      	str	r3, [sp, #32]
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	18d3      	adds	r3, r2, r3
 800b098:	0039      	movs	r1, r7
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f7f5 fb29 	bl	80006f4 <__aeabi_dadd>
 800b0a2:	0004      	movs	r4, r0
 800b0a4:	000d      	movs	r5, r1
 800b0a6:	e75d      	b.n	800af64 <__kernel_rem_pio2+0xf4>
 800b0a8:	9b02      	ldr	r3, [sp, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d107      	bne.n	800b0be <__kernel_rem_pio2+0x24e>
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	aa12      	add	r2, sp, #72	; 0x48
 800b0b2:	3b01      	subs	r3, #1
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	5898      	ldr	r0, [r3, r2]
 800b0b8:	15c3      	asrs	r3, r0, #23
 800b0ba:	9308      	str	r3, [sp, #32]
 800b0bc:	e795      	b.n	800afea <__kernel_rem_pio2+0x17a>
 800b0be:	2200      	movs	r2, #0
 800b0c0:	4b3e      	ldr	r3, [pc, #248]	; (800b1bc <__kernel_rem_pio2+0x34c>)
 800b0c2:	f7f5 f9d5 	bl	8000470 <__aeabi_dcmpge>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d137      	bne.n	800b13a <__kernel_rem_pio2+0x2ca>
 800b0ca:	9008      	str	r0, [sp, #32]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	0030      	movs	r0, r6
 800b0d2:	0039      	movs	r1, r7
 800b0d4:	f7f5 f9a8 	bl	8000428 <__aeabi_dcmpeq>
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	d100      	bne.n	800b0de <__kernel_rem_pio2+0x26e>
 800b0dc:	e0b9      	b.n	800b252 <__kernel_rem_pio2+0x3e2>
 800b0de:	2200      	movs	r2, #0
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b0e8:	428b      	cmp	r3, r1
 800b0ea:	da53      	bge.n	800b194 <__kernel_rem_pio2+0x324>
 800b0ec:	2a00      	cmp	r2, #0
 800b0ee:	d100      	bne.n	800b0f2 <__kernel_rem_pio2+0x282>
 800b0f0:	e095      	b.n	800b21e <__kernel_rem_pio2+0x3ae>
 800b0f2:	9b02      	ldr	r3, [sp, #8]
 800b0f4:	aa12      	add	r2, sp, #72	; 0x48
 800b0f6:	3b18      	subs	r3, #24
 800b0f8:	9302      	str	r3, [sp, #8]
 800b0fa:	9b00      	ldr	r3, [sp, #0]
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	589b      	ldr	r3, [r3, r2]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d100      	bne.n	800b106 <__kernel_rem_pio2+0x296>
 800b104:	e0a1      	b.n	800b24a <__kernel_rem_pio2+0x3da>
 800b106:	2000      	movs	r0, #0
 800b108:	9a02      	ldr	r2, [sp, #8]
 800b10a:	4929      	ldr	r1, [pc, #164]	; (800b1b0 <__kernel_rem_pio2+0x340>)
 800b10c:	f000 fb54 	bl	800b7b8 <scalbn>
 800b110:	0006      	movs	r6, r0
 800b112:	000f      	movs	r7, r1
 800b114:	9c00      	ldr	r4, [sp, #0]
 800b116:	2c00      	cmp	r4, #0
 800b118:	db00      	blt.n	800b11c <__kernel_rem_pio2+0x2ac>
 800b11a:	e0d9      	b.n	800b2d0 <__kernel_rem_pio2+0x460>
 800b11c:	9c00      	ldr	r4, [sp, #0]
 800b11e:	2c00      	cmp	r4, #0
 800b120:	da00      	bge.n	800b124 <__kernel_rem_pio2+0x2b4>
 800b122:	e10c      	b.n	800b33e <__kernel_rem_pio2+0x4ce>
 800b124:	ab76      	add	r3, sp, #472	; 0x1d8
 800b126:	00e6      	lsls	r6, r4, #3
 800b128:	2200      	movs	r2, #0
 800b12a:	18f6      	adds	r6, r6, r3
 800b12c:	2300      	movs	r3, #0
 800b12e:	9202      	str	r2, [sp, #8]
 800b130:	9303      	str	r3, [sp, #12]
 800b132:	9b00      	ldr	r3, [sp, #0]
 800b134:	2500      	movs	r5, #0
 800b136:	1b1f      	subs	r7, r3, r4
 800b138:	e0f3      	b.n	800b322 <__kernel_rem_pio2+0x4b2>
 800b13a:	2302      	movs	r3, #2
 800b13c:	9308      	str	r3, [sp, #32]
 800b13e:	e757      	b.n	800aff0 <__kernel_rem_pio2+0x180>
 800b140:	9b00      	ldr	r3, [sp, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2c00      	cmp	r4, #0
 800b146:	d10b      	bne.n	800b160 <__kernel_rem_pio2+0x2f0>
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <__kernel_rem_pio2+0x2e4>
 800b14c:	9c00      	ldr	r4, [sp, #0]
 800b14e:	1ac3      	subs	r3, r0, r3
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	002b      	movs	r3, r5
 800b154:	9c00      	ldr	r4, [sp, #0]
 800b156:	3201      	adds	r2, #1
 800b158:	3404      	adds	r4, #4
 800b15a:	9400      	str	r4, [sp, #0]
 800b15c:	001c      	movs	r4, r3
 800b15e:	e751      	b.n	800b004 <__kernel_rem_pio2+0x194>
 800b160:	4661      	mov	r1, ip
 800b162:	1acb      	subs	r3, r1, r3
 800b164:	9900      	ldr	r1, [sp, #0]
 800b166:	600b      	str	r3, [r1, #0]
 800b168:	0023      	movs	r3, r4
 800b16a:	e7f3      	b.n	800b154 <__kernel_rem_pio2+0x2e4>
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	aa12      	add	r2, sp, #72	; 0x48
 800b170:	3b01      	subs	r3, #1
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	589a      	ldr	r2, [r3, r2]
 800b176:	9200      	str	r2, [sp, #0]
 800b178:	0252      	lsls	r2, r2, #9
 800b17a:	0a52      	lsrs	r2, r2, #9
 800b17c:	a912      	add	r1, sp, #72	; 0x48
 800b17e:	505a      	str	r2, [r3, r1]
 800b180:	e74d      	b.n	800b01e <__kernel_rem_pio2+0x1ae>
 800b182:	9b04      	ldr	r3, [sp, #16]
 800b184:	aa12      	add	r2, sp, #72	; 0x48
 800b186:	3b01      	subs	r3, #1
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	589a      	ldr	r2, [r3, r2]
 800b18c:	9200      	str	r2, [sp, #0]
 800b18e:	0292      	lsls	r2, r2, #10
 800b190:	0a92      	lsrs	r2, r2, #10
 800b192:	e7f3      	b.n	800b17c <__kernel_rem_pio2+0x30c>
 800b194:	0099      	lsls	r1, r3, #2
 800b196:	a812      	add	r0, sp, #72	; 0x48
 800b198:	5809      	ldr	r1, [r1, r0]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	430a      	orrs	r2, r1
 800b19e:	e7a2      	b.n	800b0e6 <__kernel_rem_pio2+0x276>
 800b1a0:	fffffd84 	.word	0xfffffd84
 800b1a4:	0800e590 	.word	0x0800e590
 800b1a8:	40200000 	.word	0x40200000
 800b1ac:	00ffffff 	.word	0x00ffffff
 800b1b0:	3ff00000 	.word	0x3ff00000
 800b1b4:	3e700000 	.word	0x3e700000
 800b1b8:	41700000 	.word	0x41700000
 800b1bc:	3fe00000 	.word	0x3fe00000
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b1c4:	009a      	lsls	r2, r3, #2
 800b1c6:	4252      	negs	r2, r2
 800b1c8:	588a      	ldr	r2, [r1, r2]
 800b1ca:	2a00      	cmp	r2, #0
 800b1cc:	d0f8      	beq.n	800b1c0 <__kernel_rem_pio2+0x350>
 800b1ce:	9a04      	ldr	r2, [sp, #16]
 800b1d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b1d2:	1c57      	adds	r7, r2, #1
 800b1d4:	1854      	adds	r4, r2, r1
 800b1d6:	00e4      	lsls	r4, r4, #3
 800b1d8:	aa26      	add	r2, sp, #152	; 0x98
 800b1da:	1914      	adds	r4, r2, r4
 800b1dc:	9a04      	ldr	r2, [sp, #16]
 800b1de:	18d3      	adds	r3, r2, r3
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	9b04      	ldr	r3, [sp, #16]
 800b1e4:	42bb      	cmp	r3, r7
 800b1e6:	da00      	bge.n	800b1ea <__kernel_rem_pio2+0x37a>
 800b1e8:	e6b0      	b.n	800af4c <__kernel_rem_pio2+0xdc>
 800b1ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b1ec:	00bb      	lsls	r3, r7, #2
 800b1ee:	58d0      	ldr	r0, [r2, r3]
 800b1f0:	f7f6 fff2 	bl	80021d8 <__aeabi_i2d>
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	0026      	movs	r6, r4
 800b1fa:	2500      	movs	r5, #0
 800b1fc:	6020      	str	r0, [r4, #0]
 800b1fe:	6061      	str	r1, [r4, #4]
 800b200:	9200      	str	r2, [sp, #0]
 800b202:	9301      	str	r3, [sp, #4]
 800b204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b206:	429d      	cmp	r5, r3
 800b208:	dd0b      	ble.n	800b222 <__kernel_rem_pio2+0x3b2>
 800b20a:	00fb      	lsls	r3, r7, #3
 800b20c:	aa76      	add	r2, sp, #472	; 0x1d8
 800b20e:	18d3      	adds	r3, r2, r3
 800b210:	3701      	adds	r7, #1
 800b212:	9900      	ldr	r1, [sp, #0]
 800b214:	9a01      	ldr	r2, [sp, #4]
 800b216:	3408      	adds	r4, #8
 800b218:	6019      	str	r1, [r3, #0]
 800b21a:	605a      	str	r2, [r3, #4]
 800b21c:	e7e1      	b.n	800b1e2 <__kernel_rem_pio2+0x372>
 800b21e:	2301      	movs	r3, #1
 800b220:	e7cf      	b.n	800b1c2 <__kernel_rem_pio2+0x352>
 800b222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b224:	00e9      	lsls	r1, r5, #3
 800b226:	1859      	adds	r1, r3, r1
 800b228:	6808      	ldr	r0, [r1, #0]
 800b22a:	6849      	ldr	r1, [r1, #4]
 800b22c:	6832      	ldr	r2, [r6, #0]
 800b22e:	6873      	ldr	r3, [r6, #4]
 800b230:	f7f6 f99e 	bl	8001570 <__aeabi_dmul>
 800b234:	0002      	movs	r2, r0
 800b236:	000b      	movs	r3, r1
 800b238:	9800      	ldr	r0, [sp, #0]
 800b23a:	9901      	ldr	r1, [sp, #4]
 800b23c:	f7f5 fa5a 	bl	80006f4 <__aeabi_dadd>
 800b240:	3501      	adds	r5, #1
 800b242:	9000      	str	r0, [sp, #0]
 800b244:	9101      	str	r1, [sp, #4]
 800b246:	3e08      	subs	r6, #8
 800b248:	e7dc      	b.n	800b204 <__kernel_rem_pio2+0x394>
 800b24a:	9b00      	ldr	r3, [sp, #0]
 800b24c:	3b01      	subs	r3, #1
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	e74f      	b.n	800b0f2 <__kernel_rem_pio2+0x282>
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	0030      	movs	r0, r6
 800b256:	425a      	negs	r2, r3
 800b258:	0039      	movs	r1, r7
 800b25a:	f000 faad 	bl	800b7b8 <scalbn>
 800b25e:	2200      	movs	r2, #0
 800b260:	4bb5      	ldr	r3, [pc, #724]	; (800b538 <__kernel_rem_pio2+0x6c8>)
 800b262:	0004      	movs	r4, r0
 800b264:	000d      	movs	r5, r1
 800b266:	f7f5 f903 	bl	8000470 <__aeabi_dcmpge>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	d025      	beq.n	800b2ba <__kernel_rem_pio2+0x44a>
 800b26e:	2200      	movs	r2, #0
 800b270:	4bb2      	ldr	r3, [pc, #712]	; (800b53c <__kernel_rem_pio2+0x6cc>)
 800b272:	0020      	movs	r0, r4
 800b274:	0029      	movs	r1, r5
 800b276:	f7f6 f97b 	bl	8001570 <__aeabi_dmul>
 800b27a:	f7f6 ff77 	bl	800216c <__aeabi_d2iz>
 800b27e:	9b04      	ldr	r3, [sp, #16]
 800b280:	0006      	movs	r6, r0
 800b282:	009f      	lsls	r7, r3, #2
 800b284:	f7f6 ffa8 	bl	80021d8 <__aeabi_i2d>
 800b288:	2200      	movs	r2, #0
 800b28a:	4bab      	ldr	r3, [pc, #684]	; (800b538 <__kernel_rem_pio2+0x6c8>)
 800b28c:	f7f6 f970 	bl	8001570 <__aeabi_dmul>
 800b290:	0002      	movs	r2, r0
 800b292:	000b      	movs	r3, r1
 800b294:	0020      	movs	r0, r4
 800b296:	0029      	movs	r1, r5
 800b298:	f7f6 fbd6 	bl	8001a48 <__aeabi_dsub>
 800b29c:	f7f6 ff66 	bl	800216c <__aeabi_d2iz>
 800b2a0:	ab12      	add	r3, sp, #72	; 0x48
 800b2a2:	51d8      	str	r0, [r3, r7]
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	aa12      	add	r2, sp, #72	; 0x48
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	9b02      	ldr	r3, [sp, #8]
 800b2ae:	3318      	adds	r3, #24
 800b2b0:	9302      	str	r3, [sp, #8]
 800b2b2:	9b00      	ldr	r3, [sp, #0]
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	509e      	str	r6, [r3, r2]
 800b2b8:	e725      	b.n	800b106 <__kernel_rem_pio2+0x296>
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	0020      	movs	r0, r4
 800b2be:	0029      	movs	r1, r5
 800b2c0:	009e      	lsls	r6, r3, #2
 800b2c2:	f7f6 ff53 	bl	800216c <__aeabi_d2iz>
 800b2c6:	ab12      	add	r3, sp, #72	; 0x48
 800b2c8:	5198      	str	r0, [r3, r6]
 800b2ca:	9b04      	ldr	r3, [sp, #16]
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	e71a      	b.n	800b106 <__kernel_rem_pio2+0x296>
 800b2d0:	00e5      	lsls	r5, r4, #3
 800b2d2:	ab76      	add	r3, sp, #472	; 0x1d8
 800b2d4:	aa12      	add	r2, sp, #72	; 0x48
 800b2d6:	195d      	adds	r5, r3, r5
 800b2d8:	00a3      	lsls	r3, r4, #2
 800b2da:	5898      	ldr	r0, [r3, r2]
 800b2dc:	f7f6 ff7c 	bl	80021d8 <__aeabi_i2d>
 800b2e0:	0032      	movs	r2, r6
 800b2e2:	003b      	movs	r3, r7
 800b2e4:	f7f6 f944 	bl	8001570 <__aeabi_dmul>
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	6028      	str	r0, [r5, #0]
 800b2ec:	6069      	str	r1, [r5, #4]
 800b2ee:	4b93      	ldr	r3, [pc, #588]	; (800b53c <__kernel_rem_pio2+0x6cc>)
 800b2f0:	0030      	movs	r0, r6
 800b2f2:	0039      	movs	r1, r7
 800b2f4:	f7f6 f93c 	bl	8001570 <__aeabi_dmul>
 800b2f8:	3c01      	subs	r4, #1
 800b2fa:	0006      	movs	r6, r0
 800b2fc:	000f      	movs	r7, r1
 800b2fe:	e70a      	b.n	800b116 <__kernel_rem_pio2+0x2a6>
 800b300:	4b8f      	ldr	r3, [pc, #572]	; (800b540 <__kernel_rem_pio2+0x6d0>)
 800b302:	00e9      	lsls	r1, r5, #3
 800b304:	1859      	adds	r1, r3, r1
 800b306:	6808      	ldr	r0, [r1, #0]
 800b308:	6849      	ldr	r1, [r1, #4]
 800b30a:	ce0c      	ldmia	r6!, {r2, r3}
 800b30c:	f7f6 f930 	bl	8001570 <__aeabi_dmul>
 800b310:	0002      	movs	r2, r0
 800b312:	000b      	movs	r3, r1
 800b314:	9802      	ldr	r0, [sp, #8]
 800b316:	9903      	ldr	r1, [sp, #12]
 800b318:	f7f5 f9ec 	bl	80006f4 <__aeabi_dadd>
 800b31c:	9002      	str	r0, [sp, #8]
 800b31e:	9103      	str	r1, [sp, #12]
 800b320:	3501      	adds	r5, #1
 800b322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b324:	429d      	cmp	r5, r3
 800b326:	dc01      	bgt.n	800b32c <__kernel_rem_pio2+0x4bc>
 800b328:	42bd      	cmp	r5, r7
 800b32a:	dde9      	ble.n	800b300 <__kernel_rem_pio2+0x490>
 800b32c:	ab4e      	add	r3, sp, #312	; 0x138
 800b32e:	00ff      	lsls	r7, r7, #3
 800b330:	19df      	adds	r7, r3, r7
 800b332:	3c01      	subs	r4, #1
 800b334:	9a02      	ldr	r2, [sp, #8]
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	603a      	str	r2, [r7, #0]
 800b33a:	607b      	str	r3, [r7, #4]
 800b33c:	e6ef      	b.n	800b11e <__kernel_rem_pio2+0x2ae>
 800b33e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b340:	2b02      	cmp	r3, #2
 800b342:	dc0e      	bgt.n	800b362 <__kernel_rem_pio2+0x4f2>
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd00      	ble.n	800b34a <__kernel_rem_pio2+0x4da>
 800b348:	e08c      	b.n	800b464 <__kernel_rem_pio2+0x5f4>
 800b34a:	2500      	movs	r5, #0
 800b34c:	002c      	movs	r4, r5
 800b34e:	42ab      	cmp	r3, r5
 800b350:	d046      	beq.n	800b3e0 <__kernel_rem_pio2+0x570>
 800b352:	2007      	movs	r0, #7
 800b354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b356:	4003      	ands	r3, r0
 800b358:	0018      	movs	r0, r3
 800b35a:	239f      	movs	r3, #159	; 0x9f
 800b35c:	009b      	lsls	r3, r3, #2
 800b35e:	449d      	add	sp, r3
 800b360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b362:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b364:	2b03      	cmp	r3, #3
 800b366:	d1f4      	bne.n	800b352 <__kernel_rem_pio2+0x4e2>
 800b368:	9b00      	ldr	r3, [sp, #0]
 800b36a:	00dc      	lsls	r4, r3, #3
 800b36c:	ab4e      	add	r3, sp, #312	; 0x138
 800b36e:	191c      	adds	r4, r3, r4
 800b370:	0025      	movs	r5, r4
 800b372:	9b00      	ldr	r3, [sp, #0]
 800b374:	9302      	str	r3, [sp, #8]
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	3d08      	subs	r5, #8
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dd00      	ble.n	800b380 <__kernel_rem_pio2+0x510>
 800b37e:	e07f      	b.n	800b480 <__kernel_rem_pio2+0x610>
 800b380:	9d00      	ldr	r5, [sp, #0]
 800b382:	3c08      	subs	r4, #8
 800b384:	2d01      	cmp	r5, #1
 800b386:	dd00      	ble.n	800b38a <__kernel_rem_pio2+0x51a>
 800b388:	e09c      	b.n	800b4c4 <__kernel_rem_pio2+0x654>
 800b38a:	2400      	movs	r4, #0
 800b38c:	0021      	movs	r1, r4
 800b38e:	9b00      	ldr	r3, [sp, #0]
 800b390:	2b01      	cmp	r3, #1
 800b392:	dd00      	ble.n	800b396 <__kernel_rem_pio2+0x526>
 800b394:	e0b4      	b.n	800b500 <__kernel_rem_pio2+0x690>
 800b396:	9b08      	ldr	r3, [sp, #32]
 800b398:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 800b39a:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 800b39c:	9d50      	ldr	r5, [sp, #320]	; 0x140
 800b39e:	9851      	ldr	r0, [sp, #324]	; 0x144
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d000      	beq.n	800b3a6 <__kernel_rem_pio2+0x536>
 800b3a4:	e0ba      	b.n	800b51c <__kernel_rem_pio2+0x6ac>
 800b3a6:	0033      	movs	r3, r6
 800b3a8:	003a      	movs	r2, r7
 800b3aa:	9e07      	ldr	r6, [sp, #28]
 800b3ac:	6032      	str	r2, [r6, #0]
 800b3ae:	6073      	str	r3, [r6, #4]
 800b3b0:	002a      	movs	r2, r5
 800b3b2:	0003      	movs	r3, r0
 800b3b4:	60b2      	str	r2, [r6, #8]
 800b3b6:	60f3      	str	r3, [r6, #12]
 800b3b8:	0022      	movs	r2, r4
 800b3ba:	000b      	movs	r3, r1
 800b3bc:	6132      	str	r2, [r6, #16]
 800b3be:	6173      	str	r3, [r6, #20]
 800b3c0:	e7c7      	b.n	800b352 <__kernel_rem_pio2+0x4e2>
 800b3c2:	9b00      	ldr	r3, [sp, #0]
 800b3c4:	aa4e      	add	r2, sp, #312	; 0x138
 800b3c6:	00db      	lsls	r3, r3, #3
 800b3c8:	18d3      	adds	r3, r2, r3
 800b3ca:	0028      	movs	r0, r5
 800b3cc:	681a      	ldr	r2, [r3, #0]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	0021      	movs	r1, r4
 800b3d2:	f7f5 f98f 	bl	80006f4 <__aeabi_dadd>
 800b3d6:	0005      	movs	r5, r0
 800b3d8:	000c      	movs	r4, r1
 800b3da:	9b00      	ldr	r3, [sp, #0]
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	9b00      	ldr	r3, [sp, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	daed      	bge.n	800b3c2 <__kernel_rem_pio2+0x552>
 800b3e6:	9b08      	ldr	r3, [sp, #32]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d002      	beq.n	800b3f2 <__kernel_rem_pio2+0x582>
 800b3ec:	2380      	movs	r3, #128	; 0x80
 800b3ee:	061b      	lsls	r3, r3, #24
 800b3f0:	18e4      	adds	r4, r4, r3
 800b3f2:	002a      	movs	r2, r5
 800b3f4:	0023      	movs	r3, r4
 800b3f6:	9907      	ldr	r1, [sp, #28]
 800b3f8:	600a      	str	r2, [r1, #0]
 800b3fa:	604b      	str	r3, [r1, #4]
 800b3fc:	e7a9      	b.n	800b352 <__kernel_rem_pio2+0x4e2>
 800b3fe:	00e3      	lsls	r3, r4, #3
 800b400:	aa4e      	add	r2, sp, #312	; 0x138
 800b402:	18d3      	adds	r3, r2, r3
 800b404:	0030      	movs	r0, r6
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	0029      	movs	r1, r5
 800b40c:	f7f5 f972 	bl	80006f4 <__aeabi_dadd>
 800b410:	0006      	movs	r6, r0
 800b412:	000d      	movs	r5, r1
 800b414:	3c01      	subs	r4, #1
 800b416:	2c00      	cmp	r4, #0
 800b418:	daf1      	bge.n	800b3fe <__kernel_rem_pio2+0x58e>
 800b41a:	9b08      	ldr	r3, [sp, #32]
 800b41c:	0029      	movs	r1, r5
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d002      	beq.n	800b428 <__kernel_rem_pio2+0x5b8>
 800b422:	2380      	movs	r3, #128	; 0x80
 800b424:	061b      	lsls	r3, r3, #24
 800b426:	18e9      	adds	r1, r5, r3
 800b428:	0032      	movs	r2, r6
 800b42a:	000b      	movs	r3, r1
 800b42c:	9907      	ldr	r1, [sp, #28]
 800b42e:	2401      	movs	r4, #1
 800b430:	600a      	str	r2, [r1, #0]
 800b432:	604b      	str	r3, [r1, #4]
 800b434:	984e      	ldr	r0, [sp, #312]	; 0x138
 800b436:	994f      	ldr	r1, [sp, #316]	; 0x13c
 800b438:	002b      	movs	r3, r5
 800b43a:	f7f6 fb05 	bl	8001a48 <__aeabi_dsub>
 800b43e:	0007      	movs	r7, r0
 800b440:	000e      	movs	r6, r1
 800b442:	ad4e      	add	r5, sp, #312	; 0x138
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	3508      	adds	r5, #8
 800b448:	42a3      	cmp	r3, r4
 800b44a:	da0f      	bge.n	800b46c <__kernel_rem_pio2+0x5fc>
 800b44c:	9b08      	ldr	r3, [sp, #32]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <__kernel_rem_pio2+0x5e8>
 800b452:	2380      	movs	r3, #128	; 0x80
 800b454:	061b      	lsls	r3, r3, #24
 800b456:	18f6      	adds	r6, r6, r3
 800b458:	003a      	movs	r2, r7
 800b45a:	0033      	movs	r3, r6
 800b45c:	9907      	ldr	r1, [sp, #28]
 800b45e:	608a      	str	r2, [r1, #8]
 800b460:	60cb      	str	r3, [r1, #12]
 800b462:	e776      	b.n	800b352 <__kernel_rem_pio2+0x4e2>
 800b464:	2600      	movs	r6, #0
 800b466:	9c00      	ldr	r4, [sp, #0]
 800b468:	0035      	movs	r5, r6
 800b46a:	e7d4      	b.n	800b416 <__kernel_rem_pio2+0x5a6>
 800b46c:	0038      	movs	r0, r7
 800b46e:	682a      	ldr	r2, [r5, #0]
 800b470:	686b      	ldr	r3, [r5, #4]
 800b472:	0031      	movs	r1, r6
 800b474:	f7f5 f93e 	bl	80006f4 <__aeabi_dadd>
 800b478:	3401      	adds	r4, #1
 800b47a:	0007      	movs	r7, r0
 800b47c:	000e      	movs	r6, r1
 800b47e:	e7e1      	b.n	800b444 <__kernel_rem_pio2+0x5d4>
 800b480:	9b02      	ldr	r3, [sp, #8]
 800b482:	68ae      	ldr	r6, [r5, #8]
 800b484:	68ef      	ldr	r7, [r5, #12]
 800b486:	3b01      	subs	r3, #1
 800b488:	9302      	str	r3, [sp, #8]
 800b48a:	682a      	ldr	r2, [r5, #0]
 800b48c:	686b      	ldr	r3, [r5, #4]
 800b48e:	9204      	str	r2, [sp, #16]
 800b490:	9305      	str	r3, [sp, #20]
 800b492:	9804      	ldr	r0, [sp, #16]
 800b494:	9905      	ldr	r1, [sp, #20]
 800b496:	0032      	movs	r2, r6
 800b498:	003b      	movs	r3, r7
 800b49a:	f7f5 f92b 	bl	80006f4 <__aeabi_dadd>
 800b49e:	0002      	movs	r2, r0
 800b4a0:	000b      	movs	r3, r1
 800b4a2:	900a      	str	r0, [sp, #40]	; 0x28
 800b4a4:	910b      	str	r1, [sp, #44]	; 0x2c
 800b4a6:	9804      	ldr	r0, [sp, #16]
 800b4a8:	9905      	ldr	r1, [sp, #20]
 800b4aa:	f7f6 facd 	bl	8001a48 <__aeabi_dsub>
 800b4ae:	0032      	movs	r2, r6
 800b4b0:	003b      	movs	r3, r7
 800b4b2:	f7f5 f91f 	bl	80006f4 <__aeabi_dadd>
 800b4b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b4b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4ba:	60a8      	str	r0, [r5, #8]
 800b4bc:	60e9      	str	r1, [r5, #12]
 800b4be:	602a      	str	r2, [r5, #0]
 800b4c0:	606b      	str	r3, [r5, #4]
 800b4c2:	e758      	b.n	800b376 <__kernel_rem_pio2+0x506>
 800b4c4:	6826      	ldr	r6, [r4, #0]
 800b4c6:	6867      	ldr	r7, [r4, #4]
 800b4c8:	68a2      	ldr	r2, [r4, #8]
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	0030      	movs	r0, r6
 800b4ce:	0039      	movs	r1, r7
 800b4d0:	9202      	str	r2, [sp, #8]
 800b4d2:	9303      	str	r3, [sp, #12]
 800b4d4:	f7f5 f90e 	bl	80006f4 <__aeabi_dadd>
 800b4d8:	0002      	movs	r2, r0
 800b4da:	000b      	movs	r3, r1
 800b4dc:	9004      	str	r0, [sp, #16]
 800b4de:	9105      	str	r1, [sp, #20]
 800b4e0:	0030      	movs	r0, r6
 800b4e2:	0039      	movs	r1, r7
 800b4e4:	f7f6 fab0 	bl	8001a48 <__aeabi_dsub>
 800b4e8:	9a02      	ldr	r2, [sp, #8]
 800b4ea:	9b03      	ldr	r3, [sp, #12]
 800b4ec:	f7f5 f902 	bl	80006f4 <__aeabi_dadd>
 800b4f0:	9a04      	ldr	r2, [sp, #16]
 800b4f2:	9b05      	ldr	r3, [sp, #20]
 800b4f4:	60a0      	str	r0, [r4, #8]
 800b4f6:	60e1      	str	r1, [r4, #12]
 800b4f8:	6022      	str	r2, [r4, #0]
 800b4fa:	6063      	str	r3, [r4, #4]
 800b4fc:	3d01      	subs	r5, #1
 800b4fe:	e740      	b.n	800b382 <__kernel_rem_pio2+0x512>
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	aa4e      	add	r2, sp, #312	; 0x138
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	18d3      	adds	r3, r2, r3
 800b508:	0020      	movs	r0, r4
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f7f5 f8f1 	bl	80006f4 <__aeabi_dadd>
 800b512:	9b00      	ldr	r3, [sp, #0]
 800b514:	0004      	movs	r4, r0
 800b516:	3b01      	subs	r3, #1
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	e738      	b.n	800b38e <__kernel_rem_pio2+0x51e>
 800b51c:	9b07      	ldr	r3, [sp, #28]
 800b51e:	9a07      	ldr	r2, [sp, #28]
 800b520:	601f      	str	r7, [r3, #0]
 800b522:	2380      	movs	r3, #128	; 0x80
 800b524:	061b      	lsls	r3, r3, #24
 800b526:	18f6      	adds	r6, r6, r3
 800b528:	18c0      	adds	r0, r0, r3
 800b52a:	18c9      	adds	r1, r1, r3
 800b52c:	6056      	str	r6, [r2, #4]
 800b52e:	6095      	str	r5, [r2, #8]
 800b530:	60d0      	str	r0, [r2, #12]
 800b532:	6114      	str	r4, [r2, #16]
 800b534:	6151      	str	r1, [r2, #20]
 800b536:	e70c      	b.n	800b352 <__kernel_rem_pio2+0x4e2>
 800b538:	41700000 	.word	0x41700000
 800b53c:	3e700000 	.word	0x3e700000
 800b540:	0800e550 	.word	0x0800e550

0800b544 <__kernel_sin>:
 800b544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b546:	b089      	sub	sp, #36	; 0x24
 800b548:	9202      	str	r2, [sp, #8]
 800b54a:	9303      	str	r3, [sp, #12]
 800b54c:	22f9      	movs	r2, #249	; 0xf9
 800b54e:	004b      	lsls	r3, r1, #1
 800b550:	0007      	movs	r7, r0
 800b552:	000e      	movs	r6, r1
 800b554:	085b      	lsrs	r3, r3, #1
 800b556:	0592      	lsls	r2, r2, #22
 800b558:	4293      	cmp	r3, r2
 800b55a:	da03      	bge.n	800b564 <__kernel_sin+0x20>
 800b55c:	f7f6 fe06 	bl	800216c <__aeabi_d2iz>
 800b560:	2800      	cmp	r0, #0
 800b562:	d04c      	beq.n	800b5fe <__kernel_sin+0xba>
 800b564:	003a      	movs	r2, r7
 800b566:	0033      	movs	r3, r6
 800b568:	0038      	movs	r0, r7
 800b56a:	0031      	movs	r1, r6
 800b56c:	f7f6 f800 	bl	8001570 <__aeabi_dmul>
 800b570:	0004      	movs	r4, r0
 800b572:	000d      	movs	r5, r1
 800b574:	0002      	movs	r2, r0
 800b576:	000b      	movs	r3, r1
 800b578:	0038      	movs	r0, r7
 800b57a:	0031      	movs	r1, r6
 800b57c:	f7f5 fff8 	bl	8001570 <__aeabi_dmul>
 800b580:	4a39      	ldr	r2, [pc, #228]	; (800b668 <__kernel_sin+0x124>)
 800b582:	9000      	str	r0, [sp, #0]
 800b584:	9101      	str	r1, [sp, #4]
 800b586:	4b39      	ldr	r3, [pc, #228]	; (800b66c <__kernel_sin+0x128>)
 800b588:	0020      	movs	r0, r4
 800b58a:	0029      	movs	r1, r5
 800b58c:	f7f5 fff0 	bl	8001570 <__aeabi_dmul>
 800b590:	4a37      	ldr	r2, [pc, #220]	; (800b670 <__kernel_sin+0x12c>)
 800b592:	4b38      	ldr	r3, [pc, #224]	; (800b674 <__kernel_sin+0x130>)
 800b594:	f7f6 fa58 	bl	8001a48 <__aeabi_dsub>
 800b598:	0022      	movs	r2, r4
 800b59a:	002b      	movs	r3, r5
 800b59c:	f7f5 ffe8 	bl	8001570 <__aeabi_dmul>
 800b5a0:	4a35      	ldr	r2, [pc, #212]	; (800b678 <__kernel_sin+0x134>)
 800b5a2:	4b36      	ldr	r3, [pc, #216]	; (800b67c <__kernel_sin+0x138>)
 800b5a4:	f7f5 f8a6 	bl	80006f4 <__aeabi_dadd>
 800b5a8:	0022      	movs	r2, r4
 800b5aa:	002b      	movs	r3, r5
 800b5ac:	f7f5 ffe0 	bl	8001570 <__aeabi_dmul>
 800b5b0:	4a33      	ldr	r2, [pc, #204]	; (800b680 <__kernel_sin+0x13c>)
 800b5b2:	4b34      	ldr	r3, [pc, #208]	; (800b684 <__kernel_sin+0x140>)
 800b5b4:	f7f6 fa48 	bl	8001a48 <__aeabi_dsub>
 800b5b8:	0022      	movs	r2, r4
 800b5ba:	002b      	movs	r3, r5
 800b5bc:	f7f5 ffd8 	bl	8001570 <__aeabi_dmul>
 800b5c0:	4b31      	ldr	r3, [pc, #196]	; (800b688 <__kernel_sin+0x144>)
 800b5c2:	4a32      	ldr	r2, [pc, #200]	; (800b68c <__kernel_sin+0x148>)
 800b5c4:	f7f5 f896 	bl	80006f4 <__aeabi_dadd>
 800b5c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5ca:	9004      	str	r0, [sp, #16]
 800b5cc:	9105      	str	r1, [sp, #20]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d119      	bne.n	800b606 <__kernel_sin+0xc2>
 800b5d2:	0002      	movs	r2, r0
 800b5d4:	000b      	movs	r3, r1
 800b5d6:	0020      	movs	r0, r4
 800b5d8:	0029      	movs	r1, r5
 800b5da:	f7f5 ffc9 	bl	8001570 <__aeabi_dmul>
 800b5de:	4a2c      	ldr	r2, [pc, #176]	; (800b690 <__kernel_sin+0x14c>)
 800b5e0:	4b2c      	ldr	r3, [pc, #176]	; (800b694 <__kernel_sin+0x150>)
 800b5e2:	f7f6 fa31 	bl	8001a48 <__aeabi_dsub>
 800b5e6:	9a00      	ldr	r2, [sp, #0]
 800b5e8:	9b01      	ldr	r3, [sp, #4]
 800b5ea:	f7f5 ffc1 	bl	8001570 <__aeabi_dmul>
 800b5ee:	0002      	movs	r2, r0
 800b5f0:	000b      	movs	r3, r1
 800b5f2:	0038      	movs	r0, r7
 800b5f4:	0031      	movs	r1, r6
 800b5f6:	f7f5 f87d 	bl	80006f4 <__aeabi_dadd>
 800b5fa:	0007      	movs	r7, r0
 800b5fc:	000e      	movs	r6, r1
 800b5fe:	0038      	movs	r0, r7
 800b600:	0031      	movs	r1, r6
 800b602:	b009      	add	sp, #36	; 0x24
 800b604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b606:	2200      	movs	r2, #0
 800b608:	9802      	ldr	r0, [sp, #8]
 800b60a:	9903      	ldr	r1, [sp, #12]
 800b60c:	4b22      	ldr	r3, [pc, #136]	; (800b698 <__kernel_sin+0x154>)
 800b60e:	f7f5 ffaf 	bl	8001570 <__aeabi_dmul>
 800b612:	9a04      	ldr	r2, [sp, #16]
 800b614:	9b05      	ldr	r3, [sp, #20]
 800b616:	9006      	str	r0, [sp, #24]
 800b618:	9107      	str	r1, [sp, #28]
 800b61a:	9800      	ldr	r0, [sp, #0]
 800b61c:	9901      	ldr	r1, [sp, #4]
 800b61e:	f7f5 ffa7 	bl	8001570 <__aeabi_dmul>
 800b622:	0002      	movs	r2, r0
 800b624:	000b      	movs	r3, r1
 800b626:	9806      	ldr	r0, [sp, #24]
 800b628:	9907      	ldr	r1, [sp, #28]
 800b62a:	f7f6 fa0d 	bl	8001a48 <__aeabi_dsub>
 800b62e:	0022      	movs	r2, r4
 800b630:	002b      	movs	r3, r5
 800b632:	f7f5 ff9d 	bl	8001570 <__aeabi_dmul>
 800b636:	9a02      	ldr	r2, [sp, #8]
 800b638:	9b03      	ldr	r3, [sp, #12]
 800b63a:	f7f6 fa05 	bl	8001a48 <__aeabi_dsub>
 800b63e:	4a14      	ldr	r2, [pc, #80]	; (800b690 <__kernel_sin+0x14c>)
 800b640:	0004      	movs	r4, r0
 800b642:	000d      	movs	r5, r1
 800b644:	9800      	ldr	r0, [sp, #0]
 800b646:	9901      	ldr	r1, [sp, #4]
 800b648:	4b12      	ldr	r3, [pc, #72]	; (800b694 <__kernel_sin+0x150>)
 800b64a:	f7f5 ff91 	bl	8001570 <__aeabi_dmul>
 800b64e:	0002      	movs	r2, r0
 800b650:	000b      	movs	r3, r1
 800b652:	0020      	movs	r0, r4
 800b654:	0029      	movs	r1, r5
 800b656:	f7f5 f84d 	bl	80006f4 <__aeabi_dadd>
 800b65a:	0002      	movs	r2, r0
 800b65c:	000b      	movs	r3, r1
 800b65e:	0038      	movs	r0, r7
 800b660:	0031      	movs	r1, r6
 800b662:	f7f6 f9f1 	bl	8001a48 <__aeabi_dsub>
 800b666:	e7c8      	b.n	800b5fa <__kernel_sin+0xb6>
 800b668:	5acfd57c 	.word	0x5acfd57c
 800b66c:	3de5d93a 	.word	0x3de5d93a
 800b670:	8a2b9ceb 	.word	0x8a2b9ceb
 800b674:	3e5ae5e6 	.word	0x3e5ae5e6
 800b678:	57b1fe7d 	.word	0x57b1fe7d
 800b67c:	3ec71de3 	.word	0x3ec71de3
 800b680:	19c161d5 	.word	0x19c161d5
 800b684:	3f2a01a0 	.word	0x3f2a01a0
 800b688:	3f811111 	.word	0x3f811111
 800b68c:	1110f8a6 	.word	0x1110f8a6
 800b690:	55555549 	.word	0x55555549
 800b694:	3fc55555 	.word	0x3fc55555
 800b698:	3fe00000 	.word	0x3fe00000

0800b69c <fabs>:
 800b69c:	004b      	lsls	r3, r1, #1
 800b69e:	0859      	lsrs	r1, r3, #1
 800b6a0:	4770      	bx	lr
	...

0800b6a4 <floor>:
 800b6a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b6a6:	004b      	lsls	r3, r1, #1
 800b6a8:	4a3d      	ldr	r2, [pc, #244]	; (800b7a0 <floor+0xfc>)
 800b6aa:	0d5b      	lsrs	r3, r3, #21
 800b6ac:	189f      	adds	r7, r3, r2
 800b6ae:	4684      	mov	ip, r0
 800b6b0:	000e      	movs	r6, r1
 800b6b2:	000d      	movs	r5, r1
 800b6b4:	0004      	movs	r4, r0
 800b6b6:	9001      	str	r0, [sp, #4]
 800b6b8:	2f13      	cmp	r7, #19
 800b6ba:	dc34      	bgt.n	800b726 <floor+0x82>
 800b6bc:	2f00      	cmp	r7, #0
 800b6be:	da16      	bge.n	800b6ee <floor+0x4a>
 800b6c0:	4a38      	ldr	r2, [pc, #224]	; (800b7a4 <floor+0x100>)
 800b6c2:	4b39      	ldr	r3, [pc, #228]	; (800b7a8 <floor+0x104>)
 800b6c4:	4660      	mov	r0, ip
 800b6c6:	0031      	movs	r1, r6
 800b6c8:	f7f5 f814 	bl	80006f4 <__aeabi_dadd>
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f7f4 fec4 	bl	800045c <__aeabi_dcmpgt>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	d007      	beq.n	800b6e8 <floor+0x44>
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	da5d      	bge.n	800b798 <floor+0xf4>
 800b6dc:	0073      	lsls	r3, r6, #1
 800b6de:	085b      	lsrs	r3, r3, #1
 800b6e0:	431c      	orrs	r4, r3
 800b6e2:	d001      	beq.n	800b6e8 <floor+0x44>
 800b6e4:	2400      	movs	r4, #0
 800b6e6:	4d31      	ldr	r5, [pc, #196]	; (800b7ac <floor+0x108>)
 800b6e8:	46a4      	mov	ip, r4
 800b6ea:	002e      	movs	r6, r5
 800b6ec:	e029      	b.n	800b742 <floor+0x9e>
 800b6ee:	4b30      	ldr	r3, [pc, #192]	; (800b7b0 <floor+0x10c>)
 800b6f0:	413b      	asrs	r3, r7
 800b6f2:	9300      	str	r3, [sp, #0]
 800b6f4:	400b      	ands	r3, r1
 800b6f6:	4303      	orrs	r3, r0
 800b6f8:	d023      	beq.n	800b742 <floor+0x9e>
 800b6fa:	4a2a      	ldr	r2, [pc, #168]	; (800b7a4 <floor+0x100>)
 800b6fc:	4b2a      	ldr	r3, [pc, #168]	; (800b7a8 <floor+0x104>)
 800b6fe:	4660      	mov	r0, ip
 800b700:	0031      	movs	r1, r6
 800b702:	f7f4 fff7 	bl	80006f4 <__aeabi_dadd>
 800b706:	2200      	movs	r2, #0
 800b708:	2300      	movs	r3, #0
 800b70a:	f7f4 fea7 	bl	800045c <__aeabi_dcmpgt>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0ea      	beq.n	800b6e8 <floor+0x44>
 800b712:	2e00      	cmp	r6, #0
 800b714:	da03      	bge.n	800b71e <floor+0x7a>
 800b716:	2380      	movs	r3, #128	; 0x80
 800b718:	035b      	lsls	r3, r3, #13
 800b71a:	413b      	asrs	r3, r7
 800b71c:	18f5      	adds	r5, r6, r3
 800b71e:	9b00      	ldr	r3, [sp, #0]
 800b720:	2400      	movs	r4, #0
 800b722:	439d      	bics	r5, r3
 800b724:	e7e0      	b.n	800b6e8 <floor+0x44>
 800b726:	2f33      	cmp	r7, #51	; 0x33
 800b728:	dd0f      	ble.n	800b74a <floor+0xa6>
 800b72a:	2380      	movs	r3, #128	; 0x80
 800b72c:	00db      	lsls	r3, r3, #3
 800b72e:	429f      	cmp	r7, r3
 800b730:	d107      	bne.n	800b742 <floor+0x9e>
 800b732:	0002      	movs	r2, r0
 800b734:	000b      	movs	r3, r1
 800b736:	4660      	mov	r0, ip
 800b738:	0031      	movs	r1, r6
 800b73a:	f7f4 ffdb 	bl	80006f4 <__aeabi_dadd>
 800b73e:	4684      	mov	ip, r0
 800b740:	000e      	movs	r6, r1
 800b742:	4660      	mov	r0, ip
 800b744:	0031      	movs	r1, r6
 800b746:	b003      	add	sp, #12
 800b748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b74a:	4a1a      	ldr	r2, [pc, #104]	; (800b7b4 <floor+0x110>)
 800b74c:	189b      	adds	r3, r3, r2
 800b74e:	2201      	movs	r2, #1
 800b750:	4252      	negs	r2, r2
 800b752:	40da      	lsrs	r2, r3
 800b754:	9200      	str	r2, [sp, #0]
 800b756:	4210      	tst	r0, r2
 800b758:	d0f3      	beq.n	800b742 <floor+0x9e>
 800b75a:	4a12      	ldr	r2, [pc, #72]	; (800b7a4 <floor+0x100>)
 800b75c:	4b12      	ldr	r3, [pc, #72]	; (800b7a8 <floor+0x104>)
 800b75e:	4660      	mov	r0, ip
 800b760:	0031      	movs	r1, r6
 800b762:	f7f4 ffc7 	bl	80006f4 <__aeabi_dadd>
 800b766:	2200      	movs	r2, #0
 800b768:	2300      	movs	r3, #0
 800b76a:	f7f4 fe77 	bl	800045c <__aeabi_dcmpgt>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d0ba      	beq.n	800b6e8 <floor+0x44>
 800b772:	2e00      	cmp	r6, #0
 800b774:	da02      	bge.n	800b77c <floor+0xd8>
 800b776:	2f14      	cmp	r7, #20
 800b778:	d103      	bne.n	800b782 <floor+0xde>
 800b77a:	3501      	adds	r5, #1
 800b77c:	9b00      	ldr	r3, [sp, #0]
 800b77e:	439c      	bics	r4, r3
 800b780:	e7b2      	b.n	800b6e8 <floor+0x44>
 800b782:	2334      	movs	r3, #52	; 0x34
 800b784:	1bdf      	subs	r7, r3, r7
 800b786:	3b33      	subs	r3, #51	; 0x33
 800b788:	40bb      	lsls	r3, r7
 800b78a:	18e4      	adds	r4, r4, r3
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	429c      	cmp	r4, r3
 800b790:	419b      	sbcs	r3, r3
 800b792:	425b      	negs	r3, r3
 800b794:	18f5      	adds	r5, r6, r3
 800b796:	e7f1      	b.n	800b77c <floor+0xd8>
 800b798:	2400      	movs	r4, #0
 800b79a:	0025      	movs	r5, r4
 800b79c:	e7a4      	b.n	800b6e8 <floor+0x44>
 800b79e:	46c0      	nop			; (mov r8, r8)
 800b7a0:	fffffc01 	.word	0xfffffc01
 800b7a4:	8800759c 	.word	0x8800759c
 800b7a8:	7e37e43c 	.word	0x7e37e43c
 800b7ac:	bff00000 	.word	0xbff00000
 800b7b0:	000fffff 	.word	0x000fffff
 800b7b4:	fffffbed 	.word	0xfffffbed

0800b7b8 <scalbn>:
 800b7b8:	004b      	lsls	r3, r1, #1
 800b7ba:	b570      	push	{r4, r5, r6, lr}
 800b7bc:	0d5b      	lsrs	r3, r3, #21
 800b7be:	0014      	movs	r4, r2
 800b7c0:	000a      	movs	r2, r1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10d      	bne.n	800b7e2 <scalbn+0x2a>
 800b7c6:	004b      	lsls	r3, r1, #1
 800b7c8:	085b      	lsrs	r3, r3, #1
 800b7ca:	4303      	orrs	r3, r0
 800b7cc:	d010      	beq.n	800b7f0 <scalbn+0x38>
 800b7ce:	4b27      	ldr	r3, [pc, #156]	; (800b86c <scalbn+0xb4>)
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f7f5 fecd 	bl	8001570 <__aeabi_dmul>
 800b7d6:	4b26      	ldr	r3, [pc, #152]	; (800b870 <scalbn+0xb8>)
 800b7d8:	429c      	cmp	r4, r3
 800b7da:	da0a      	bge.n	800b7f2 <scalbn+0x3a>
 800b7dc:	4a25      	ldr	r2, [pc, #148]	; (800b874 <scalbn+0xbc>)
 800b7de:	4b26      	ldr	r3, [pc, #152]	; (800b878 <scalbn+0xc0>)
 800b7e0:	e019      	b.n	800b816 <scalbn+0x5e>
 800b7e2:	4d26      	ldr	r5, [pc, #152]	; (800b87c <scalbn+0xc4>)
 800b7e4:	42ab      	cmp	r3, r5
 800b7e6:	d108      	bne.n	800b7fa <scalbn+0x42>
 800b7e8:	0002      	movs	r2, r0
 800b7ea:	000b      	movs	r3, r1
 800b7ec:	f7f4 ff82 	bl	80006f4 <__aeabi_dadd>
 800b7f0:	bd70      	pop	{r4, r5, r6, pc}
 800b7f2:	000a      	movs	r2, r1
 800b7f4:	004b      	lsls	r3, r1, #1
 800b7f6:	0d5b      	lsrs	r3, r3, #21
 800b7f8:	3b36      	subs	r3, #54	; 0x36
 800b7fa:	4d21      	ldr	r5, [pc, #132]	; (800b880 <scalbn+0xc8>)
 800b7fc:	18e3      	adds	r3, r4, r3
 800b7fe:	42ab      	cmp	r3, r5
 800b800:	dd0c      	ble.n	800b81c <scalbn+0x64>
 800b802:	4c20      	ldr	r4, [pc, #128]	; (800b884 <scalbn+0xcc>)
 800b804:	4d20      	ldr	r5, [pc, #128]	; (800b888 <scalbn+0xd0>)
 800b806:	2900      	cmp	r1, #0
 800b808:	da01      	bge.n	800b80e <scalbn+0x56>
 800b80a:	4c1e      	ldr	r4, [pc, #120]	; (800b884 <scalbn+0xcc>)
 800b80c:	4d1f      	ldr	r5, [pc, #124]	; (800b88c <scalbn+0xd4>)
 800b80e:	0020      	movs	r0, r4
 800b810:	0029      	movs	r1, r5
 800b812:	4a1c      	ldr	r2, [pc, #112]	; (800b884 <scalbn+0xcc>)
 800b814:	4b1c      	ldr	r3, [pc, #112]	; (800b888 <scalbn+0xd0>)
 800b816:	f7f5 feab 	bl	8001570 <__aeabi_dmul>
 800b81a:	e7e9      	b.n	800b7f0 <scalbn+0x38>
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	dd05      	ble.n	800b82c <scalbn+0x74>
 800b820:	4c1b      	ldr	r4, [pc, #108]	; (800b890 <scalbn+0xd8>)
 800b822:	051b      	lsls	r3, r3, #20
 800b824:	4022      	ands	r2, r4
 800b826:	431a      	orrs	r2, r3
 800b828:	0011      	movs	r1, r2
 800b82a:	e7e1      	b.n	800b7f0 <scalbn+0x38>
 800b82c:	001d      	movs	r5, r3
 800b82e:	3535      	adds	r5, #53	; 0x35
 800b830:	da13      	bge.n	800b85a <scalbn+0xa2>
 800b832:	4a18      	ldr	r2, [pc, #96]	; (800b894 <scalbn+0xdc>)
 800b834:	0fcb      	lsrs	r3, r1, #31
 800b836:	4294      	cmp	r4, r2
 800b838:	dd08      	ble.n	800b84c <scalbn+0x94>
 800b83a:	4812      	ldr	r0, [pc, #72]	; (800b884 <scalbn+0xcc>)
 800b83c:	4912      	ldr	r1, [pc, #72]	; (800b888 <scalbn+0xd0>)
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <scalbn+0x8e>
 800b842:	4810      	ldr	r0, [pc, #64]	; (800b884 <scalbn+0xcc>)
 800b844:	4911      	ldr	r1, [pc, #68]	; (800b88c <scalbn+0xd4>)
 800b846:	4a0f      	ldr	r2, [pc, #60]	; (800b884 <scalbn+0xcc>)
 800b848:	4b0f      	ldr	r3, [pc, #60]	; (800b888 <scalbn+0xd0>)
 800b84a:	e7e4      	b.n	800b816 <scalbn+0x5e>
 800b84c:	4809      	ldr	r0, [pc, #36]	; (800b874 <scalbn+0xbc>)
 800b84e:	490a      	ldr	r1, [pc, #40]	; (800b878 <scalbn+0xc0>)
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0c3      	beq.n	800b7dc <scalbn+0x24>
 800b854:	4807      	ldr	r0, [pc, #28]	; (800b874 <scalbn+0xbc>)
 800b856:	4910      	ldr	r1, [pc, #64]	; (800b898 <scalbn+0xe0>)
 800b858:	e7c0      	b.n	800b7dc <scalbn+0x24>
 800b85a:	4c0d      	ldr	r4, [pc, #52]	; (800b890 <scalbn+0xd8>)
 800b85c:	3336      	adds	r3, #54	; 0x36
 800b85e:	4022      	ands	r2, r4
 800b860:	051b      	lsls	r3, r3, #20
 800b862:	4313      	orrs	r3, r2
 800b864:	0019      	movs	r1, r3
 800b866:	2200      	movs	r2, #0
 800b868:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <scalbn+0xe4>)
 800b86a:	e7d4      	b.n	800b816 <scalbn+0x5e>
 800b86c:	43500000 	.word	0x43500000
 800b870:	ffff3cb0 	.word	0xffff3cb0
 800b874:	c2f8f359 	.word	0xc2f8f359
 800b878:	01a56e1f 	.word	0x01a56e1f
 800b87c:	000007ff 	.word	0x000007ff
 800b880:	000007fe 	.word	0x000007fe
 800b884:	8800759c 	.word	0x8800759c
 800b888:	7e37e43c 	.word	0x7e37e43c
 800b88c:	fe37e43c 	.word	0xfe37e43c
 800b890:	800fffff 	.word	0x800fffff
 800b894:	0000c350 	.word	0x0000c350
 800b898:	81a56e1f 	.word	0x81a56e1f
 800b89c:	3c900000 	.word	0x3c900000

0800b8a0 <_init>:
 800b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8a2:	46c0      	nop			; (mov r8, r8)
 800b8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8a6:	bc08      	pop	{r3}
 800b8a8:	469e      	mov	lr, r3
 800b8aa:	4770      	bx	lr

0800b8ac <_fini>:
 800b8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ae:	46c0      	nop			; (mov r8, r8)
 800b8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8b2:	bc08      	pop	{r3}
 800b8b4:	469e      	mov	lr, r3
 800b8b6:	4770      	bx	lr
